
mpu_test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa98  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000aa98  1000aa98  0000ca98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000550  1000aae8  1000aae8  0000cae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000b038  1000b038  0000e1cc  2**0
                  CONTENTS
  5 .ARM          00000008  1000b038  1000b038  0000d038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  1000b040  1000b040  0000e1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000b040  1000b040  0000d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  1000b044  1000b044  0000d044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000140  10020000  1000b048  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020140  1000b188  0000e140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          000004cc  100201cc  1000b214  0000e1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020698  1000b6e0  0000e1cc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000e1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000209d9  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004738  00000000  00000000  0002ebd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001290  00000000  00000000  00033310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000db5  00000000  00000000  000345a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004b7d4  00000000  00000000  00035355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e144  00000000  00000000  00080b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001cebab  00000000  00000000  0009ec6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0026d818  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000053b0  00000000  00000000  0026d85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  00272c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201cc 	.word	0x100201cc
1000001c:	00000000 	.word	0x00000000
10000020:	1000aa80 	.word	0x1000aa80

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201d0 	.word	0x100201d0
1000003c:	1000aa80 	.word	0x1000aa80

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr

10000054 <strlen>:
10000054:	4603      	mov	r3, r0
10000056:	f813 2b01 	ldrb.w	r2, [r3], #1
1000005a:	2a00      	cmp	r2, #0
1000005c:	d1fb      	bne.n	10000056 <strlen+0x2>
1000005e:	1a18      	subs	r0, r3, r0
10000060:	3801      	subs	r0, #1
10000062:	4770      	bx	lr
	...

10000070 <memchr>:
10000070:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000074:	2a10      	cmp	r2, #16
10000076:	db2b      	blt.n	100000d0 <memchr+0x60>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	d008      	beq.n	10000090 <memchr+0x20>
1000007e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000082:	3a01      	subs	r2, #1
10000084:	428b      	cmp	r3, r1
10000086:	d02d      	beq.n	100000e4 <memchr+0x74>
10000088:	f010 0f07 	tst.w	r0, #7
1000008c:	b342      	cbz	r2, 100000e0 <memchr+0x70>
1000008e:	d1f6      	bne.n	1000007e <memchr+0xe>
10000090:	b4f0      	push	{r4, r5, r6, r7}
10000092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000009a:	f022 0407 	bic.w	r4, r2, #7
1000009e:	f07f 0700 	mvns.w	r7, #0
100000a2:	2300      	movs	r3, #0
100000a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
100000a8:	3c08      	subs	r4, #8
100000aa:	ea85 0501 	eor.w	r5, r5, r1
100000ae:	ea86 0601 	eor.w	r6, r6, r1
100000b2:	fa85 f547 	uadd8	r5, r5, r7
100000b6:	faa3 f587 	sel	r5, r3, r7
100000ba:	fa86 f647 	uadd8	r6, r6, r7
100000be:	faa5 f687 	sel	r6, r5, r7
100000c2:	b98e      	cbnz	r6, 100000e8 <memchr+0x78>
100000c4:	d1ee      	bne.n	100000a4 <memchr+0x34>
100000c6:	bcf0      	pop	{r4, r5, r6, r7}
100000c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000cc:	f002 0207 	and.w	r2, r2, #7
100000d0:	b132      	cbz	r2, 100000e0 <memchr+0x70>
100000d2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000d6:	3a01      	subs	r2, #1
100000d8:	ea83 0301 	eor.w	r3, r3, r1
100000dc:	b113      	cbz	r3, 100000e4 <memchr+0x74>
100000de:	d1f8      	bne.n	100000d2 <memchr+0x62>
100000e0:	2000      	movs	r0, #0
100000e2:	4770      	bx	lr
100000e4:	3801      	subs	r0, #1
100000e6:	4770      	bx	lr
100000e8:	2d00      	cmp	r5, #0
100000ea:	bf06      	itte	eq
100000ec:	4635      	moveq	r5, r6
100000ee:	3803      	subeq	r0, #3
100000f0:	3807      	subne	r0, #7
100000f2:	f015 0f01 	tst.w	r5, #1
100000f6:	d107      	bne.n	10000108 <memchr+0x98>
100000f8:	3001      	adds	r0, #1
100000fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000fe:	bf02      	ittt	eq
10000100:	3001      	addeq	r0, #1
10000102:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
10000106:	3001      	addeq	r0, #1
10000108:	bcf0      	pop	{r4, r5, r6, r7}
1000010a:	3801      	subs	r0, #1
1000010c:	4770      	bx	lr
1000010e:	bf00      	nop

10000110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000110:	b480      	push	{r7}
10000112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000114:	4b0f      	ldr	r3, [pc, #60]	@ (10000154 <SystemInit+0x44>)
10000116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000011a:	4a0e      	ldr	r2, [pc, #56]	@ (10000154 <SystemInit+0x44>)
1000011c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000124:	4b0c      	ldr	r3, [pc, #48]	@ (10000158 <SystemInit+0x48>)
10000126:	2200      	movs	r2, #0
10000128:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000012a:	4b0b      	ldr	r3, [pc, #44]	@ (10000158 <SystemInit+0x48>)
1000012c:	2200      	movs	r2, #0
1000012e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000130:	4b09      	ldr	r3, [pc, #36]	@ (10000158 <SystemInit+0x48>)
10000132:	2200      	movs	r2, #0
10000134:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000136:	4b08      	ldr	r3, [pc, #32]	@ (10000158 <SystemInit+0x48>)
10000138:	2200      	movs	r2, #0
1000013a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000013c:	4b06      	ldr	r3, [pc, #24]	@ (10000158 <SystemInit+0x48>)
1000013e:	2200      	movs	r2, #0
10000140:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000142:	4b05      	ldr	r3, [pc, #20]	@ (10000158 <SystemInit+0x48>)
10000144:	2200      	movs	r2, #0
10000146:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000148:	bf00      	nop
1000014a:	46bd      	mov	sp, r7
1000014c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000150:	4770      	bx	lr
10000152:	bf00      	nop
10000154:	e000ed00 	.word	0xe000ed00
10000158:	5000d0c0 	.word	0x5000d0c0

1000015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
1000015c:	b480      	push	{r7}
1000015e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10000160:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000164:	2204      	movs	r2, #4
10000166:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
1000016a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000016e:	2280      	movs	r2, #128	@ 0x80
10000170:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOE_CLK_ENABLE();
10000174:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000178:	2210      	movs	r2, #16
1000017a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

}
1000017e:	bf00      	nop
10000180:	46bd      	mov	sp, r7
10000182:	f85d 7b04 	ldr.w	r7, [sp], #4
10000186:	4770      	bx	lr

10000188 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
10000188:	b580      	push	{r7, lr}
1000018a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
1000018c:	4b06      	ldr	r3, [pc, #24]	@ (100001a8 <MX_IPCC_Init+0x20>)
1000018e:	4a07      	ldr	r2, [pc, #28]	@ (100001ac <MX_IPCC_Init+0x24>)
10000190:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
10000192:	4805      	ldr	r0, [pc, #20]	@ (100001a8 <MX_IPCC_Init+0x20>)
10000194:	f001 f844 	bl	10001220 <HAL_IPCC_Init>
10000198:	4603      	mov	r3, r0
1000019a:	2b00      	cmp	r3, #0
1000019c:	d001      	beq.n	100001a2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
1000019e:	f000 fcb9 	bl	10000b14 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
100001a2:	bf00      	nop
100001a4:	bd80      	pop	{r7, pc}
100001a6:	bf00      	nop
100001a8:	100201e8 	.word	0x100201e8
100001ac:	4c001000 	.word	0x4c001000

100001b0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
100001b0:	b580      	push	{r7, lr}
100001b2:	b082      	sub	sp, #8
100001b4:	af00      	add	r7, sp, #0
100001b6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
100001b8:	687b      	ldr	r3, [r7, #4]
100001ba:	681b      	ldr	r3, [r3, #0]
100001bc:	4a0e      	ldr	r2, [pc, #56]	@ (100001f8 <HAL_IPCC_MspInit+0x48>)
100001be:	4293      	cmp	r3, r2
100001c0:	d115      	bne.n	100001ee <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
100001c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100001c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
100001ca:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
100001ce:	2200      	movs	r2, #0
100001d0:	2101      	movs	r1, #1
100001d2:	2067      	movs	r0, #103	@ 0x67
100001d4:	f000 ffed 	bl	100011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100001d8:	2067      	movs	r0, #103	@ 0x67
100001da:	f001 f806 	bl	100011ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
100001de:	2200      	movs	r2, #0
100001e0:	2101      	movs	r1, #1
100001e2:	2068      	movs	r0, #104	@ 0x68
100001e4:	f000 ffe5 	bl	100011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
100001e8:	2068      	movs	r0, #104	@ 0x68
100001ea:	f000 fffe 	bl	100011ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
100001ee:	bf00      	nop
100001f0:	3708      	adds	r7, #8
100001f2:	46bd      	mov	sp, r7
100001f4:	bd80      	pop	{r7, pc}
100001f6:	bf00      	nop
100001f8:	4c001000 	.word	0x4c001000

100001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100001fc:	b580      	push	{r7, lr}
100001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000200:	f000 fe68 	bl	10000ed4 <HAL_Init>

  /* USER CODE BEGIN Init */
  	// HAL_Delay(Delay)
  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000204:	4b20      	ldr	r3, [pc, #128]	@ (10000288 <main+0x8c>)
10000206:	681b      	ldr	r3, [r3, #0]
10000208:	f003 0307 	and.w	r3, r3, #7
1000020c:	2b04      	cmp	r3, #4
1000020e:	d102      	bne.n	10000216 <main+0x1a>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000210:	f000 f844 	bl	1000029c <SystemClock_Config>
10000214:	e005      	b.n	10000222 <main+0x26>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000216:	f7ff ffb7 	bl	10000188 <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
1000021a:	2100      	movs	r1, #0
1000021c:	2001      	movs	r0, #1
1000021e:	f009 f933 	bl	10009488 <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */
  log_info("Beginning Cortex-M4 peripherials initialization\r\n")
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000222:	f7ff ff9b 	bl	1000015c <MX_GPIO_Init>
  MX_UART7_Init();
10000226:	f000 fdc1 	bl	10000dac <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  log_info("Virtual UART0 OpenAMP-rpmsg channel creation\r\n");
  if (VIRT_UART_Init(&huart0) != VIRT_UART_OK)
1000022a:	4818      	ldr	r0, [pc, #96]	@ (1000028c <main+0x90>)
1000022c:	f008 fc88 	bl	10008b40 <VIRT_UART_Init>
10000230:	4603      	mov	r3, r0
10000232:	2b00      	cmp	r3, #0
10000234:	d001      	beq.n	1000023a <main+0x3e>
  {
	  log_err("VIRT_UART_Init UART0 failed.\r\n");
	  Error_Handler();
10000236:	f000 fc6d 	bl	10000b14 <Error_Handler>
  }

  log_info("Virtual UART1 OpenAMP-rpmsg channel creation\r\n");
  if (VIRT_UART_Init(&huart1) != VIRT_UART_OK)
1000023a:	4815      	ldr	r0, [pc, #84]	@ (10000290 <main+0x94>)
1000023c:	f008 fc80 	bl	10008b40 <VIRT_UART_Init>
10000240:	4603      	mov	r3, r0
10000242:	2b00      	cmp	r3, #0
10000244:	d001      	beq.n	1000024a <main+0x4e>
  {
	  log_err("VIRT_UART_Init UART1 failed.\r\n");
	  Error_Handler();
10000246:	f000 fc65 	bl	10000b14 <Error_Handler>
  }

  if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART0_RxCpltCallback) != VIRT_UART_OK)
1000024a:	4a12      	ldr	r2, [pc, #72]	@ (10000294 <main+0x98>)
1000024c:	2100      	movs	r1, #0
1000024e:	480f      	ldr	r0, [pc, #60]	@ (1000028c <main+0x90>)
10000250:	f008 fc92 	bl	10008b78 <VIRT_UART_RegisterCallback>
10000254:	4603      	mov	r3, r0
10000256:	2b00      	cmp	r3, #0
10000258:	d001      	beq.n	1000025e <main+0x62>
  {
	  Error_Handler();
1000025a:	f000 fc5b 	bl	10000b14 <Error_Handler>
  }
  if(VIRT_UART_RegisterCallback(&huart1, VIRT_UART_RXCPLT_CB_ID, VIRT_UART1_RxCpltCallback) != VIRT_UART_OK)
1000025e:	4a0e      	ldr	r2, [pc, #56]	@ (10000298 <main+0x9c>)
10000260:	2100      	movs	r1, #0
10000262:	480b      	ldr	r0, [pc, #44]	@ (10000290 <main+0x94>)
10000264:	f008 fc88 	bl	10008b78 <VIRT_UART_RegisterCallback>
10000268:	4603      	mov	r3, r0
1000026a:	2b00      	cmp	r3, #0
1000026c:	d001      	beq.n	10000272 <main+0x76>
  {
	  Error_Handler();
1000026e:	f000 fc51 	bl	10000b14 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OPENAMP_check_for_message();
10000272:	f009 f9bb 	bl	100095ec <OPENAMP_check_for_message>

	  sim_flow();
10000276:	f000 fb3b 	bl	100008f0 <sim_flow>
	  sim_heating();
1000027a:	f000 fbc3 	bl	10000a04 <sim_heating>
//		  }
//		  VirtUart0RxMsgBeg++;
//		  if(VirtUart0RxMsgBeg >= 16) VirtUart0RxMsgBeg = 0;
//	  }

	  HAL_Delay(10);
1000027e:	200a      	movs	r0, #10
10000280:	f000 fe98 	bl	10000fb4 <HAL_Delay>
	  OPENAMP_check_for_message();
10000284:	bf00      	nop
10000286:	e7f4      	b.n	10000272 <main+0x76>
10000288:	50020000 	.word	0x50020000
1000028c:	10020224 	.word	0x10020224
10000290:	10020274 	.word	0x10020274
10000294:	100004f5 	.word	0x100004f5
10000298:	100008a9 	.word	0x100008a9

1000029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
1000029c:	b580      	push	{r7, lr}
1000029e:	b0d2      	sub	sp, #328	@ 0x148
100002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100002a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002aa:	4618      	mov	r0, r3
100002ac:	f44f 738a 	mov.w	r3, #276	@ 0x114
100002b0:	461a      	mov	r2, r3
100002b2:	2100      	movs	r1, #0
100002b4:	f009 fc55 	bl	10009b62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100002b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002bc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100002c0:	4618      	mov	r0, r3
100002c2:	2330      	movs	r3, #48	@ 0x30
100002c4:	461a      	mov	r2, r3
100002c6:	2100      	movs	r1, #0
100002c8:	f009 fc4b 	bl	10009b62 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
100002cc:	f001 f9be 	bl	1000164c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
100002d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100002d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100002d8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
100002dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100002e0:	f043 0320 	orr.w	r3, r3, #32
100002e4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE
100002e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002f0:	2215      	movs	r2, #21
100002f2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
100002f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002fc:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
10000300:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000302:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000306:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000030a:	2201      	movs	r2, #1
1000030c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
1000030e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000312:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000316:	2210      	movs	r2, #16
10000318:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
1000031a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000031e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000322:	2200      	movs	r2, #0
10000324:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000326:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000032a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000032e:	2202      	movs	r2, #2
10000330:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000332:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000336:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000033a:	2201      	movs	r2, #1
1000033c:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
1000033e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000342:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000346:	2203      	movs	r2, #3
10000348:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
1000034a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000034e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000352:	2242      	movs	r2, #66	@ 0x42
10000354:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000356:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000035a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000035e:	2202      	movs	r2, #2
10000360:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000362:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000366:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000036a:	2201      	movs	r2, #1
1000036c:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
1000036e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000372:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000376:	2201      	movs	r2, #1
10000378:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
1000037a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000037e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000382:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
10000386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
1000038a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000038e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000392:	2201      	movs	r2, #1
10000394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000398:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000039c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003a0:	2202      	movs	r2, #2
100003a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
100003a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003ae:	2201      	movs	r2, #1
100003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
100003b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003bc:	2202      	movs	r2, #2
100003be:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
100003c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003ca:	2222      	movs	r2, #34	@ 0x22
100003cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
100003d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003d8:	2202      	movs	r2, #2
100003da:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
100003de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003e6:	2211      	movs	r2, #17
100003e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
100003ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003f4:	2225      	movs	r2, #37	@ 0x25
100003f6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100003fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000402:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
10000406:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
1000040a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000040e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000412:	f641 2204 	movw	r2, #6660	@ 0x1a04
10000416:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
1000041a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000041e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000422:	2201      	movs	r2, #1
10000424:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
10000428:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000042c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000430:	2200      	movs	r2, #0
10000432:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000436:	f107 0334 	add.w	r3, r7, #52	@ 0x34
1000043a:	4618      	mov	r0, r3
1000043c:	f001 f916 	bl	1000166c <HAL_RCC_OscConfig>
10000440:	4603      	mov	r3, r0
10000442:	2b00      	cmp	r3, #0
10000444:	d001      	beq.n	1000044a <SystemClock_Config+0x1ae>
  {
    Error_Handler();
10000446:	f000 fb65 	bl	10000b14 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
1000044a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000044e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000452:	22fe      	movs	r2, #254	@ 0xfe
10000454:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000456:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000045a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000045e:	2202      	movs	r2, #2
10000460:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000462:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000466:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000046a:	2200      	movs	r2, #0
1000046c:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
1000046e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000472:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000476:	2203      	movs	r2, #3
10000478:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
1000047a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000047e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000482:	2200      	movs	r2, #0
10000484:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000486:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000048a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000048e:	2201      	movs	r2, #1
10000490:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000492:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000496:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000049a:	2202      	movs	r2, #2
1000049c:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000049e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004a6:	2201      	movs	r2, #1
100004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
100004aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004b2:	2201      	movs	r2, #1
100004b4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
100004b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004be:	2201      	movs	r2, #1
100004c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
100004c2:	1d3b      	adds	r3, r7, #4
100004c4:	4618      	mov	r0, r3
100004c6:	f001 fe6f 	bl	100021a8 <HAL_RCC_ClockConfig>
100004ca:	4603      	mov	r3, r0
100004cc:	2b00      	cmp	r3, #0
100004ce:	d001      	beq.n	100004d4 <SystemClock_Config+0x238>
  {
    Error_Handler();
100004d0:	f000 fb20 	bl	10000b14 <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
100004d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100004da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
100004de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100004e2:	f043 0317 	orr.w	r3, r3, #23
100004e6:	6453      	str	r3, [r2, #68]	@ 0x44
}
100004e8:	bf00      	nop
100004ea:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
100004ee:	46bd      	mov	sp, r7
100004f0:	bd80      	pop	{r7, pc}
	...

100004f4 <VIRT_UART0_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void VIRT_UART0_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
100004f4:	b590      	push	{r4, r7, lr}
100004f6:	b095      	sub	sp, #84	@ 0x54
100004f8:	af00      	add	r7, sp, #0
100004fa:	6078      	str	r0, [r7, #4]
    //log_info("Msg received on VIRTUAL UART0 channel:  %s \n\r", (char *) huart->pRxBuffPtr);
	char buff[16]; //VirtUart0ChannelBuffRx[VirtUart0RxMsgEnd]
    /* copy received msg in a variable to sent it back to master processor in main infinite loop*/
    VirtUart0ChannelRxSize = huart->RxXferSize < MAX_BUFFER_SIZE? huart->RxXferSize : MAX_BUFFER_SIZE-1;
100004fc:	687b      	ldr	r3, [r7, #4]
100004fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
10000502:	f240 12ff 	movw	r2, #511	@ 0x1ff
10000506:	4293      	cmp	r3, r2
10000508:	bf28      	it	cs
1000050a:	4613      	movcs	r3, r2
1000050c:	b29a      	uxth	r2, r3
1000050e:	4bd1      	ldr	r3, [pc, #836]	@ (10000854 <VIRT_UART0_RxCpltCallback+0x360>)
10000510:	801a      	strh	r2, [r3, #0]
    memcpy(buff, huart->pRxBuffPtr, VirtUart0ChannelRxSize);
10000512:	687b      	ldr	r3, [r7, #4]
10000514:	6c59      	ldr	r1, [r3, #68]	@ 0x44
10000516:	4bcf      	ldr	r3, [pc, #828]	@ (10000854 <VIRT_UART0_RxCpltCallback+0x360>)
10000518:	881b      	ldrh	r3, [r3, #0]
1000051a:	461a      	mov	r2, r3
1000051c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
10000520:	4618      	mov	r0, r3
10000522:	f009 fbce 	bl	10009cc2 <memcpy>
    //VirtUart0RxMsg = SET;
//    VirtUart0RxMsgEnd++;
//    if(VirtUart0RxMsgEnd >= 16) VirtUart0RxMsgEnd = 0;
    char cmd[] = "XXX:";
10000526:	4acc      	ldr	r2, [pc, #816]	@ (10000858 <VIRT_UART0_RxCpltCallback+0x364>)
10000528:	f107 0328 	add.w	r3, r7, #40	@ 0x28
1000052c:	e892 0003 	ldmia.w	r2, {r0, r1}
10000530:	6018      	str	r0, [r3, #0]
10000532:	3304      	adds	r3, #4
10000534:	7019      	strb	r1, [r3, #0]
	memcpy(cmd, buff, strlen(cmd));
10000536:	f107 0328 	add.w	r3, r7, #40	@ 0x28
1000053a:	4618      	mov	r0, r3
1000053c:	f7ff fd8a 	bl	10000054 <strlen>
10000540:	4602      	mov	r2, r0
10000542:	f107 0130 	add.w	r1, r7, #48	@ 0x30
10000546:	f107 0328 	add.w	r3, r7, #40	@ 0x28
1000054a:	4618      	mov	r0, r3
1000054c:	f009 fbb9 	bl	10009cc2 <memcpy>
	if(strcmp(cmd, "SET:") == 0)
10000550:	f107 0328 	add.w	r3, r7, #40	@ 0x28
10000554:	49c1      	ldr	r1, [pc, #772]	@ (1000085c <VIRT_UART0_RxCpltCallback+0x368>)
10000556:	4618      	mov	r0, r3
10000558:	f7ff fd72 	bl	10000040 <strcmp>
1000055c:	4603      	mov	r3, r0
1000055e:	2b00      	cmp	r3, #0
10000560:	f040 80d3 	bne.w	1000070a <VIRT_UART0_RxCpltCallback+0x216>
	{
	  char var[] = "YYYY:";
10000564:	4abe      	ldr	r2, [pc, #760]	@ (10000860 <VIRT_UART0_RxCpltCallback+0x36c>)
10000566:	f107 0320 	add.w	r3, r7, #32
1000056a:	e892 0003 	ldmia.w	r2, {r0, r1}
1000056e:	6018      	str	r0, [r3, #0]
10000570:	3304      	adds	r3, #4
10000572:	8019      	strh	r1, [r3, #0]
	  memcpy(var, buff + 4, strlen(var));
10000574:	f107 0430 	add.w	r4, r7, #48	@ 0x30
10000578:	3404      	adds	r4, #4
1000057a:	f107 0320 	add.w	r3, r7, #32
1000057e:	4618      	mov	r0, r3
10000580:	f7ff fd68 	bl	10000054 <strlen>
10000584:	4602      	mov	r2, r0
10000586:	f107 0320 	add.w	r3, r7, #32
1000058a:	4621      	mov	r1, r4
1000058c:	4618      	mov	r0, r3
1000058e:	f009 fb98 	bl	10009cc2 <memcpy>
	  if(strcmp(var, "TEMP:") == 0)
10000592:	f107 0320 	add.w	r3, r7, #32
10000596:	49b3      	ldr	r1, [pc, #716]	@ (10000864 <VIRT_UART0_RxCpltCallback+0x370>)
10000598:	4618      	mov	r0, r3
1000059a:	f7ff fd51 	bl	10000040 <strcmp>
1000059e:	4603      	mov	r3, r0
100005a0:	2b00      	cmp	r3, #0
100005a2:	d110      	bne.n	100005c6 <VIRT_UART0_RxCpltCallback+0xd2>
	  {
		  temp = (float)atoi(buff + 9) / 10.f;
100005a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
100005a8:	3309      	adds	r3, #9
100005aa:	4618      	mov	r0, r3
100005ac:	f009 f85c 	bl	10009668 <atoi>
100005b0:	ee07 0a90 	vmov	s15, r0
100005b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
100005b8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
100005bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
100005c0:	4ba9      	ldr	r3, [pc, #676]	@ (10000868 <VIRT_UART0_RxCpltCallback+0x374>)
100005c2:	edc3 7a00 	vstr	s15, [r3]
	  }
	  memcpy(var, buff + 4, strlen(var));
100005c6:	f107 0430 	add.w	r4, r7, #48	@ 0x30
100005ca:	3404      	adds	r4, #4
100005cc:	f107 0320 	add.w	r3, r7, #32
100005d0:	4618      	mov	r0, r3
100005d2:	f7ff fd3f 	bl	10000054 <strlen>
100005d6:	4602      	mov	r2, r0
100005d8:	f107 0320 	add.w	r3, r7, #32
100005dc:	4621      	mov	r1, r4
100005de:	4618      	mov	r0, r3
100005e0:	f009 fb6f 	bl	10009cc2 <memcpy>
	  if(strcmp(var, "DIRT:") == 0)
100005e4:	f107 0320 	add.w	r3, r7, #32
100005e8:	49a0      	ldr	r1, [pc, #640]	@ (1000086c <VIRT_UART0_RxCpltCallback+0x378>)
100005ea:	4618      	mov	r0, r3
100005ec:	f7ff fd28 	bl	10000040 <strcmp>
100005f0:	4603      	mov	r3, r0
100005f2:	2b00      	cmp	r3, #0
100005f4:	d129      	bne.n	1000064a <VIRT_UART0_RxCpltCallback+0x156>
	  {
		  dirt = (float)atoi(buff + 9) / 10.f;
100005f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
100005fa:	3309      	adds	r3, #9
100005fc:	4618      	mov	r0, r3
100005fe:	f009 f833 	bl	10009668 <atoi>
10000602:	ee07 0a90 	vmov	s15, r0
10000606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1000060a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
1000060e:	eec7 7a26 	vdiv.f32	s15, s14, s13
10000612:	4b97      	ldr	r3, [pc, #604]	@ (10000870 <VIRT_UART0_RxCpltCallback+0x37c>)
10000614:	edc3 7a00 	vstr	s15, [r3]
		  if(dirt < 0.f) dirt = 0.f;
10000618:	4b95      	ldr	r3, [pc, #596]	@ (10000870 <VIRT_UART0_RxCpltCallback+0x37c>)
1000061a:	edd3 7a00 	vldr	s15, [r3]
1000061e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
10000622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000626:	d503      	bpl.n	10000630 <VIRT_UART0_RxCpltCallback+0x13c>
10000628:	4b91      	ldr	r3, [pc, #580]	@ (10000870 <VIRT_UART0_RxCpltCallback+0x37c>)
1000062a:	f04f 0200 	mov.w	r2, #0
1000062e:	601a      	str	r2, [r3, #0]
		  if(dirt > 100.f) dirt = 100.f;
10000630:	4b8f      	ldr	r3, [pc, #572]	@ (10000870 <VIRT_UART0_RxCpltCallback+0x37c>)
10000632:	edd3 7a00 	vldr	s15, [r3]
10000636:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 10000874 <VIRT_UART0_RxCpltCallback+0x380>
1000063a:	eef4 7ac7 	vcmpe.f32	s15, s14
1000063e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
10000642:	dd02      	ble.n	1000064a <VIRT_UART0_RxCpltCallback+0x156>
10000644:	4b8a      	ldr	r3, [pc, #552]	@ (10000870 <VIRT_UART0_RxCpltCallback+0x37c>)
10000646:	4a8c      	ldr	r2, [pc, #560]	@ (10000878 <VIRT_UART0_RxCpltCallback+0x384>)
10000648:	601a      	str	r2, [r3, #0]
	  }
	  if(strcmp(var, "WATT:") == 0)
1000064a:	f107 0320 	add.w	r3, r7, #32
1000064e:	498b      	ldr	r1, [pc, #556]	@ (1000087c <VIRT_UART0_RxCpltCallback+0x388>)
10000650:	4618      	mov	r0, r3
10000652:	f7ff fcf5 	bl	10000040 <strcmp>
10000656:	4603      	mov	r3, r0
10000658:	2b00      	cmp	r3, #0
1000065a:	d11c      	bne.n	10000696 <VIRT_UART0_RxCpltCallback+0x1a2>
	  {
		  watt = (float)atoi(buff + 9) / 10.f;
1000065c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
10000660:	3309      	adds	r3, #9
10000662:	4618      	mov	r0, r3
10000664:	f009 f800 	bl	10009668 <atoi>
10000668:	ee07 0a90 	vmov	s15, r0
1000066c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
10000670:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
10000674:	eec7 7a26 	vdiv.f32	s15, s14, s13
10000678:	4b81      	ldr	r3, [pc, #516]	@ (10000880 <VIRT_UART0_RxCpltCallback+0x38c>)
1000067a:	edc3 7a00 	vstr	s15, [r3]
		  if(watt < 0.f) watt = 0.f;
1000067e:	4b80      	ldr	r3, [pc, #512]	@ (10000880 <VIRT_UART0_RxCpltCallback+0x38c>)
10000680:	edd3 7a00 	vldr	s15, [r3]
10000684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
10000688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1000068c:	d503      	bpl.n	10000696 <VIRT_UART0_RxCpltCallback+0x1a2>
1000068e:	4b7c      	ldr	r3, [pc, #496]	@ (10000880 <VIRT_UART0_RxCpltCallback+0x38c>)
10000690:	f04f 0200 	mov.w	r2, #0
10000694:	601a      	str	r2, [r3, #0]

	  }
	  if(strcmp(var, "FLOW:") == 0)
10000696:	f107 0320 	add.w	r3, r7, #32
1000069a:	497a      	ldr	r1, [pc, #488]	@ (10000884 <VIRT_UART0_RxCpltCallback+0x390>)
1000069c:	4618      	mov	r0, r3
1000069e:	f7ff fccf 	bl	10000040 <strcmp>
100006a2:	4603      	mov	r3, r0
100006a4:	2b00      	cmp	r3, #0
100006a6:	d129      	bne.n	100006fc <VIRT_UART0_RxCpltCallback+0x208>
	  {
		  flow = (float)atoi(buff + 9) / 10.f;
100006a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
100006ac:	3309      	adds	r3, #9
100006ae:	4618      	mov	r0, r3
100006b0:	f008 ffda 	bl	10009668 <atoi>
100006b4:	ee07 0a90 	vmov	s15, r0
100006b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
100006bc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
100006c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
100006c4:	4b70      	ldr	r3, [pc, #448]	@ (10000888 <VIRT_UART0_RxCpltCallback+0x394>)
100006c6:	edc3 7a00 	vstr	s15, [r3]
		  if(flow < 0.f) flow = 0.f;
100006ca:	4b6f      	ldr	r3, [pc, #444]	@ (10000888 <VIRT_UART0_RxCpltCallback+0x394>)
100006cc:	edd3 7a00 	vldr	s15, [r3]
100006d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
100006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100006d8:	d503      	bpl.n	100006e2 <VIRT_UART0_RxCpltCallback+0x1ee>
100006da:	4b6b      	ldr	r3, [pc, #428]	@ (10000888 <VIRT_UART0_RxCpltCallback+0x394>)
100006dc:	f04f 0200 	mov.w	r2, #0
100006e0:	601a      	str	r2, [r3, #0]
		  if(flow > 100.f) flow = 100.f;
100006e2:	4b69      	ldr	r3, [pc, #420]	@ (10000888 <VIRT_UART0_RxCpltCallback+0x394>)
100006e4:	edd3 7a00 	vldr	s15, [r3]
100006e8:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 10000874 <VIRT_UART0_RxCpltCallback+0x380>
100006ec:	eef4 7ac7 	vcmpe.f32	s15, s14
100006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100006f4:	dd02      	ble.n	100006fc <VIRT_UART0_RxCpltCallback+0x208>
100006f6:	4b64      	ldr	r3, [pc, #400]	@ (10000888 <VIRT_UART0_RxCpltCallback+0x394>)
100006f8:	4a5f      	ldr	r2, [pc, #380]	@ (10000878 <VIRT_UART0_RxCpltCallback+0x384>)
100006fa:	601a      	str	r2, [r3, #0]
	  }
	  if(strcmp(var, "COEF:") == 0)
100006fc:	f107 0320 	add.w	r3, r7, #32
10000700:	4962      	ldr	r1, [pc, #392]	@ (1000088c <VIRT_UART0_RxCpltCallback+0x398>)
10000702:	4618      	mov	r0, r3
10000704:	f7ff fc9c 	bl	10000040 <strcmp>
		  sprintf(strbuf, "%i.%i\r\n", dirt1, dirt2);

		  VIRT_UART_Transmit(&huart0, strbuf, strlen(strbuf));
	  }
	}
}
10000708:	e09f      	b.n	1000084a <VIRT_UART0_RxCpltCallback+0x356>
	else if(strcmp(cmd, "GET:") == 0)
1000070a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
1000070e:	4960      	ldr	r1, [pc, #384]	@ (10000890 <VIRT_UART0_RxCpltCallback+0x39c>)
10000710:	4618      	mov	r0, r3
10000712:	f7ff fc95 	bl	10000040 <strcmp>
10000716:	4603      	mov	r3, r0
10000718:	2b00      	cmp	r3, #0
1000071a:	f040 8096 	bne.w	1000084a <VIRT_UART0_RxCpltCallback+0x356>
	  char var[] = "YYYY";
1000071e:	4a5d      	ldr	r2, [pc, #372]	@ (10000894 <VIRT_UART0_RxCpltCallback+0x3a0>)
10000720:	f107 0308 	add.w	r3, r7, #8
10000724:	e892 0003 	ldmia.w	r2, {r0, r1}
10000728:	6018      	str	r0, [r3, #0]
1000072a:	3304      	adds	r3, #4
1000072c:	7019      	strb	r1, [r3, #0]
	  memcpy(var, buff+ 4, strlen(var));
1000072e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
10000732:	3404      	adds	r4, #4
10000734:	f107 0308 	add.w	r3, r7, #8
10000738:	4618      	mov	r0, r3
1000073a:	f7ff fc8b 	bl	10000054 <strlen>
1000073e:	4602      	mov	r2, r0
10000740:	f107 0308 	add.w	r3, r7, #8
10000744:	4621      	mov	r1, r4
10000746:	4618      	mov	r0, r3
10000748:	f009 fabb 	bl	10009cc2 <memcpy>
	  if(strcmp(var, "TEMP") == 0)
1000074c:	f107 0308 	add.w	r3, r7, #8
10000750:	4951      	ldr	r1, [pc, #324]	@ (10000898 <VIRT_UART0_RxCpltCallback+0x3a4>)
10000752:	4618      	mov	r0, r3
10000754:	f7ff fc74 	bl	10000040 <strcmp>
10000758:	4603      	mov	r3, r0
1000075a:	2b00      	cmp	r3, #0
1000075c:	d12e      	bne.n	100007bc <VIRT_UART0_RxCpltCallback+0x2c8>
		  int temp1 = (int)temp;
1000075e:	4b42      	ldr	r3, [pc, #264]	@ (10000868 <VIRT_UART0_RxCpltCallback+0x374>)
10000760:	edd3 7a00 	vldr	s15, [r3]
10000764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
10000768:	ee17 3a90 	vmov	r3, s15
1000076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  int temp2 = (int)((temp - (float)temp1) * 10);
1000076e:	4b3e      	ldr	r3, [pc, #248]	@ (10000868 <VIRT_UART0_RxCpltCallback+0x374>)
10000770:	ed93 7a00 	vldr	s14, [r3]
10000774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10000776:	ee07 3a90 	vmov	s15, r3
1000077a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1000077e:	ee77 7a67 	vsub.f32	s15, s14, s15
10000782:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
10000786:	ee67 7a87 	vmul.f32	s15, s15, s14
1000078a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1000078e:	ee17 3a90 	vmov	r3, s15
10000792:	64bb      	str	r3, [r7, #72]	@ 0x48
		  sprintf(strbuf, "%i.%i\r\n", temp1, temp2);
10000794:	f107 0010 	add.w	r0, r7, #16
10000798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1000079a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
1000079c:	493f      	ldr	r1, [pc, #252]	@ (1000089c <VIRT_UART0_RxCpltCallback+0x3a8>)
1000079e:	f009 f97d 	bl	10009a9c <siprintf>
		  VIRT_UART_Transmit(&huart0, strbuf, strlen(strbuf));
100007a2:	f107 0310 	add.w	r3, r7, #16
100007a6:	4618      	mov	r0, r3
100007a8:	f7ff fc54 	bl	10000054 <strlen>
100007ac:	4603      	mov	r3, r0
100007ae:	b29a      	uxth	r2, r3
100007b0:	f107 0310 	add.w	r3, r7, #16
100007b4:	4619      	mov	r1, r3
100007b6:	483a      	ldr	r0, [pc, #232]	@ (100008a0 <VIRT_UART0_RxCpltCallback+0x3ac>)
100007b8:	f008 f9f8 	bl	10008bac <VIRT_UART_Transmit>
	  memcpy(var, buff + 4, strlen(var));
100007bc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
100007c0:	3404      	adds	r4, #4
100007c2:	f107 0308 	add.w	r3, r7, #8
100007c6:	4618      	mov	r0, r3
100007c8:	f7ff fc44 	bl	10000054 <strlen>
100007cc:	4602      	mov	r2, r0
100007ce:	f107 0308 	add.w	r3, r7, #8
100007d2:	4621      	mov	r1, r4
100007d4:	4618      	mov	r0, r3
100007d6:	f009 fa74 	bl	10009cc2 <memcpy>
	  if(strcmp(var, "DIRT") == 0)
100007da:	f107 0308 	add.w	r3, r7, #8
100007de:	4931      	ldr	r1, [pc, #196]	@ (100008a4 <VIRT_UART0_RxCpltCallback+0x3b0>)
100007e0:	4618      	mov	r0, r3
100007e2:	f7ff fc2d 	bl	10000040 <strcmp>
100007e6:	4603      	mov	r3, r0
100007e8:	2b00      	cmp	r3, #0
100007ea:	d12e      	bne.n	1000084a <VIRT_UART0_RxCpltCallback+0x356>
		  int dirt1 = (int)dirt;
100007ec:	4b20      	ldr	r3, [pc, #128]	@ (10000870 <VIRT_UART0_RxCpltCallback+0x37c>)
100007ee:	edd3 7a00 	vldr	s15, [r3]
100007f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
100007f6:	ee17 3a90 	vmov	r3, s15
100007fa:	647b      	str	r3, [r7, #68]	@ 0x44
		  int dirt2 = (int)((dirt - (float)dirt1) * 10);
100007fc:	4b1c      	ldr	r3, [pc, #112]	@ (10000870 <VIRT_UART0_RxCpltCallback+0x37c>)
100007fe:	ed93 7a00 	vldr	s14, [r3]
10000802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000804:	ee07 3a90 	vmov	s15, r3
10000808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1000080c:	ee77 7a67 	vsub.f32	s15, s14, s15
10000810:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
10000814:	ee67 7a87 	vmul.f32	s15, s15, s14
10000818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1000081c:	ee17 3a90 	vmov	r3, s15
10000820:	643b      	str	r3, [r7, #64]	@ 0x40
		  sprintf(strbuf, "%i.%i\r\n", dirt1, dirt2);
10000822:	f107 0010 	add.w	r0, r7, #16
10000826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10000828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1000082a:	491c      	ldr	r1, [pc, #112]	@ (1000089c <VIRT_UART0_RxCpltCallback+0x3a8>)
1000082c:	f009 f936 	bl	10009a9c <siprintf>
		  VIRT_UART_Transmit(&huart0, strbuf, strlen(strbuf));
10000830:	f107 0310 	add.w	r3, r7, #16
10000834:	4618      	mov	r0, r3
10000836:	f7ff fc0d 	bl	10000054 <strlen>
1000083a:	4603      	mov	r3, r0
1000083c:	b29a      	uxth	r2, r3
1000083e:	f107 0310 	add.w	r3, r7, #16
10000842:	4619      	mov	r1, r3
10000844:	4816      	ldr	r0, [pc, #88]	@ (100008a0 <VIRT_UART0_RxCpltCallback+0x3ac>)
10000846:	f008 f9b1 	bl	10008bac <VIRT_UART_Transmit>
}
1000084a:	bf00      	nop
1000084c:	3754      	adds	r7, #84	@ 0x54
1000084e:	46bd      	mov	sp, r7
10000850:	bd90      	pop	{r4, r7, pc}
10000852:	bf00      	nop
10000854:	100202c4 	.word	0x100202c4
10000858:	1000ab38 	.word	0x1000ab38
1000085c:	1000aae8 	.word	0x1000aae8
10000860:	1000ab40 	.word	0x1000ab40
10000864:	1000aaf0 	.word	0x1000aaf0
10000868:	10020004 	.word	0x10020004
1000086c:	1000aaf8 	.word	0x1000aaf8
10000870:	10020008 	.word	0x10020008
10000874:	42c80000 	.word	0x42c80000
10000878:	42c80000 	.word	0x42c80000
1000087c:	1000ab00 	.word	0x1000ab00
10000880:	100203cc 	.word	0x100203cc
10000884:	1000ab08 	.word	0x1000ab08
10000888:	100203d0 	.word	0x100203d0
1000088c:	1000ab10 	.word	0x1000ab10
10000890:	1000ab18 	.word	0x1000ab18
10000894:	1000ab48 	.word	0x1000ab48
10000898:	1000ab20 	.word	0x1000ab20
1000089c:	1000ab28 	.word	0x1000ab28
100008a0:	10020224 	.word	0x10020224
100008a4:	1000ab30 	.word	0x1000ab30

100008a8 <VIRT_UART1_RxCpltCallback>:

void VIRT_UART1_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
100008a8:	b580      	push	{r7, lr}
100008aa:	b082      	sub	sp, #8
100008ac:	af00      	add	r7, sp, #0
100008ae:	6078      	str	r0, [r7, #4]
    log_info("Msg received on VIRTUAL UART1 channel:  %s \n\r", (char *) huart->pRxBuffPtr);

    /* copy received msg in a variable to sent it back to master processor in main infinite loop*/
    VirtUart1ChannelRxSize = huart->RxXferSize < MAX_BUFFER_SIZE? huart->RxXferSize : MAX_BUFFER_SIZE-1;
100008b0:	687b      	ldr	r3, [r7, #4]
100008b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
100008b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
100008ba:	4293      	cmp	r3, r2
100008bc:	bf28      	it	cs
100008be:	4613      	movcs	r3, r2
100008c0:	b29a      	uxth	r2, r3
100008c2:	4b08      	ldr	r3, [pc, #32]	@ (100008e4 <VIRT_UART1_RxCpltCallback+0x3c>)
100008c4:	801a      	strh	r2, [r3, #0]
    memcpy(VirtUart1ChannelBuffRx, huart->pRxBuffPtr, VirtUart1ChannelRxSize);
100008c6:	687b      	ldr	r3, [r7, #4]
100008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100008ca:	4a06      	ldr	r2, [pc, #24]	@ (100008e4 <VIRT_UART1_RxCpltCallback+0x3c>)
100008cc:	8812      	ldrh	r2, [r2, #0]
100008ce:	4619      	mov	r1, r3
100008d0:	4805      	ldr	r0, [pc, #20]	@ (100008e8 <VIRT_UART1_RxCpltCallback+0x40>)
100008d2:	f009 f9f6 	bl	10009cc2 <memcpy>
    VirtUart1RxMsg = SET;
100008d6:	4b05      	ldr	r3, [pc, #20]	@ (100008ec <VIRT_UART1_RxCpltCallback+0x44>)
100008d8:	2201      	movs	r2, #1
100008da:	701a      	strb	r2, [r3, #0]
}
100008dc:	bf00      	nop
100008de:	3708      	adds	r7, #8
100008e0:	46bd      	mov	sp, r7
100008e2:	bd80      	pop	{r7, pc}
100008e4:	100203c8 	.word	0x100203c8
100008e8:	100202c8 	.word	0x100202c8
100008ec:	100202c6 	.word	0x100202c6

100008f0 <sim_flow>:


void sim_flow()
{
100008f0:	b580      	push	{r7, lr}
100008f2:	b082      	sub	sp, #8
100008f4:	af00      	add	r7, sp, #0
	static uint32_t last_t = 0;
	uint32_t dt = HAL_GetTick() - last_t;
100008f6:	f000 fb51 	bl	10000f9c <HAL_GetTick>
100008fa:	4602      	mov	r2, r0
100008fc:	4b39      	ldr	r3, [pc, #228]	@ (100009e4 <sim_flow+0xf4>)
100008fe:	681b      	ldr	r3, [r3, #0]
10000900:	1ad3      	subs	r3, r2, r3
10000902:	607b      	str	r3, [r7, #4]
	dt *= sim_speed;
10000904:	687b      	ldr	r3, [r7, #4]
10000906:	ee07 3a90 	vmov	s15, r3
1000090a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000090e:	4b36      	ldr	r3, [pc, #216]	@ (100009e8 <sim_flow+0xf8>)
10000910:	edd3 7a00 	vldr	s15, [r3]
10000914:	ee67 7a27 	vmul.f32	s15, s14, s15
10000918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000091c:	ee17 3a90 	vmov	r3, s15
10000920:	607b      	str	r3, [r7, #4]
	if(dt >= 10000)
10000922:	687b      	ldr	r3, [r7, #4]
10000924:	f242 720f 	movw	r2, #9999	@ 0x270f
10000928:	4293      	cmp	r3, r2
1000092a:	d90e      	bls.n	1000094a <sim_flow+0x5a>
	{
		dirt += 1.0f;
1000092c:	4b2f      	ldr	r3, [pc, #188]	@ (100009ec <sim_flow+0xfc>)
1000092e:	edd3 7a00 	vldr	s15, [r3]
10000932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
10000936:	ee77 7a87 	vadd.f32	s15, s15, s14
1000093a:	4b2c      	ldr	r3, [pc, #176]	@ (100009ec <sim_flow+0xfc>)
1000093c:	edc3 7a00 	vstr	s15, [r3]
		last_t = HAL_GetTick();
10000940:	f000 fb2c 	bl	10000f9c <HAL_GetTick>
10000944:	4603      	mov	r3, r0
10000946:	4a27      	ldr	r2, [pc, #156]	@ (100009e4 <sim_flow+0xf4>)
10000948:	6013      	str	r3, [r2, #0]
	}
	static uint32_t last_t2 = 0;
	uint32_t dt2 = HAL_GetTick() - last_t2;
1000094a:	f000 fb27 	bl	10000f9c <HAL_GetTick>
1000094e:	4602      	mov	r2, r0
10000950:	4b27      	ldr	r3, [pc, #156]	@ (100009f0 <sim_flow+0x100>)
10000952:	681b      	ldr	r3, [r3, #0]
10000954:	1ad3      	subs	r3, r2, r3
10000956:	603b      	str	r3, [r7, #0]
	dt2 *= sim_speed;
10000958:	683b      	ldr	r3, [r7, #0]
1000095a:	ee07 3a90 	vmov	s15, r3
1000095e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10000962:	4b21      	ldr	r3, [pc, #132]	@ (100009e8 <sim_flow+0xf8>)
10000964:	edd3 7a00 	vldr	s15, [r3]
10000968:	ee67 7a27 	vmul.f32	s15, s14, s15
1000096c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10000970:	ee17 3a90 	vmov	r3, s15
10000974:	603b      	str	r3, [r7, #0]
	if(dt2 >= 1000)
10000976:	683b      	ldr	r3, [r7, #0]
10000978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000097c:	d313      	bcc.n	100009a6 <sim_flow+0xb6>
	{
		dirt -= (flow / 10.f);
1000097e:	4b1b      	ldr	r3, [pc, #108]	@ (100009ec <sim_flow+0xfc>)
10000980:	ed93 7a00 	vldr	s14, [r3]
10000984:	4b1b      	ldr	r3, [pc, #108]	@ (100009f4 <sim_flow+0x104>)
10000986:	edd3 6a00 	vldr	s13, [r3]
1000098a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
1000098e:	eec6 7a86 	vdiv.f32	s15, s13, s12
10000992:	ee77 7a67 	vsub.f32	s15, s14, s15
10000996:	4b15      	ldr	r3, [pc, #84]	@ (100009ec <sim_flow+0xfc>)
10000998:	edc3 7a00 	vstr	s15, [r3]
		last_t2 = HAL_GetTick();
1000099c:	f000 fafe 	bl	10000f9c <HAL_GetTick>
100009a0:	4603      	mov	r3, r0
100009a2:	4a13      	ldr	r2, [pc, #76]	@ (100009f0 <sim_flow+0x100>)
100009a4:	6013      	str	r3, [r2, #0]
	}

	if(dirt < 10.f) dirt = 10.f;
100009a6:	4b11      	ldr	r3, [pc, #68]	@ (100009ec <sim_flow+0xfc>)
100009a8:	edd3 7a00 	vldr	s15, [r3]
100009ac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
100009b0:	eef4 7ac7 	vcmpe.f32	s15, s14
100009b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100009b8:	d502      	bpl.n	100009c0 <sim_flow+0xd0>
100009ba:	4b0c      	ldr	r3, [pc, #48]	@ (100009ec <sim_flow+0xfc>)
100009bc:	4a0e      	ldr	r2, [pc, #56]	@ (100009f8 <sim_flow+0x108>)
100009be:	601a      	str	r2, [r3, #0]
    if(dirt > 100.f) dirt = 100.f;
100009c0:	4b0a      	ldr	r3, [pc, #40]	@ (100009ec <sim_flow+0xfc>)
100009c2:	edd3 7a00 	vldr	s15, [r3]
100009c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 100009fc <sim_flow+0x10c>
100009ca:	eef4 7ac7 	vcmpe.f32	s15, s14
100009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100009d2:	dc00      	bgt.n	100009d6 <sim_flow+0xe6>
}
100009d4:	e002      	b.n	100009dc <sim_flow+0xec>
    if(dirt > 100.f) dirt = 100.f;
100009d6:	4b05      	ldr	r3, [pc, #20]	@ (100009ec <sim_flow+0xfc>)
100009d8:	4a09      	ldr	r2, [pc, #36]	@ (10000a00 <sim_flow+0x110>)
100009da:	601a      	str	r2, [r3, #0]
}
100009dc:	bf00      	nop
100009de:	3708      	adds	r7, #8
100009e0:	46bd      	mov	sp, r7
100009e2:	bd80      	pop	{r7, pc}
100009e4:	100203d4 	.word	0x100203d4
100009e8:	10020010 	.word	0x10020010
100009ec:	10020008 	.word	0x10020008
100009f0:	100203d8 	.word	0x100203d8
100009f4:	100203d0 	.word	0x100203d0
100009f8:	41200000 	.word	0x41200000
100009fc:	42c80000 	.word	0x42c80000
10000a00:	42c80000 	.word	0x42c80000

10000a04 <sim_heating>:

void sim_heating()
{
10000a04:	b580      	push	{r7, lr}
10000a06:	b086      	sub	sp, #24
10000a08:	af00      	add	r7, sp, #0
	static float mass = 150.f;
	static float heat_cap = 1000.f;
	static float air_temp = 24.f;
	static float area = 1.9f;

	if(last_t == 0)
10000a0a:	4b38      	ldr	r3, [pc, #224]	@ (10000aec <sim_heating+0xe8>)
10000a0c:	681b      	ldr	r3, [r3, #0]
10000a0e:	2b00      	cmp	r3, #0
10000a10:	d105      	bne.n	10000a1e <sim_heating+0x1a>
	{
		last_t = HAL_GetTick();
10000a12:	f000 fac3 	bl	10000f9c <HAL_GetTick>
10000a16:	4603      	mov	r3, r0
10000a18:	4a34      	ldr	r2, [pc, #208]	@ (10000aec <sim_heating+0xe8>)
10000a1a:	6013      	str	r3, [r2, #0]
		return;
10000a1c:	e062      	b.n	10000ae4 <sim_heating+0xe0>
	}

	float dt = (HAL_GetTick() - last_t) / 1000.f;
10000a1e:	f000 fabd 	bl	10000f9c <HAL_GetTick>
10000a22:	4602      	mov	r2, r0
10000a24:	4b31      	ldr	r3, [pc, #196]	@ (10000aec <sim_heating+0xe8>)
10000a26:	681b      	ldr	r3, [r3, #0]
10000a28:	1ad3      	subs	r3, r2, r3
10000a2a:	ee07 3a90 	vmov	s15, r3
10000a2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10000a32:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 10000af0 <sim_heating+0xec>
10000a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
10000a3a:	edc7 7a05 	vstr	s15, [r7, #20]
	dt *= sim_speed;
10000a3e:	4b2d      	ldr	r3, [pc, #180]	@ (10000af4 <sim_heating+0xf0>)
10000a40:	edd3 7a00 	vldr	s15, [r3]
10000a44:	ed97 7a05 	vldr	s14, [r7, #20]
10000a48:	ee67 7a27 	vmul.f32	s15, s14, s15
10000a4c:	edc7 7a05 	vstr	s15, [r7, #20]
	last_t = HAL_GetTick();
10000a50:	f000 faa4 	bl	10000f9c <HAL_GetTick>
10000a54:	4603      	mov	r3, r0
10000a56:	4a25      	ldr	r2, [pc, #148]	@ (10000aec <sim_heating+0xe8>)
10000a58:	6013      	str	r3, [r2, #0]

	float coef1 = heat_cap * mass; //heat capacity of water made into J/dK - dK to zmiana temperatury w medium
10000a5a:	4b27      	ldr	r3, [pc, #156]	@ (10000af8 <sim_heating+0xf4>)
10000a5c:	ed93 7a00 	vldr	s14, [r3]
10000a60:	4b26      	ldr	r3, [pc, #152]	@ (10000afc <sim_heating+0xf8>)
10000a62:	edd3 7a00 	vldr	s15, [r3]
10000a66:	ee67 7a27 	vmul.f32	s15, s14, s15
10000a6a:	edc7 7a04 	vstr	s15, [r7, #16]
	float coef2 = coef * area; //convection, made into W/dK - dK to roznica temperatury otoczenia i medium
10000a6e:	4b24      	ldr	r3, [pc, #144]	@ (10000b00 <sim_heating+0xfc>)
10000a70:	ed93 7a00 	vldr	s14, [r3]
10000a74:	4b23      	ldr	r3, [pc, #140]	@ (10000b04 <sim_heating+0x100>)
10000a76:	edd3 7a00 	vldr	s15, [r3]
10000a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
10000a7e:	edc7 7a03 	vstr	s15, [r7, #12]
	float dtemp1 = watt * dt / coef1;
10000a82:	4b21      	ldr	r3, [pc, #132]	@ (10000b08 <sim_heating+0x104>)
10000a84:	ed93 7a00 	vldr	s14, [r3]
10000a88:	edd7 7a05 	vldr	s15, [r7, #20]
10000a8c:	ee67 6a27 	vmul.f32	s13, s14, s15
10000a90:	ed97 7a04 	vldr	s14, [r7, #16]
10000a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
10000a98:	edc7 7a02 	vstr	s15, [r7, #8]
	float dtemp2 = coef2 * (temp - air_temp) * dt / coef1; //oddawana moc do otoczenia na jule na zmiane temperatury w wodzie
10000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (10000b0c <sim_heating+0x108>)
10000a9e:	ed93 7a00 	vldr	s14, [r3]
10000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (10000b10 <sim_heating+0x10c>)
10000aa4:	edd3 7a00 	vldr	s15, [r3]
10000aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
10000aac:	edd7 7a03 	vldr	s15, [r7, #12]
10000ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
10000ab4:	edd7 7a05 	vldr	s15, [r7, #20]
10000ab8:	ee67 6a27 	vmul.f32	s13, s14, s15
10000abc:	ed97 7a04 	vldr	s14, [r7, #16]
10000ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
10000ac4:	edc7 7a01 	vstr	s15, [r7, #4]

	temp = temp + dtemp1 - dtemp2;
10000ac8:	4b10      	ldr	r3, [pc, #64]	@ (10000b0c <sim_heating+0x108>)
10000aca:	ed93 7a00 	vldr	s14, [r3]
10000ace:	edd7 7a02 	vldr	s15, [r7, #8]
10000ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
10000ad6:	edd7 7a01 	vldr	s15, [r7, #4]
10000ada:	ee77 7a67 	vsub.f32	s15, s14, s15
10000ade:	4b0b      	ldr	r3, [pc, #44]	@ (10000b0c <sim_heating+0x108>)
10000ae0:	edc3 7a00 	vstr	s15, [r3]
}
10000ae4:	3718      	adds	r7, #24
10000ae6:	46bd      	mov	sp, r7
10000ae8:	bd80      	pop	{r7, pc}
10000aea:	bf00      	nop
10000aec:	100203dc 	.word	0x100203dc
10000af0:	447a0000 	.word	0x447a0000
10000af4:	10020010 	.word	0x10020010
10000af8:	10020014 	.word	0x10020014
10000afc:	10020018 	.word	0x10020018
10000b00:	1002000c 	.word	0x1002000c
10000b04:	1002001c 	.word	0x1002001c
10000b08:	100203cc 	.word	0x100203cc
10000b0c:	10020004 	.word	0x10020004
10000b10:	10020020 	.word	0x10020020

10000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10000b14:	b480      	push	{r7}
10000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000b18:	b672      	cpsid	i
}
10000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	log_err("Critical Error Cortex-M4 is down\r\n");
  __disable_irq();
  while (1)
10000b1c:	bf00      	nop
10000b1e:	e7fd      	b.n	10000b1c <Error_Handler+0x8>

10000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000b20:	b580      	push	{r7, lr}
10000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
10000b24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10000b2c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10000b30:	2200      	movs	r2, #0
10000b32:	2101      	movs	r1, #1
10000b34:	f06f 000b 	mvn.w	r0, #11
10000b38:	f000 fb3b 	bl	100011b2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10000b3c:	2200      	movs	r2, #0
10000b3e:	2101      	movs	r1, #1
10000b40:	f06f 000a 	mvn.w	r0, #10
10000b44:	f000 fb35 	bl	100011b2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10000b48:	2200      	movs	r2, #0
10000b4a:	2101      	movs	r1, #1
10000b4c:	f06f 0009 	mvn.w	r0, #9
10000b50:	f000 fb2f 	bl	100011b2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
10000b54:	2200      	movs	r2, #0
10000b56:	2101      	movs	r1, #1
10000b58:	f06f 0004 	mvn.w	r0, #4
10000b5c:	f000 fb29 	bl	100011b2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10000b60:	2200      	movs	r2, #0
10000b62:	2101      	movs	r1, #1
10000b64:	f06f 0003 	mvn.w	r0, #3
10000b68:	f000 fb23 	bl	100011b2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10000b6c:	2200      	movs	r2, #0
10000b6e:	2101      	movs	r1, #1
10000b70:	f06f 0001 	mvn.w	r0, #1
10000b74:	f000 fb1d 	bl	100011b2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10000b78:	2200      	movs	r2, #0
10000b7a:	2100      	movs	r1, #0
10000b7c:	2091      	movs	r0, #145	@ 0x91
10000b7e:	f000 fb18 	bl	100011b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10000b82:	2091      	movs	r0, #145	@ 0x91
10000b84:	f000 fb31 	bl	100011ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000b88:	bf00      	nop
10000b8a:	bd80      	pop	{r7, pc}

10000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000b8c:	b480      	push	{r7}
10000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10000b90:	bf00      	nop
10000b92:	e7fd      	b.n	10000b90 <NMI_Handler+0x4>

10000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000b94:	b480      	push	{r7}
10000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000b98:	bf00      	nop
10000b9a:	e7fd      	b.n	10000b98 <HardFault_Handler+0x4>

10000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10000b9c:	b480      	push	{r7}
10000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000ba0:	bf00      	nop
10000ba2:	e7fd      	b.n	10000ba0 <MemManage_Handler+0x4>

10000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000ba4:	b480      	push	{r7}
10000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000ba8:	bf00      	nop
10000baa:	e7fd      	b.n	10000ba8 <BusFault_Handler+0x4>

10000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10000bac:	b480      	push	{r7}
10000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000bb0:	bf00      	nop
10000bb2:	e7fd      	b.n	10000bb0 <UsageFault_Handler+0x4>

10000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000bb4:	b480      	push	{r7}
10000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10000bb8:	bf00      	nop
10000bba:	46bd      	mov	sp, r7
10000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bc0:	4770      	bx	lr

10000bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000bc2:	b480      	push	{r7}
10000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000bc6:	bf00      	nop
10000bc8:	46bd      	mov	sp, r7
10000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bce:	4770      	bx	lr

10000bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000bd0:	b480      	push	{r7}
10000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000bd4:	bf00      	nop
10000bd6:	46bd      	mov	sp, r7
10000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bdc:	4770      	bx	lr

10000bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000bde:	b580      	push	{r7, lr}
10000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000be2:	f000 f9c7 	bl	10000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000be6:	bf00      	nop
10000be8:	bd80      	pop	{r7, pc}
	...

10000bec <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
10000bec:	b580      	push	{r7, lr}
10000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10000bf0:	4802      	ldr	r0, [pc, #8]	@ (10000bfc <IPCC_RX1_IRQHandler+0x10>)
10000bf2:	f000 fc5d 	bl	100014b0 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
10000bf6:	bf00      	nop
10000bf8:	bd80      	pop	{r7, pc}
10000bfa:	bf00      	nop
10000bfc:	100201e8 	.word	0x100201e8

10000c00 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10000c00:	b580      	push	{r7, lr}
10000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10000c04:	4802      	ldr	r0, [pc, #8]	@ (10000c10 <IPCC_TX1_IRQHandler+0x10>)
10000c06:	f000 fc05 	bl	10001414 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
10000c0a:	bf00      	nop
10000c0c:	bd80      	pop	{r7, pc}
10000c0e:	bf00      	nop
10000c10:	100201e8 	.word	0x100201e8

10000c14 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10000c14:	b580      	push	{r7, lr}
10000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10000c18:	f002 f984 	bl	10002f24 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000c1c:	bf00      	nop
10000c1e:	bd80      	pop	{r7, pc}

10000c20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10000c20:	b480      	push	{r7}
10000c22:	af00      	add	r7, sp, #0
  return 1;
10000c24:	2301      	movs	r3, #1
}
10000c26:	4618      	mov	r0, r3
10000c28:	46bd      	mov	sp, r7
10000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c2e:	4770      	bx	lr

10000c30 <_kill>:

int _kill(int pid, int sig)
{
10000c30:	b580      	push	{r7, lr}
10000c32:	b082      	sub	sp, #8
10000c34:	af00      	add	r7, sp, #0
10000c36:	6078      	str	r0, [r7, #4]
10000c38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
10000c3a:	f009 f815 	bl	10009c68 <__errno>
10000c3e:	4603      	mov	r3, r0
10000c40:	2216      	movs	r2, #22
10000c42:	601a      	str	r2, [r3, #0]
  return -1;
10000c44:	f04f 33ff 	mov.w	r3, #4294967295
}
10000c48:	4618      	mov	r0, r3
10000c4a:	3708      	adds	r7, #8
10000c4c:	46bd      	mov	sp, r7
10000c4e:	bd80      	pop	{r7, pc}

10000c50 <_exit>:

void _exit (int status)
{
10000c50:	b580      	push	{r7, lr}
10000c52:	b082      	sub	sp, #8
10000c54:	af00      	add	r7, sp, #0
10000c56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
10000c58:	f04f 31ff 	mov.w	r1, #4294967295
10000c5c:	6878      	ldr	r0, [r7, #4]
10000c5e:	f7ff ffe7 	bl	10000c30 <_kill>
  while (1) {}    /* Make sure we hang here */
10000c62:	bf00      	nop
10000c64:	e7fd      	b.n	10000c62 <_exit+0x12>

10000c66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10000c66:	b580      	push	{r7, lr}
10000c68:	b086      	sub	sp, #24
10000c6a:	af00      	add	r7, sp, #0
10000c6c:	60f8      	str	r0, [r7, #12]
10000c6e:	60b9      	str	r1, [r7, #8]
10000c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000c72:	2300      	movs	r3, #0
10000c74:	617b      	str	r3, [r7, #20]
10000c76:	e00a      	b.n	10000c8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
10000c78:	f3af 8000 	nop.w
10000c7c:	4601      	mov	r1, r0
10000c7e:	68bb      	ldr	r3, [r7, #8]
10000c80:	1c5a      	adds	r2, r3, #1
10000c82:	60ba      	str	r2, [r7, #8]
10000c84:	b2ca      	uxtb	r2, r1
10000c86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000c88:	697b      	ldr	r3, [r7, #20]
10000c8a:	3301      	adds	r3, #1
10000c8c:	617b      	str	r3, [r7, #20]
10000c8e:	697a      	ldr	r2, [r7, #20]
10000c90:	687b      	ldr	r3, [r7, #4]
10000c92:	429a      	cmp	r2, r3
10000c94:	dbf0      	blt.n	10000c78 <_read+0x12>
  }

  return len;
10000c96:	687b      	ldr	r3, [r7, #4]
}
10000c98:	4618      	mov	r0, r3
10000c9a:	3718      	adds	r7, #24
10000c9c:	46bd      	mov	sp, r7
10000c9e:	bd80      	pop	{r7, pc}

10000ca0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10000ca0:	b580      	push	{r7, lr}
10000ca2:	b086      	sub	sp, #24
10000ca4:	af00      	add	r7, sp, #0
10000ca6:	60f8      	str	r0, [r7, #12]
10000ca8:	60b9      	str	r1, [r7, #8]
10000caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000cac:	2300      	movs	r3, #0
10000cae:	617b      	str	r3, [r7, #20]
10000cb0:	e009      	b.n	10000cc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
10000cb2:	68bb      	ldr	r3, [r7, #8]
10000cb4:	1c5a      	adds	r2, r3, #1
10000cb6:	60ba      	str	r2, [r7, #8]
10000cb8:	781b      	ldrb	r3, [r3, #0]
10000cba:	4618      	mov	r0, r3
10000cbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000cc0:	697b      	ldr	r3, [r7, #20]
10000cc2:	3301      	adds	r3, #1
10000cc4:	617b      	str	r3, [r7, #20]
10000cc6:	697a      	ldr	r2, [r7, #20]
10000cc8:	687b      	ldr	r3, [r7, #4]
10000cca:	429a      	cmp	r2, r3
10000ccc:	dbf1      	blt.n	10000cb2 <_write+0x12>
  }
  return len;
10000cce:	687b      	ldr	r3, [r7, #4]
}
10000cd0:	4618      	mov	r0, r3
10000cd2:	3718      	adds	r7, #24
10000cd4:	46bd      	mov	sp, r7
10000cd6:	bd80      	pop	{r7, pc}

10000cd8 <_close>:

int _close(int file)
{
10000cd8:	b480      	push	{r7}
10000cda:	b083      	sub	sp, #12
10000cdc:	af00      	add	r7, sp, #0
10000cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10000ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
10000ce4:	4618      	mov	r0, r3
10000ce6:	370c      	adds	r7, #12
10000ce8:	46bd      	mov	sp, r7
10000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
10000cee:	4770      	bx	lr

10000cf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
10000cf0:	b480      	push	{r7}
10000cf2:	b083      	sub	sp, #12
10000cf4:	af00      	add	r7, sp, #0
10000cf6:	6078      	str	r0, [r7, #4]
10000cf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10000cfa:	683b      	ldr	r3, [r7, #0]
10000cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
10000d00:	605a      	str	r2, [r3, #4]
  return 0;
10000d02:	2300      	movs	r3, #0
}
10000d04:	4618      	mov	r0, r3
10000d06:	370c      	adds	r7, #12
10000d08:	46bd      	mov	sp, r7
10000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d0e:	4770      	bx	lr

10000d10 <_isatty>:

int _isatty(int file)
{
10000d10:	b480      	push	{r7}
10000d12:	b083      	sub	sp, #12
10000d14:	af00      	add	r7, sp, #0
10000d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10000d18:	2301      	movs	r3, #1
}
10000d1a:	4618      	mov	r0, r3
10000d1c:	370c      	adds	r7, #12
10000d1e:	46bd      	mov	sp, r7
10000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d24:	4770      	bx	lr

10000d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10000d26:	b480      	push	{r7}
10000d28:	b085      	sub	sp, #20
10000d2a:	af00      	add	r7, sp, #0
10000d2c:	60f8      	str	r0, [r7, #12]
10000d2e:	60b9      	str	r1, [r7, #8]
10000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10000d32:	2300      	movs	r3, #0
}
10000d34:	4618      	mov	r0, r3
10000d36:	3714      	adds	r7, #20
10000d38:	46bd      	mov	sp, r7
10000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d3e:	4770      	bx	lr

10000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10000d40:	b580      	push	{r7, lr}
10000d42:	b086      	sub	sp, #24
10000d44:	af00      	add	r7, sp, #0
10000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10000d48:	4a14      	ldr	r2, [pc, #80]	@ (10000d9c <_sbrk+0x5c>)
10000d4a:	4b15      	ldr	r3, [pc, #84]	@ (10000da0 <_sbrk+0x60>)
10000d4c:	1ad3      	subs	r3, r2, r3
10000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10000d50:	697b      	ldr	r3, [r7, #20]
10000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10000d54:	4b13      	ldr	r3, [pc, #76]	@ (10000da4 <_sbrk+0x64>)
10000d56:	681b      	ldr	r3, [r3, #0]
10000d58:	2b00      	cmp	r3, #0
10000d5a:	d102      	bne.n	10000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10000d5c:	4b11      	ldr	r3, [pc, #68]	@ (10000da4 <_sbrk+0x64>)
10000d5e:	4a12      	ldr	r2, [pc, #72]	@ (10000da8 <_sbrk+0x68>)
10000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10000d62:	4b10      	ldr	r3, [pc, #64]	@ (10000da4 <_sbrk+0x64>)
10000d64:	681a      	ldr	r2, [r3, #0]
10000d66:	687b      	ldr	r3, [r7, #4]
10000d68:	4413      	add	r3, r2
10000d6a:	693a      	ldr	r2, [r7, #16]
10000d6c:	429a      	cmp	r2, r3
10000d6e:	d207      	bcs.n	10000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
10000d70:	f008 ff7a 	bl	10009c68 <__errno>
10000d74:	4603      	mov	r3, r0
10000d76:	220c      	movs	r2, #12
10000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10000d7a:	f04f 33ff 	mov.w	r3, #4294967295
10000d7e:	e009      	b.n	10000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10000d80:	4b08      	ldr	r3, [pc, #32]	@ (10000da4 <_sbrk+0x64>)
10000d82:	681b      	ldr	r3, [r3, #0]
10000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10000d86:	4b07      	ldr	r3, [pc, #28]	@ (10000da4 <_sbrk+0x64>)
10000d88:	681a      	ldr	r2, [r3, #0]
10000d8a:	687b      	ldr	r3, [r7, #4]
10000d8c:	4413      	add	r3, r2
10000d8e:	4a05      	ldr	r2, [pc, #20]	@ (10000da4 <_sbrk+0x64>)
10000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10000d92:	68fb      	ldr	r3, [r7, #12]
}
10000d94:	4618      	mov	r0, r3
10000d96:	3718      	adds	r7, #24
10000d98:	46bd      	mov	sp, r7
10000d9a:	bd80      	pop	{r7, pc}
10000d9c:	10040000 	.word	0x10040000
10000da0:	00000400 	.word	0x00000400
10000da4:	100203e0 	.word	0x100203e0
10000da8:	10020698 	.word	0x10020698

10000dac <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
10000dac:	b580      	push	{r7, lr}
10000dae:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
10000db0:	4b22      	ldr	r3, [pc, #136]	@ (10000e3c <MX_UART7_Init+0x90>)
10000db2:	4a23      	ldr	r2, [pc, #140]	@ (10000e40 <MX_UART7_Init+0x94>)
10000db4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
10000db6:	4b21      	ldr	r3, [pc, #132]	@ (10000e3c <MX_UART7_Init+0x90>)
10000db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
10000dbc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
10000dbe:	4b1f      	ldr	r3, [pc, #124]	@ (10000e3c <MX_UART7_Init+0x90>)
10000dc0:	2200      	movs	r2, #0
10000dc2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
10000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (10000e3c <MX_UART7_Init+0x90>)
10000dc6:	2200      	movs	r2, #0
10000dc8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
10000dca:	4b1c      	ldr	r3, [pc, #112]	@ (10000e3c <MX_UART7_Init+0x90>)
10000dcc:	2200      	movs	r2, #0
10000dce:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
10000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (10000e3c <MX_UART7_Init+0x90>)
10000dd2:	220c      	movs	r2, #12
10000dd4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10000dd6:	4b19      	ldr	r3, [pc, #100]	@ (10000e3c <MX_UART7_Init+0x90>)
10000dd8:	2200      	movs	r2, #0
10000dda:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
10000ddc:	4b17      	ldr	r3, [pc, #92]	@ (10000e3c <MX_UART7_Init+0x90>)
10000dde:	2200      	movs	r2, #0
10000de0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10000de2:	4b16      	ldr	r3, [pc, #88]	@ (10000e3c <MX_UART7_Init+0x90>)
10000de4:	2200      	movs	r2, #0
10000de6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10000de8:	4b14      	ldr	r3, [pc, #80]	@ (10000e3c <MX_UART7_Init+0x90>)
10000dea:	2200      	movs	r2, #0
10000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10000dee:	4b13      	ldr	r3, [pc, #76]	@ (10000e3c <MX_UART7_Init+0x90>)
10000df0:	2200      	movs	r2, #0
10000df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
10000df4:	4811      	ldr	r0, [pc, #68]	@ (10000e3c <MX_UART7_Init+0x90>)
10000df6:	f004 fb89 	bl	1000550c <HAL_HalfDuplex_Init>
10000dfa:	4603      	mov	r3, r0
10000dfc:	2b00      	cmp	r3, #0
10000dfe:	d001      	beq.n	10000e04 <MX_UART7_Init+0x58>
  {
    Error_Handler();
10000e00:	f7ff fe88 	bl	10000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10000e04:	2100      	movs	r1, #0
10000e06:	480d      	ldr	r0, [pc, #52]	@ (10000e3c <MX_UART7_Init+0x90>)
10000e08:	f005 fe21 	bl	10006a4e <HAL_UARTEx_SetTxFifoThreshold>
10000e0c:	4603      	mov	r3, r0
10000e0e:	2b00      	cmp	r3, #0
10000e10:	d001      	beq.n	10000e16 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
10000e12:	f7ff fe7f 	bl	10000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10000e16:	2100      	movs	r1, #0
10000e18:	4808      	ldr	r0, [pc, #32]	@ (10000e3c <MX_UART7_Init+0x90>)
10000e1a:	f005 fe56 	bl	10006aca <HAL_UARTEx_SetRxFifoThreshold>
10000e1e:	4603      	mov	r3, r0
10000e20:	2b00      	cmp	r3, #0
10000e22:	d001      	beq.n	10000e28 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
10000e24:	f7ff fe76 	bl	10000b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
10000e28:	4804      	ldr	r0, [pc, #16]	@ (10000e3c <MX_UART7_Init+0x90>)
10000e2a:	f005 fdd7 	bl	100069dc <HAL_UARTEx_DisableFifoMode>
10000e2e:	4603      	mov	r3, r0
10000e30:	2b00      	cmp	r3, #0
10000e32:	d001      	beq.n	10000e38 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
10000e34:	f7ff fe6e 	bl	10000b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
10000e38:	bf00      	nop
10000e3a:	bd80      	pop	{r7, pc}
10000e3c:	100203e4 	.word	0x100203e4
10000e40:	40018000 	.word	0x40018000

10000e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
10000e44:	b580      	push	{r7, lr}
10000e46:	b0d8      	sub	sp, #352	@ 0x160
10000e48:	af00      	add	r7, sp, #0
10000e4a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
10000e4e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
10000e52:	6018      	str	r0, [r3, #0]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000e54:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
10000e58:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
10000e5c:	4618      	mov	r0, r3
10000e5e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
10000e62:	461a      	mov	r2, r3
10000e64:	2100      	movs	r1, #0
10000e66:	f008 fe7c 	bl	10009b62 <memset>
  if(uartHandle->Instance==UART7)
10000e6a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
10000e6e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
10000e72:	681b      	ldr	r3, [r3, #0]
10000e74:	681b      	ldr	r3, [r3, #0]
10000e76:	4a14      	ldr	r2, [pc, #80]	@ (10000ec8 <HAL_UART_MspInit+0x84>)
10000e78:	4293      	cmp	r3, r2
10000e7a:	d11f      	bne.n	10000ebc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10000e7c:	4b13      	ldr	r3, [pc, #76]	@ (10000ecc <HAL_UART_MspInit+0x88>)
10000e7e:	681b      	ldr	r3, [r3, #0]
10000e80:	f003 0307 	and.w	r3, r3, #7
10000e84:	2b04      	cmp	r3, #4
10000e86:	d113      	bne.n	10000eb0 <HAL_UART_MspInit+0x6c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART78;
10000e88:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
10000e8c:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
10000e90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
10000e94:	f04f 0300 	mov.w	r3, #0
10000e98:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000e9c:	f107 0308 	add.w	r3, r7, #8
10000ea0:	4618      	mov	r0, r3
10000ea2:	f002 fc9f 	bl	100037e4 <HAL_RCCEx_PeriphCLKConfig>
10000ea6:	4603      	mov	r3, r0
10000ea8:	2b00      	cmp	r3, #0
10000eaa:	d001      	beq.n	10000eb0 <HAL_UART_MspInit+0x6c>
    {
      Error_Handler();
10000eac:	f7ff fe32 	bl	10000b14 <Error_Handler>
    }

  }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
10000eb0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000eb4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
10000eb8:	f8c3 2a80 	str.w	r2, [r3, #2688]	@ 0xa80
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
10000ebc:	bf00      	nop
10000ebe:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
10000ec2:	46bd      	mov	sp, r7
10000ec4:	bd80      	pop	{r7, pc}
10000ec6:	bf00      	nop
10000ec8:	40018000 	.word	0x40018000
10000ecc:	50020000 	.word	0x50020000

10000ed0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000ed0:	e7fe      	b.n	10000ed0 <ADC1_IRQHandler>
	...

10000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000ed4:	b580      	push	{r7, lr}
10000ed6:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000ed8:	2003      	movs	r0, #3
10000eda:	f000 f95f 	bl	1000119c <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000ede:	f001 ffa1 	bl	10002e24 <HAL_RCC_GetSystemCoreClockFreq>
10000ee2:	4603      	mov	r3, r0
10000ee4:	4a07      	ldr	r2, [pc, #28]	@ (10000f04 <HAL_Init+0x30>)
10000ee6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000ee8:	2001      	movs	r0, #1
10000eea:	f000 f80d 	bl	10000f08 <HAL_InitTick>
10000eee:	4603      	mov	r3, r0
10000ef0:	2b00      	cmp	r3, #0
10000ef2:	d001      	beq.n	10000ef8 <HAL_Init+0x24>
  {
    return HAL_ERROR;
10000ef4:	2301      	movs	r3, #1
10000ef6:	e002      	b.n	10000efe <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000ef8:	f7ff fe12 	bl	10000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000efc:	2300      	movs	r3, #0
}
10000efe:	4618      	mov	r0, r3
10000f00:	bd80      	pop	{r7, pc}
10000f02:	bf00      	nop
10000f04:	10020000 	.word	0x10020000

10000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10000f08:	b580      	push	{r7, lr}
10000f0a:	b082      	sub	sp, #8
10000f0c:	af00      	add	r7, sp, #0
10000f0e:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000f10:	4b15      	ldr	r3, [pc, #84]	@ (10000f68 <HAL_InitTick+0x60>)
10000f12:	781b      	ldrb	r3, [r3, #0]
10000f14:	2b00      	cmp	r3, #0
10000f16:	d101      	bne.n	10000f1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10000f18:	2301      	movs	r3, #1
10000f1a:	e021      	b.n	10000f60 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000f1c:	4b13      	ldr	r3, [pc, #76]	@ (10000f6c <HAL_InitTick+0x64>)
10000f1e:	681a      	ldr	r2, [r3, #0]
10000f20:	4b11      	ldr	r3, [pc, #68]	@ (10000f68 <HAL_InitTick+0x60>)
10000f22:	781b      	ldrb	r3, [r3, #0]
10000f24:	4619      	mov	r1, r3
10000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
10000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
10000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
10000f32:	4618      	mov	r0, r3
10000f34:	f000 f967 	bl	10001206 <HAL_SYSTICK_Config>
10000f38:	4603      	mov	r3, r0
10000f3a:	2b00      	cmp	r3, #0
10000f3c:	d001      	beq.n	10000f42 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000f3e:	2301      	movs	r3, #1
10000f40:	e00e      	b.n	10000f60 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000f42:	687b      	ldr	r3, [r7, #4]
10000f44:	2b0f      	cmp	r3, #15
10000f46:	d80a      	bhi.n	10000f5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000f48:	2200      	movs	r2, #0
10000f4a:	6879      	ldr	r1, [r7, #4]
10000f4c:	f04f 30ff 	mov.w	r0, #4294967295
10000f50:	f000 f92f 	bl	100011b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000f54:	4a06      	ldr	r2, [pc, #24]	@ (10000f70 <HAL_InitTick+0x68>)
10000f56:	687b      	ldr	r3, [r7, #4]
10000f58:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10000f5a:	2300      	movs	r3, #0
10000f5c:	e000      	b.n	10000f60 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000f5e:	2301      	movs	r3, #1
}
10000f60:	4618      	mov	r0, r3
10000f62:	3708      	adds	r7, #8
10000f64:	46bd      	mov	sp, r7
10000f66:	bd80      	pop	{r7, pc}
10000f68:	10020028 	.word	0x10020028
10000f6c:	10020000 	.word	0x10020000
10000f70:	10020024 	.word	0x10020024

10000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000f74:	b480      	push	{r7}
10000f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000f78:	4b06      	ldr	r3, [pc, #24]	@ (10000f94 <HAL_IncTick+0x20>)
10000f7a:	781b      	ldrb	r3, [r3, #0]
10000f7c:	461a      	mov	r2, r3
10000f7e:	4b06      	ldr	r3, [pc, #24]	@ (10000f98 <HAL_IncTick+0x24>)
10000f80:	681b      	ldr	r3, [r3, #0]
10000f82:	4413      	add	r3, r2
10000f84:	4a04      	ldr	r2, [pc, #16]	@ (10000f98 <HAL_IncTick+0x24>)
10000f86:	6013      	str	r3, [r2, #0]
}
10000f88:	bf00      	nop
10000f8a:	46bd      	mov	sp, r7
10000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f90:	4770      	bx	lr
10000f92:	bf00      	nop
10000f94:	10020028 	.word	0x10020028
10000f98:	10020478 	.word	0x10020478

10000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000f9c:	b480      	push	{r7}
10000f9e:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000fa0:	4b03      	ldr	r3, [pc, #12]	@ (10000fb0 <HAL_GetTick+0x14>)
10000fa2:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000fa4:	4618      	mov	r0, r3
10000fa6:	46bd      	mov	sp, r7
10000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fac:	4770      	bx	lr
10000fae:	bf00      	nop
10000fb0:	10020478 	.word	0x10020478

10000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10000fb4:	b580      	push	{r7, lr}
10000fb6:	b084      	sub	sp, #16
10000fb8:	af00      	add	r7, sp, #0
10000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10000fbc:	f7ff ffee 	bl	10000f9c <HAL_GetTick>
10000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10000fc2:	687b      	ldr	r3, [r7, #4]
10000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10000fc6:	68fb      	ldr	r3, [r7, #12]
10000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
10000fcc:	d005      	beq.n	10000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10000fce:	4b0a      	ldr	r3, [pc, #40]	@ (10000ff8 <HAL_Delay+0x44>)
10000fd0:	781b      	ldrb	r3, [r3, #0]
10000fd2:	461a      	mov	r2, r3
10000fd4:	68fb      	ldr	r3, [r7, #12]
10000fd6:	4413      	add	r3, r2
10000fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10000fda:	bf00      	nop
10000fdc:	f7ff ffde 	bl	10000f9c <HAL_GetTick>
10000fe0:	4602      	mov	r2, r0
10000fe2:	68bb      	ldr	r3, [r7, #8]
10000fe4:	1ad3      	subs	r3, r2, r3
10000fe6:	68fa      	ldr	r2, [r7, #12]
10000fe8:	429a      	cmp	r2, r3
10000fea:	d8f7      	bhi.n	10000fdc <HAL_Delay+0x28>
  {
  }
}
10000fec:	bf00      	nop
10000fee:	bf00      	nop
10000ff0:	3710      	adds	r7, #16
10000ff2:	46bd      	mov	sp, r7
10000ff4:	bd80      	pop	{r7, pc}
10000ff6:	bf00      	nop
10000ff8:	10020028 	.word	0x10020028

10000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000ffc:	b480      	push	{r7}
10000ffe:	b085      	sub	sp, #20
10001000:	af00      	add	r7, sp, #0
10001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10001004:	687b      	ldr	r3, [r7, #4]
10001006:	f003 0307 	and.w	r3, r3, #7
1000100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
1000100c:	4b0c      	ldr	r3, [pc, #48]	@ (10001040 <__NVIC_SetPriorityGrouping+0x44>)
1000100e:	68db      	ldr	r3, [r3, #12]
10001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10001012:	68ba      	ldr	r2, [r7, #8]
10001014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10001018:	4013      	ands	r3, r2
1000101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
1000101c:	68fb      	ldr	r3, [r7, #12]
1000101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10001020:	68bb      	ldr	r3, [r7, #8]
10001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10001024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
1000102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000102e:	4a04      	ldr	r2, [pc, #16]	@ (10001040 <__NVIC_SetPriorityGrouping+0x44>)
10001030:	68bb      	ldr	r3, [r7, #8]
10001032:	60d3      	str	r3, [r2, #12]
}
10001034:	bf00      	nop
10001036:	3714      	adds	r7, #20
10001038:	46bd      	mov	sp, r7
1000103a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000103e:	4770      	bx	lr
10001040:	e000ed00 	.word	0xe000ed00

10001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10001044:	b480      	push	{r7}
10001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10001048:	4b04      	ldr	r3, [pc, #16]	@ (1000105c <__NVIC_GetPriorityGrouping+0x18>)
1000104a:	68db      	ldr	r3, [r3, #12]
1000104c:	0a1b      	lsrs	r3, r3, #8
1000104e:	f003 0307 	and.w	r3, r3, #7
}
10001052:	4618      	mov	r0, r3
10001054:	46bd      	mov	sp, r7
10001056:	f85d 7b04 	ldr.w	r7, [sp], #4
1000105a:	4770      	bx	lr
1000105c:	e000ed00 	.word	0xe000ed00

10001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001060:	b480      	push	{r7}
10001062:	b083      	sub	sp, #12
10001064:	af00      	add	r7, sp, #0
10001066:	4603      	mov	r3, r0
10001068:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
1000106a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000106e:	2b00      	cmp	r3, #0
10001070:	db0b      	blt.n	1000108a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001072:	88fb      	ldrh	r3, [r7, #6]
10001074:	f003 021f 	and.w	r2, r3, #31
10001078:	4907      	ldr	r1, [pc, #28]	@ (10001098 <__NVIC_EnableIRQ+0x38>)
1000107a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000107e:	095b      	lsrs	r3, r3, #5
10001080:	2001      	movs	r0, #1
10001082:	fa00 f202 	lsl.w	r2, r0, r2
10001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
1000108a:	bf00      	nop
1000108c:	370c      	adds	r7, #12
1000108e:	46bd      	mov	sp, r7
10001090:	f85d 7b04 	ldr.w	r7, [sp], #4
10001094:	4770      	bx	lr
10001096:	bf00      	nop
10001098:	e000e100 	.word	0xe000e100

1000109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000109c:	b480      	push	{r7}
1000109e:	b083      	sub	sp, #12
100010a0:	af00      	add	r7, sp, #0
100010a2:	4603      	mov	r3, r0
100010a4:	6039      	str	r1, [r7, #0]
100010a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100010a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100010ac:	2b00      	cmp	r3, #0
100010ae:	db0a      	blt.n	100010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100010b0:	683b      	ldr	r3, [r7, #0]
100010b2:	b2da      	uxtb	r2, r3
100010b4:	490c      	ldr	r1, [pc, #48]	@ (100010e8 <__NVIC_SetPriority+0x4c>)
100010b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100010ba:	0112      	lsls	r2, r2, #4
100010bc:	b2d2      	uxtb	r2, r2
100010be:	440b      	add	r3, r1
100010c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100010c4:	e00a      	b.n	100010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100010c6:	683b      	ldr	r3, [r7, #0]
100010c8:	b2da      	uxtb	r2, r3
100010ca:	4908      	ldr	r1, [pc, #32]	@ (100010ec <__NVIC_SetPriority+0x50>)
100010cc:	88fb      	ldrh	r3, [r7, #6]
100010ce:	f003 030f 	and.w	r3, r3, #15
100010d2:	3b04      	subs	r3, #4
100010d4:	0112      	lsls	r2, r2, #4
100010d6:	b2d2      	uxtb	r2, r2
100010d8:	440b      	add	r3, r1
100010da:	761a      	strb	r2, [r3, #24]
}
100010dc:	bf00      	nop
100010de:	370c      	adds	r7, #12
100010e0:	46bd      	mov	sp, r7
100010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
100010e6:	4770      	bx	lr
100010e8:	e000e100 	.word	0xe000e100
100010ec:	e000ed00 	.word	0xe000ed00

100010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
100010f0:	b480      	push	{r7}
100010f2:	b089      	sub	sp, #36	@ 0x24
100010f4:	af00      	add	r7, sp, #0
100010f6:	60f8      	str	r0, [r7, #12]
100010f8:	60b9      	str	r1, [r7, #8]
100010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
100010fc:	68fb      	ldr	r3, [r7, #12]
100010fe:	f003 0307 	and.w	r3, r3, #7
10001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10001104:	69fb      	ldr	r3, [r7, #28]
10001106:	f1c3 0307 	rsb	r3, r3, #7
1000110a:	2b04      	cmp	r3, #4
1000110c:	bf28      	it	cs
1000110e:	2304      	movcs	r3, #4
10001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10001112:	69fb      	ldr	r3, [r7, #28]
10001114:	3304      	adds	r3, #4
10001116:	2b06      	cmp	r3, #6
10001118:	d902      	bls.n	10001120 <NVIC_EncodePriority+0x30>
1000111a:	69fb      	ldr	r3, [r7, #28]
1000111c:	3b03      	subs	r3, #3
1000111e:	e000      	b.n	10001122 <NVIC_EncodePriority+0x32>
10001120:	2300      	movs	r3, #0
10001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001124:	f04f 32ff 	mov.w	r2, #4294967295
10001128:	69bb      	ldr	r3, [r7, #24]
1000112a:	fa02 f303 	lsl.w	r3, r2, r3
1000112e:	43da      	mvns	r2, r3
10001130:	68bb      	ldr	r3, [r7, #8]
10001132:	401a      	ands	r2, r3
10001134:	697b      	ldr	r3, [r7, #20]
10001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10001138:	f04f 31ff 	mov.w	r1, #4294967295
1000113c:	697b      	ldr	r3, [r7, #20]
1000113e:	fa01 f303 	lsl.w	r3, r1, r3
10001142:	43d9      	mvns	r1, r3
10001144:	687b      	ldr	r3, [r7, #4]
10001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001148:	4313      	orrs	r3, r2
         );
}
1000114a:	4618      	mov	r0, r3
1000114c:	3724      	adds	r7, #36	@ 0x24
1000114e:	46bd      	mov	sp, r7
10001150:	f85d 7b04 	ldr.w	r7, [sp], #4
10001154:	4770      	bx	lr
	...

10001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10001158:	b580      	push	{r7, lr}
1000115a:	b082      	sub	sp, #8
1000115c:	af00      	add	r7, sp, #0
1000115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10001160:	687b      	ldr	r3, [r7, #4]
10001162:	3b01      	subs	r3, #1
10001164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10001168:	d301      	bcc.n	1000116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000116a:	2301      	movs	r3, #1
1000116c:	e00f      	b.n	1000118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000116e:	4a0a      	ldr	r2, [pc, #40]	@ (10001198 <SysTick_Config+0x40>)
10001170:	687b      	ldr	r3, [r7, #4]
10001172:	3b01      	subs	r3, #1
10001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10001176:	210f      	movs	r1, #15
10001178:	f04f 30ff 	mov.w	r0, #4294967295
1000117c:	f7ff ff8e 	bl	1000109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10001180:	4b05      	ldr	r3, [pc, #20]	@ (10001198 <SysTick_Config+0x40>)
10001182:	2200      	movs	r2, #0
10001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10001186:	4b04      	ldr	r3, [pc, #16]	@ (10001198 <SysTick_Config+0x40>)
10001188:	2207      	movs	r2, #7
1000118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1000118c:	2300      	movs	r3, #0
}
1000118e:	4618      	mov	r0, r3
10001190:	3708      	adds	r7, #8
10001192:	46bd      	mov	sp, r7
10001194:	bd80      	pop	{r7, pc}
10001196:	bf00      	nop
10001198:	e000e010 	.word	0xe000e010

1000119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000119c:	b580      	push	{r7, lr}
1000119e:	b082      	sub	sp, #8
100011a0:	af00      	add	r7, sp, #0
100011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
100011a4:	6878      	ldr	r0, [r7, #4]
100011a6:	f7ff ff29 	bl	10000ffc <__NVIC_SetPriorityGrouping>
}
100011aa:	bf00      	nop
100011ac:	3708      	adds	r7, #8
100011ae:	46bd      	mov	sp, r7
100011b0:	bd80      	pop	{r7, pc}

100011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100011b2:	b580      	push	{r7, lr}
100011b4:	b086      	sub	sp, #24
100011b6:	af00      	add	r7, sp, #0
100011b8:	4603      	mov	r3, r0
100011ba:	60b9      	str	r1, [r7, #8]
100011bc:	607a      	str	r2, [r7, #4]
100011be:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100011c0:	2300      	movs	r3, #0
100011c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
100011c4:	f7ff ff3e 	bl	10001044 <__NVIC_GetPriorityGrouping>
100011c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
100011ca:	687a      	ldr	r2, [r7, #4]
100011cc:	68b9      	ldr	r1, [r7, #8]
100011ce:	6978      	ldr	r0, [r7, #20]
100011d0:	f7ff ff8e 	bl	100010f0 <NVIC_EncodePriority>
100011d4:	4602      	mov	r2, r0
100011d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
100011da:	4611      	mov	r1, r2
100011dc:	4618      	mov	r0, r3
100011de:	f7ff ff5d 	bl	1000109c <__NVIC_SetPriority>
}
100011e2:	bf00      	nop
100011e4:	3718      	adds	r7, #24
100011e6:	46bd      	mov	sp, r7
100011e8:	bd80      	pop	{r7, pc}

100011ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
100011ea:	b580      	push	{r7, lr}
100011ec:	b082      	sub	sp, #8
100011ee:	af00      	add	r7, sp, #0
100011f0:	4603      	mov	r3, r0
100011f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
100011f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100011f8:	4618      	mov	r0, r3
100011fa:	f7ff ff31 	bl	10001060 <__NVIC_EnableIRQ>
}
100011fe:	bf00      	nop
10001200:	3708      	adds	r7, #8
10001202:	46bd      	mov	sp, r7
10001204:	bd80      	pop	{r7, pc}

10001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10001206:	b580      	push	{r7, lr}
10001208:	b082      	sub	sp, #8
1000120a:	af00      	add	r7, sp, #0
1000120c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1000120e:	6878      	ldr	r0, [r7, #4]
10001210:	f7ff ffa2 	bl	10001158 <SysTick_Config>
10001214:	4603      	mov	r3, r0
}
10001216:	4618      	mov	r0, r3
10001218:	3708      	adds	r7, #8
1000121a:	46bd      	mov	sp, r7
1000121c:	bd80      	pop	{r7, pc}
	...

10001220 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10001220:	b580      	push	{r7, lr}
10001222:	b084      	sub	sp, #16
10001224:	af00      	add	r7, sp, #0
10001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10001228:	2300      	movs	r3, #0
1000122a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
1000122c:	687b      	ldr	r3, [r7, #4]
1000122e:	2b00      	cmp	r3, #0
10001230:	d01e      	beq.n	10001270 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001232:	4b13      	ldr	r3, [pc, #76]	@ (10001280 <HAL_IPCC_Init+0x60>)
10001234:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10001236:	687b      	ldr	r3, [r7, #4]
10001238:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
1000123c:	b2db      	uxtb	r3, r3
1000123e:	2b00      	cmp	r3, #0
10001240:	d102      	bne.n	10001248 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10001242:	6878      	ldr	r0, [r7, #4]
10001244:	f7fe ffb4 	bl	100001b0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10001248:	68b8      	ldr	r0, [r7, #8]
1000124a:	f000 f9eb 	bl	10001624 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
1000124e:	68bb      	ldr	r3, [r7, #8]
10001250:	681b      	ldr	r3, [r3, #0]
10001252:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
10001256:	68bb      	ldr	r3, [r7, #8]
10001258:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
1000125a:	6878      	ldr	r0, [r7, #4]
1000125c:	f000 f9bc 	bl	100015d8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10001260:	687b      	ldr	r3, [r7, #4]
10001262:	2200      	movs	r2, #0
10001264:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10001266:	687b      	ldr	r3, [r7, #4]
10001268:	2201      	movs	r2, #1
1000126a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
1000126e:	e001      	b.n	10001274 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10001270:	2301      	movs	r3, #1
10001272:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10001274:	7bfb      	ldrb	r3, [r7, #15]
}
10001276:	4618      	mov	r0, r3
10001278:	3710      	adds	r7, #16
1000127a:	46bd      	mov	sp, r7
1000127c:	bd80      	pop	{r7, pc}
1000127e:	bf00      	nop
10001280:	4c001010 	.word	0x4c001010

10001284 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10001284:	b580      	push	{r7, lr}
10001286:	b086      	sub	sp, #24
10001288:	af00      	add	r7, sp, #0
1000128a:	60f8      	str	r0, [r7, #12]
1000128c:	60b9      	str	r1, [r7, #8]
1000128e:	603b      	str	r3, [r7, #0]
10001290:	4613      	mov	r3, r2
10001292:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10001294:	2300      	movs	r3, #0
10001296:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10001298:	68fb      	ldr	r3, [r7, #12]
1000129a:	2b00      	cmp	r3, #0
1000129c:	d039      	beq.n	10001312 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
1000129e:	68fb      	ldr	r3, [r7, #12]
100012a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
100012a4:	b2db      	uxtb	r3, r3
100012a6:	2b01      	cmp	r3, #1
100012a8:	d130      	bne.n	1000130c <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100012aa:	79fb      	ldrb	r3, [r7, #7]
100012ac:	2b00      	cmp	r3, #0
100012ae:	d113      	bne.n	100012d8 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
100012b0:	68fa      	ldr	r2, [r7, #12]
100012b2:	68bb      	ldr	r3, [r7, #8]
100012b4:	3306      	adds	r3, #6
100012b6:	009b      	lsls	r3, r3, #2
100012b8:	4413      	add	r3, r2
100012ba:	683a      	ldr	r2, [r7, #0]
100012bc:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100012be:	68fb      	ldr	r3, [r7, #12]
100012c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100012c2:	68bb      	ldr	r3, [r7, #8]
100012c4:	f003 030f 	and.w	r3, r3, #15
100012c8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
100012cc:	fa01 f303 	lsl.w	r3, r1, r3
100012d0:	431a      	orrs	r2, r3
100012d2:	68fb      	ldr	r3, [r7, #12]
100012d4:	635a      	str	r2, [r3, #52]	@ 0x34
100012d6:	e010      	b.n	100012fa <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
100012d8:	68fa      	ldr	r2, [r7, #12]
100012da:	68bb      	ldr	r3, [r7, #8]
100012dc:	009b      	lsls	r3, r3, #2
100012de:	4413      	add	r3, r2
100012e0:	683a      	ldr	r2, [r7, #0]
100012e2:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100012e4:	68fb      	ldr	r3, [r7, #12]
100012e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100012e8:	68bb      	ldr	r3, [r7, #8]
100012ea:	f003 030f 	and.w	r3, r3, #15
100012ee:	2101      	movs	r1, #1
100012f0:	fa01 f303 	lsl.w	r3, r1, r3
100012f4:	431a      	orrs	r2, r3
100012f6:	68fb      	ldr	r3, [r7, #12]
100012f8:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
100012fa:	79fb      	ldrb	r3, [r7, #7]
100012fc:	2b01      	cmp	r3, #1
100012fe:	d10a      	bne.n	10001316 <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001300:	79fb      	ldrb	r3, [r7, #7]
10001302:	4619      	mov	r1, r3
10001304:	68b8      	ldr	r0, [r7, #8]
10001306:	f000 f939 	bl	1000157c <IPCC_UnmaskInterrupt>
1000130a:	e004      	b.n	10001316 <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
1000130c:	2301      	movs	r3, #1
1000130e:	75fb      	strb	r3, [r7, #23]
10001310:	e001      	b.n	10001316 <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10001312:	2301      	movs	r3, #1
10001314:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10001316:	7dfb      	ldrb	r3, [r7, #23]
}
10001318:	4618      	mov	r0, r3
1000131a:	3718      	adds	r7, #24
1000131c:	46bd      	mov	sp, r7
1000131e:	bd80      	pop	{r7, pc}

10001320 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001320:	b480      	push	{r7}
10001322:	b089      	sub	sp, #36	@ 0x24
10001324:	af00      	add	r7, sp, #0
10001326:	60f8      	str	r0, [r7, #12]
10001328:	60b9      	str	r1, [r7, #8]
1000132a:	4613      	mov	r3, r2
1000132c:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000132e:	4b14      	ldr	r3, [pc, #80]	@ (10001380 <HAL_IPCC_GetChannelStatus+0x60>)
10001330:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10001332:	4b14      	ldr	r3, [pc, #80]	@ (10001384 <HAL_IPCC_GetChannelStatus+0x64>)
10001334:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001336:	79fb      	ldrb	r3, [r7, #7]
10001338:	2b00      	cmp	r3, #0
1000133a:	d10a      	bne.n	10001352 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000133c:	69bb      	ldr	r3, [r7, #24]
1000133e:	68da      	ldr	r2, [r3, #12]
10001340:	68bb      	ldr	r3, [r7, #8]
10001342:	f003 030f 	and.w	r3, r3, #15
10001346:	2101      	movs	r1, #1
10001348:	fa01 f303 	lsl.w	r3, r1, r3
1000134c:	4013      	ands	r3, r2
1000134e:	61fb      	str	r3, [r7, #28]
10001350:	e009      	b.n	10001366 <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001352:	697b      	ldr	r3, [r7, #20]
10001354:	68da      	ldr	r2, [r3, #12]
10001356:	68bb      	ldr	r3, [r7, #8]
10001358:	f003 030f 	and.w	r3, r3, #15
1000135c:	2101      	movs	r1, #1
1000135e:	fa01 f303 	lsl.w	r3, r1, r3
10001362:	4013      	ands	r3, r2
10001364:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10001366:	69fb      	ldr	r3, [r7, #28]
10001368:	2b00      	cmp	r3, #0
1000136a:	bf14      	ite	ne
1000136c:	2301      	movne	r3, #1
1000136e:	2300      	moveq	r3, #0
10001370:	b2db      	uxtb	r3, r3
}
10001372:	4618      	mov	r0, r3
10001374:	3724      	adds	r7, #36	@ 0x24
10001376:	46bd      	mov	sp, r7
10001378:	f85d 7b04 	ldr.w	r7, [sp], #4
1000137c:	4770      	bx	lr
1000137e:	bf00      	nop
10001380:	4c001010 	.word	0x4c001010
10001384:	4c001000 	.word	0x4c001000

10001388 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001388:	b580      	push	{r7, lr}
1000138a:	b088      	sub	sp, #32
1000138c:	af00      	add	r7, sp, #0
1000138e:	60f8      	str	r0, [r7, #12]
10001390:	60b9      	str	r1, [r7, #8]
10001392:	4613      	mov	r3, r2
10001394:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10001396:	2300      	movs	r3, #0
10001398:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000139a:	4b1d      	ldr	r3, [pc, #116]	@ (10001410 <HAL_IPCC_NotifyCPU+0x88>)
1000139c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
1000139e:	68fb      	ldr	r3, [r7, #12]
100013a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
100013a4:	b2db      	uxtb	r3, r3
100013a6:	2b01      	cmp	r3, #1
100013a8:	d12a      	bne.n	10001400 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
100013aa:	69bb      	ldr	r3, [r7, #24]
100013ac:	689a      	ldr	r2, [r3, #8]
100013ae:	79fb      	ldrb	r3, [r7, #7]
100013b0:	2b00      	cmp	r3, #0
100013b2:	d102      	bne.n	100013ba <HAL_IPCC_NotifyCPU+0x32>
100013b4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
100013b8:	e000      	b.n	100013bc <HAL_IPCC_NotifyCPU+0x34>
100013ba:	2101      	movs	r1, #1
100013bc:	68bb      	ldr	r3, [r7, #8]
100013be:	f003 030f 	and.w	r3, r3, #15
100013c2:	fa01 f303 	lsl.w	r3, r1, r3
100013c6:	431a      	orrs	r2, r3
100013c8:	69bb      	ldr	r3, [r7, #24]
100013ca:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
100013cc:	79fb      	ldrb	r3, [r7, #7]
100013ce:	2b00      	cmp	r3, #0
100013d0:	d102      	bne.n	100013d8 <HAL_IPCC_NotifyCPU+0x50>
100013d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
100013d6:	e000      	b.n	100013da <HAL_IPCC_NotifyCPU+0x52>
100013d8:	2201      	movs	r2, #1
100013da:	68bb      	ldr	r3, [r7, #8]
100013dc:	f003 030f 	and.w	r3, r3, #15
100013e0:	fa02 f303 	lsl.w	r3, r2, r3
100013e4:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
100013e6:	68fb      	ldr	r3, [r7, #12]
100013e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100013ea:	697b      	ldr	r3, [r7, #20]
100013ec:	4013      	ands	r3, r2
100013ee:	697a      	ldr	r2, [r7, #20]
100013f0:	429a      	cmp	r2, r3
100013f2:	d107      	bne.n	10001404 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100013f4:	79fb      	ldrb	r3, [r7, #7]
100013f6:	4619      	mov	r1, r3
100013f8:	68b8      	ldr	r0, [r7, #8]
100013fa:	f000 f8bf 	bl	1000157c <IPCC_UnmaskInterrupt>
100013fe:	e001      	b.n	10001404 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10001400:	2301      	movs	r3, #1
10001402:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10001404:	7ffb      	ldrb	r3, [r7, #31]
}
10001406:	4618      	mov	r0, r3
10001408:	3720      	adds	r7, #32
1000140a:	46bd      	mov	sp, r7
1000140c:	bd80      	pop	{r7, pc}
1000140e:	bf00      	nop
10001410:	4c001010 	.word	0x4c001010

10001414 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10001414:	b580      	push	{r7, lr}
10001416:	b086      	sub	sp, #24
10001418:	af00      	add	r7, sp, #0
1000141a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
1000141c:	2300      	movs	r3, #0
1000141e:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001420:	4b22      	ldr	r3, [pc, #136]	@ (100014ac <HAL_IPCC_TX_IRQHandler+0x98>)
10001422:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10001424:	68fb      	ldr	r3, [r7, #12]
10001426:	685b      	ldr	r3, [r3, #4]
10001428:	43db      	mvns	r3, r3
1000142a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
1000142e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10001430:	68fb      	ldr	r3, [r7, #12]
10001432:	68db      	ldr	r3, [r3, #12]
10001434:	041b      	lsls	r3, r3, #16
10001436:	43db      	mvns	r3, r3
10001438:	697a      	ldr	r2, [r7, #20]
1000143a:	4013      	ands	r3, r2
1000143c:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000143e:	e02c      	b.n	1000149a <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10001440:	693b      	ldr	r3, [r7, #16]
10001442:	f003 030f 	and.w	r3, r3, #15
10001446:	3310      	adds	r3, #16
10001448:	2201      	movs	r2, #1
1000144a:	fa02 f303 	lsl.w	r3, r2, r3
1000144e:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10001450:	697a      	ldr	r2, [r7, #20]
10001452:	68bb      	ldr	r3, [r7, #8]
10001454:	4013      	ands	r3, r2
10001456:	2b00      	cmp	r3, #0
10001458:	d01c      	beq.n	10001494 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
1000145a:	68fb      	ldr	r3, [r7, #12]
1000145c:	685a      	ldr	r2, [r3, #4]
1000145e:	68bb      	ldr	r3, [r7, #8]
10001460:	431a      	orrs	r2, r3
10001462:	68fb      	ldr	r3, [r7, #12]
10001464:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
10001466:	687a      	ldr	r2, [r7, #4]
10001468:	693b      	ldr	r3, [r7, #16]
1000146a:	3306      	adds	r3, #6
1000146c:	009b      	lsls	r3, r3, #2
1000146e:	4413      	add	r3, r2
10001470:	685b      	ldr	r3, [r3, #4]
10001472:	2b00      	cmp	r3, #0
10001474:	d009      	beq.n	1000148a <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
10001476:	687a      	ldr	r2, [r7, #4]
10001478:	693b      	ldr	r3, [r7, #16]
1000147a:	3306      	adds	r3, #6
1000147c:	009b      	lsls	r3, r3, #2
1000147e:	4413      	add	r3, r2
10001480:	685b      	ldr	r3, [r3, #4]
10001482:	2200      	movs	r2, #0
10001484:	6939      	ldr	r1, [r7, #16]
10001486:	6878      	ldr	r0, [r7, #4]
10001488:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
1000148a:	68bb      	ldr	r3, [r7, #8]
1000148c:	43db      	mvns	r3, r3
1000148e:	697a      	ldr	r2, [r7, #20]
10001490:	4013      	ands	r3, r2
10001492:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10001494:	693b      	ldr	r3, [r7, #16]
10001496:	3301      	adds	r3, #1
10001498:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000149a:	697b      	ldr	r3, [r7, #20]
1000149c:	2b00      	cmp	r3, #0
1000149e:	d1cf      	bne.n	10001440 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
100014a0:	bf00      	nop
100014a2:	bf00      	nop
100014a4:	3718      	adds	r7, #24
100014a6:	46bd      	mov	sp, r7
100014a8:	bd80      	pop	{r7, pc}
100014aa:	bf00      	nop
100014ac:	4c001010 	.word	0x4c001010

100014b0 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
100014b0:	b580      	push	{r7, lr}
100014b2:	b088      	sub	sp, #32
100014b4:	af00      	add	r7, sp, #0
100014b6:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
100014b8:	2300      	movs	r3, #0
100014ba:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100014bc:	4b20      	ldr	r3, [pc, #128]	@ (10001540 <HAL_IPCC_RX_IRQHandler+0x90>)
100014be:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100014c0:	4b20      	ldr	r3, [pc, #128]	@ (10001544 <HAL_IPCC_RX_IRQHandler+0x94>)
100014c2:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
100014c4:	697b      	ldr	r3, [r7, #20]
100014c6:	685b      	ldr	r3, [r3, #4]
100014c8:	43db      	mvns	r3, r3
100014ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
100014ce:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
100014d0:	693b      	ldr	r3, [r7, #16]
100014d2:	68db      	ldr	r3, [r3, #12]
100014d4:	69fa      	ldr	r2, [r7, #28]
100014d6:	4013      	ands	r3, r2
100014d8:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100014da:	e029      	b.n	10001530 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
100014dc:	69bb      	ldr	r3, [r7, #24]
100014de:	f003 030f 	and.w	r3, r3, #15
100014e2:	2201      	movs	r2, #1
100014e4:	fa02 f303 	lsl.w	r3, r2, r3
100014e8:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
100014ea:	69fa      	ldr	r2, [r7, #28]
100014ec:	68fb      	ldr	r3, [r7, #12]
100014ee:	4013      	ands	r3, r2
100014f0:	2b00      	cmp	r3, #0
100014f2:	d01a      	beq.n	1000152a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
100014f4:	697b      	ldr	r3, [r7, #20]
100014f6:	685a      	ldr	r2, [r3, #4]
100014f8:	68fb      	ldr	r3, [r7, #12]
100014fa:	431a      	orrs	r2, r3
100014fc:	697b      	ldr	r3, [r7, #20]
100014fe:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10001500:	687a      	ldr	r2, [r7, #4]
10001502:	69bb      	ldr	r3, [r7, #24]
10001504:	009b      	lsls	r3, r3, #2
10001506:	4413      	add	r3, r2
10001508:	685b      	ldr	r3, [r3, #4]
1000150a:	2b00      	cmp	r3, #0
1000150c:	d008      	beq.n	10001520 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
1000150e:	687a      	ldr	r2, [r7, #4]
10001510:	69bb      	ldr	r3, [r7, #24]
10001512:	009b      	lsls	r3, r3, #2
10001514:	4413      	add	r3, r2
10001516:	685b      	ldr	r3, [r3, #4]
10001518:	2201      	movs	r2, #1
1000151a:	69b9      	ldr	r1, [r7, #24]
1000151c:	6878      	ldr	r0, [r7, #4]
1000151e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10001520:	68fb      	ldr	r3, [r7, #12]
10001522:	43db      	mvns	r3, r3
10001524:	69fa      	ldr	r2, [r7, #28]
10001526:	4013      	ands	r3, r2
10001528:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
1000152a:	69bb      	ldr	r3, [r7, #24]
1000152c:	3301      	adds	r3, #1
1000152e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001530:	69fb      	ldr	r3, [r7, #28]
10001532:	2b00      	cmp	r3, #0
10001534:	d1d2      	bne.n	100014dc <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10001536:	bf00      	nop
10001538:	bf00      	nop
1000153a:	3720      	adds	r7, #32
1000153c:	46bd      	mov	sp, r7
1000153e:	bd80      	pop	{r7, pc}
10001540:	4c001010 	.word	0x4c001010
10001544:	4c001000 	.word	0x4c001000

10001548 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001548:	b480      	push	{r7}
1000154a:	b085      	sub	sp, #20
1000154c:	af00      	add	r7, sp, #0
1000154e:	60f8      	str	r0, [r7, #12]
10001550:	60b9      	str	r1, [r7, #8]
10001552:	4613      	mov	r3, r2
10001554:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10001556:	bf00      	nop
10001558:	3714      	adds	r7, #20
1000155a:	46bd      	mov	sp, r7
1000155c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001560:	4770      	bx	lr

10001562 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001562:	b480      	push	{r7}
10001564:	b085      	sub	sp, #20
10001566:	af00      	add	r7, sp, #0
10001568:	60f8      	str	r0, [r7, #12]
1000156a:	60b9      	str	r1, [r7, #8]
1000156c:	4613      	mov	r3, r2
1000156e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10001570:	bf00      	nop
10001572:	3714      	adds	r7, #20
10001574:	46bd      	mov	sp, r7
10001576:	f85d 7b04 	ldr.w	r7, [sp], #4
1000157a:	4770      	bx	lr

1000157c <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000157c:	b480      	push	{r7}
1000157e:	b085      	sub	sp, #20
10001580:	af00      	add	r7, sp, #0
10001582:	6078      	str	r0, [r7, #4]
10001584:	460b      	mov	r3, r1
10001586:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001588:	4b12      	ldr	r3, [pc, #72]	@ (100015d4 <IPCC_UnmaskInterrupt+0x58>)
1000158a:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000158c:	78fb      	ldrb	r3, [r7, #3]
1000158e:	2b00      	cmp	r3, #0
10001590:	d10d      	bne.n	100015ae <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001592:	68fb      	ldr	r3, [r7, #12]
10001594:	685a      	ldr	r2, [r3, #4]
10001596:	687b      	ldr	r3, [r7, #4]
10001598:	f003 030f 	and.w	r3, r3, #15
1000159c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
100015a0:	fa01 f303 	lsl.w	r3, r1, r3
100015a4:	43db      	mvns	r3, r3
100015a6:	401a      	ands	r2, r3
100015a8:	68fb      	ldr	r3, [r7, #12]
100015aa:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
100015ac:	e00b      	b.n	100015c6 <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100015ae:	68fb      	ldr	r3, [r7, #12]
100015b0:	685a      	ldr	r2, [r3, #4]
100015b2:	687b      	ldr	r3, [r7, #4]
100015b4:	f003 030f 	and.w	r3, r3, #15
100015b8:	2101      	movs	r1, #1
100015ba:	fa01 f303 	lsl.w	r3, r1, r3
100015be:	43db      	mvns	r3, r3
100015c0:	401a      	ands	r2, r3
100015c2:	68fb      	ldr	r3, [r7, #12]
100015c4:	605a      	str	r2, [r3, #4]
}
100015c6:	bf00      	nop
100015c8:	3714      	adds	r7, #20
100015ca:	46bd      	mov	sp, r7
100015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
100015d0:	4770      	bx	lr
100015d2:	bf00      	nop
100015d4:	4c001010 	.word	0x4c001010

100015d8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
100015d8:	b480      	push	{r7}
100015da:	b085      	sub	sp, #20
100015dc:	af00      	add	r7, sp, #0
100015de:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100015e0:	2300      	movs	r3, #0
100015e2:	60fb      	str	r3, [r7, #12]
100015e4:	e00f      	b.n	10001606 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
100015e6:	687a      	ldr	r2, [r7, #4]
100015e8:	68fb      	ldr	r3, [r7, #12]
100015ea:	009b      	lsls	r3, r3, #2
100015ec:	4413      	add	r3, r2
100015ee:	4a0b      	ldr	r2, [pc, #44]	@ (1000161c <IPCC_SetDefaultCallbacks+0x44>)
100015f0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
100015f2:	687a      	ldr	r2, [r7, #4]
100015f4:	68fb      	ldr	r3, [r7, #12]
100015f6:	3306      	adds	r3, #6
100015f8:	009b      	lsls	r3, r3, #2
100015fa:	4413      	add	r3, r2
100015fc:	4a08      	ldr	r2, [pc, #32]	@ (10001620 <IPCC_SetDefaultCallbacks+0x48>)
100015fe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001600:	68fb      	ldr	r3, [r7, #12]
10001602:	3301      	adds	r3, #1
10001604:	60fb      	str	r3, [r7, #12]
10001606:	68fb      	ldr	r3, [r7, #12]
10001608:	2b05      	cmp	r3, #5
1000160a:	d9ec      	bls.n	100015e6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
1000160c:	bf00      	nop
1000160e:	bf00      	nop
10001610:	3714      	adds	r7, #20
10001612:	46bd      	mov	sp, r7
10001614:	f85d 7b04 	ldr.w	r7, [sp], #4
10001618:	4770      	bx	lr
1000161a:	bf00      	nop
1000161c:	10001549 	.word	0x10001549
10001620:	10001563 	.word	0x10001563

10001624 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10001624:	b480      	push	{r7}
10001626:	b083      	sub	sp, #12
10001628:	af00      	add	r7, sp, #0
1000162a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
1000162c:	687b      	ldr	r3, [r7, #4]
1000162e:	2200      	movs	r2, #0
10001630:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10001632:	687b      	ldr	r3, [r7, #4]
10001634:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
10001638:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
1000163a:	687b      	ldr	r3, [r7, #4]
1000163c:	223f      	movs	r2, #63	@ 0x3f
1000163e:	609a      	str	r2, [r3, #8]
}
10001640:	bf00      	nop
10001642:	370c      	adds	r7, #12
10001644:	46bd      	mov	sp, r7
10001646:	f85d 7b04 	ldr.w	r7, [sp], #4
1000164a:	4770      	bx	lr

1000164c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
1000164c:	b480      	push	{r7}
1000164e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001650:	4b05      	ldr	r3, [pc, #20]	@ (10001668 <HAL_PWR_EnableBkUpAccess+0x1c>)
10001652:	681b      	ldr	r3, [r3, #0]
10001654:	4a04      	ldr	r2, [pc, #16]	@ (10001668 <HAL_PWR_EnableBkUpAccess+0x1c>)
10001656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000165a:	6013      	str	r3, [r2, #0]
}
1000165c:	bf00      	nop
1000165e:	46bd      	mov	sp, r7
10001660:	f85d 7b04 	ldr.w	r7, [sp], #4
10001664:	4770      	bx	lr
10001666:	bf00      	nop
10001668:	50001000 	.word	0x50001000

1000166c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1000166c:	b580      	push	{r7, lr}
1000166e:	b084      	sub	sp, #16
10001670:	af00      	add	r7, sp, #0
10001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10001674:	2300      	movs	r3, #0
10001676:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10001678:	687b      	ldr	r3, [r7, #4]
1000167a:	2b00      	cmp	r3, #0
1000167c:	d101      	bne.n	10001682 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
1000167e:	2301      	movs	r3, #1
10001680:	e320      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10001682:	687b      	ldr	r3, [r7, #4]
10001684:	681b      	ldr	r3, [r3, #0]
10001686:	f003 0301 	and.w	r3, r3, #1
1000168a:	2b00      	cmp	r3, #0
1000168c:	f000 8081 	beq.w	10001792 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10001690:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001694:	6a1b      	ldr	r3, [r3, #32]
10001696:	f003 0303 	and.w	r3, r3, #3
1000169a:	2b01      	cmp	r3, #1
1000169c:	d107      	bne.n	100016ae <HAL_RCC_OscConfig+0x42>
1000169e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016a2:	6a1b      	ldr	r3, [r3, #32]
100016a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100016a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100016ac:	d054      	beq.n	10001758 <HAL_RCC_OscConfig+0xec>
100016ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100016b4:	f003 0307 	and.w	r3, r3, #7
100016b8:	2b01      	cmp	r3, #1
100016ba:	d107      	bne.n	100016cc <HAL_RCC_OscConfig+0x60>
100016bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100016c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100016c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100016ca:	d045      	beq.n	10001758 <HAL_RCC_OscConfig+0xec>
100016cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100016d2:	f003 0303 	and.w	r3, r3, #3
100016d6:	2b01      	cmp	r3, #1
100016d8:	d107      	bne.n	100016ea <HAL_RCC_OscConfig+0x7e>
100016da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100016e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100016e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100016e8:	d036      	beq.n	10001758 <HAL_RCC_OscConfig+0xec>
100016ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100016f0:	f003 0303 	and.w	r3, r3, #3
100016f4:	2b01      	cmp	r3, #1
100016f6:	d10f      	bne.n	10001718 <HAL_RCC_OscConfig+0xac>
100016f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001700:	f003 0302 	and.w	r3, r3, #2
10001704:	2b02      	cmp	r3, #2
10001706:	d027      	beq.n	10001758 <HAL_RCC_OscConfig+0xec>
10001708:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000170c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001710:	f003 0302 	and.w	r3, r3, #2
10001714:	2b02      	cmp	r3, #2
10001716:	d01f      	beq.n	10001758 <HAL_RCC_OscConfig+0xec>
10001718:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000171c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001720:	f003 0303 	and.w	r3, r3, #3
10001724:	2b01      	cmp	r3, #1
10001726:	d107      	bne.n	10001738 <HAL_RCC_OscConfig+0xcc>
10001728:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000172c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001730:	f003 0302 	and.w	r3, r3, #2
10001734:	2b02      	cmp	r3, #2
10001736:	d00f      	beq.n	10001758 <HAL_RCC_OscConfig+0xec>
10001738:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000173c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001740:	f003 0303 	and.w	r3, r3, #3
10001744:	2b01      	cmp	r3, #1
10001746:	d117      	bne.n	10001778 <HAL_RCC_OscConfig+0x10c>
10001748:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000174c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001750:	f003 0302 	and.w	r3, r3, #2
10001754:	2b02      	cmp	r3, #2
10001756:	d10f      	bne.n	10001778 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001758:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000175c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001768:	d112      	bne.n	10001790 <HAL_RCC_OscConfig+0x124>
1000176a:	687b      	ldr	r3, [r7, #4]
1000176c:	685b      	ldr	r3, [r3, #4]
1000176e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001772:	d00d      	beq.n	10001790 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10001774:	2301      	movs	r3, #1
10001776:	e2a5      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10001778:	687b      	ldr	r3, [r7, #4]
1000177a:	685b      	ldr	r3, [r3, #4]
1000177c:	4618      	mov	r0, r3
1000177e:	f000 faa7 	bl	10001cd0 <HAL_RCC_HSEConfig>
10001782:	4603      	mov	r3, r0
10001784:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10001786:	7bfb      	ldrb	r3, [r7, #15]
10001788:	2b00      	cmp	r3, #0
1000178a:	d002      	beq.n	10001792 <HAL_RCC_OscConfig+0x126>
      {
        return result;
1000178c:	7bfb      	ldrb	r3, [r7, #15]
1000178e:	e299      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001790:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10001792:	687b      	ldr	r3, [r7, #4]
10001794:	681b      	ldr	r3, [r3, #0]
10001796:	f003 0302 	and.w	r3, r3, #2
1000179a:	2b00      	cmp	r3, #0
1000179c:	f000 814e 	beq.w	10001a3c <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
100017a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017a4:	6a1b      	ldr	r3, [r3, #32]
100017a6:	f003 0303 	and.w	r3, r3, #3
100017aa:	2b00      	cmp	r3, #0
100017ac:	d107      	bne.n	100017be <HAL_RCC_OscConfig+0x152>
100017ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017b2:	6a1b      	ldr	r3, [r3, #32]
100017b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100017b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100017bc:	d055      	beq.n	1000186a <HAL_RCC_OscConfig+0x1fe>
100017be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100017c4:	f003 0307 	and.w	r3, r3, #7
100017c8:	2b00      	cmp	r3, #0
100017ca:	d107      	bne.n	100017dc <HAL_RCC_OscConfig+0x170>
100017cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100017d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100017d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100017da:	d046      	beq.n	1000186a <HAL_RCC_OscConfig+0x1fe>
100017dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100017e2:	f003 0303 	and.w	r3, r3, #3
100017e6:	2b00      	cmp	r3, #0
100017e8:	d107      	bne.n	100017fa <HAL_RCC_OscConfig+0x18e>
100017ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100017f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100017f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100017f8:	d037      	beq.n	1000186a <HAL_RCC_OscConfig+0x1fe>
100017fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001800:	f003 0303 	and.w	r3, r3, #3
10001804:	2b00      	cmp	r3, #0
10001806:	d10f      	bne.n	10001828 <HAL_RCC_OscConfig+0x1bc>
10001808:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000180c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001810:	f003 0302 	and.w	r3, r3, #2
10001814:	2b02      	cmp	r3, #2
10001816:	d028      	beq.n	1000186a <HAL_RCC_OscConfig+0x1fe>
10001818:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001820:	f003 0302 	and.w	r3, r3, #2
10001824:	2b02      	cmp	r3, #2
10001826:	d020      	beq.n	1000186a <HAL_RCC_OscConfig+0x1fe>
10001828:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000182c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001830:	f003 0303 	and.w	r3, r3, #3
10001834:	2b00      	cmp	r3, #0
10001836:	d107      	bne.n	10001848 <HAL_RCC_OscConfig+0x1dc>
10001838:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000183c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001840:	f003 0302 	and.w	r3, r3, #2
10001844:	2b02      	cmp	r3, #2
10001846:	d010      	beq.n	1000186a <HAL_RCC_OscConfig+0x1fe>
10001848:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000184c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001850:	f003 0303 	and.w	r3, r3, #3
10001854:	2b00      	cmp	r3, #0
10001856:	f040 8088 	bne.w	1000196a <HAL_RCC_OscConfig+0x2fe>
1000185a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000185e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001862:	f003 0302 	and.w	r3, r3, #2
10001866:	2b02      	cmp	r3, #2
10001868:	d17f      	bne.n	1000196a <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000186a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000186e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001872:	f003 0301 	and.w	r3, r3, #1
10001876:	2b01      	cmp	r3, #1
10001878:	d105      	bne.n	10001886 <HAL_RCC_OscConfig+0x21a>
1000187a:	687b      	ldr	r3, [r7, #4]
1000187c:	68db      	ldr	r3, [r3, #12]
1000187e:	2b01      	cmp	r3, #1
10001880:	d001      	beq.n	10001886 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10001882:	2301      	movs	r3, #1
10001884:	e21e      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10001886:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000188a:	699b      	ldr	r3, [r3, #24]
1000188c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10001890:	687b      	ldr	r3, [r7, #4]
10001892:	691b      	ldr	r3, [r3, #16]
10001894:	021b      	lsls	r3, r3, #8
10001896:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000189a:	4313      	orrs	r3, r2
1000189c:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000189e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100018a4:	f003 0303 	and.w	r3, r3, #3
100018a8:	2b00      	cmp	r3, #0
100018aa:	d10f      	bne.n	100018cc <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100018ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100018b4:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100018b8:	2b02      	cmp	r3, #2
100018ba:	d047      	beq.n	1000194c <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100018bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100018c4:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100018c8:	2b02      	cmp	r3, #2
100018ca:	d03f      	beq.n	1000194c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100018cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018d0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100018d4:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100018d8:	2b00      	cmp	r3, #0
100018da:	d107      	bne.n	100018ec <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100018dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018e0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100018e4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100018e8:	2b02      	cmp	r3, #2
100018ea:	d02f      	beq.n	1000194c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100018ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018f0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100018f4:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100018f8:	2b00      	cmp	r3, #0
100018fa:	d107      	bne.n	1000190c <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
100018fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001900:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001904:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10001908:	2b02      	cmp	r3, #2
1000190a:	d01f      	beq.n	1000194c <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
1000190c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001910:	699b      	ldr	r3, [r3, #24]
10001912:	f023 0203 	bic.w	r2, r3, #3
10001916:	687b      	ldr	r3, [r7, #4]
10001918:	695b      	ldr	r3, [r3, #20]
1000191a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000191e:	4313      	orrs	r3, r2
10001920:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10001922:	f7ff fb3b 	bl	10000f9c <HAL_GetTick>
10001926:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001928:	e008      	b.n	1000193c <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000192a:	f7ff fb37 	bl	10000f9c <HAL_GetTick>
1000192e:	4602      	mov	r2, r0
10001930:	68bb      	ldr	r3, [r7, #8]
10001932:	1ad3      	subs	r3, r2, r3
10001934:	2b64      	cmp	r3, #100	@ 0x64
10001936:	d901      	bls.n	1000193c <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10001938:	2303      	movs	r3, #3
1000193a:	e1c3      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000193c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001940:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001944:	f003 0304 	and.w	r3, r3, #4
10001948:	2b04      	cmp	r3, #4
1000194a:	d1ee      	bne.n	1000192a <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
1000194c:	f001 fa6a 	bl	10002e24 <HAL_RCC_GetSystemCoreClockFreq>
10001950:	4603      	mov	r3, r0
10001952:	4ab3      	ldr	r2, [pc, #716]	@ (10001c20 <HAL_RCC_OscConfig+0x5b4>)
10001954:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10001956:	4bb3      	ldr	r3, [pc, #716]	@ (10001c24 <HAL_RCC_OscConfig+0x5b8>)
10001958:	681b      	ldr	r3, [r3, #0]
1000195a:	4618      	mov	r0, r3
1000195c:	f7ff fad4 	bl	10000f08 <HAL_InitTick>
10001960:	4603      	mov	r3, r0
10001962:	2b00      	cmp	r3, #0
10001964:	d069      	beq.n	10001a3a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10001966:	2301      	movs	r3, #1
10001968:	e1ac      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000196a:	687b      	ldr	r3, [r7, #4]
1000196c:	68db      	ldr	r3, [r3, #12]
1000196e:	2b00      	cmp	r3, #0
10001970:	d049      	beq.n	10001a06 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10001972:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001976:	68db      	ldr	r3, [r3, #12]
10001978:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000197c:	f043 0301 	orr.w	r3, r3, #1
10001980:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001982:	f7ff fb0b 	bl	10000f9c <HAL_GetTick>
10001986:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001988:	e008      	b.n	1000199c <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000198a:	f7ff fb07 	bl	10000f9c <HAL_GetTick>
1000198e:	4602      	mov	r2, r0
10001990:	68bb      	ldr	r3, [r7, #8]
10001992:	1ad3      	subs	r3, r2, r3
10001994:	2b64      	cmp	r3, #100	@ 0x64
10001996:	d901      	bls.n	1000199c <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10001998:	2303      	movs	r3, #3
1000199a:	e193      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000199c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019a0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100019a4:	f003 0301 	and.w	r3, r3, #1
100019a8:	2b01      	cmp	r3, #1
100019aa:	d1ee      	bne.n	1000198a <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100019ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019b0:	699b      	ldr	r3, [r3, #24]
100019b2:	f023 0203 	bic.w	r2, r3, #3
100019b6:	687b      	ldr	r3, [r7, #4]
100019b8:	695b      	ldr	r3, [r3, #20]
100019ba:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100019be:	4313      	orrs	r3, r2
100019c0:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100019c2:	f7ff faeb 	bl	10000f9c <HAL_GetTick>
100019c6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100019c8:	e008      	b.n	100019dc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100019ca:	f7ff fae7 	bl	10000f9c <HAL_GetTick>
100019ce:	4602      	mov	r2, r0
100019d0:	68bb      	ldr	r3, [r7, #8]
100019d2:	1ad3      	subs	r3, r2, r3
100019d4:	2b64      	cmp	r3, #100	@ 0x64
100019d6:	d901      	bls.n	100019dc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
100019d8:	2303      	movs	r3, #3
100019da:	e173      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100019dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019e0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100019e4:	f003 0304 	and.w	r3, r3, #4
100019e8:	2b04      	cmp	r3, #4
100019ea:	d1ee      	bne.n	100019ca <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100019ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019f0:	699b      	ldr	r3, [r3, #24]
100019f2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
100019f6:	687b      	ldr	r3, [r7, #4]
100019f8:	691b      	ldr	r3, [r3, #16]
100019fa:	021b      	lsls	r3, r3, #8
100019fc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001a00:	4313      	orrs	r3, r2
10001a02:	618b      	str	r3, [r1, #24]
10001a04:	e01a      	b.n	10001a3c <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10001a06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a0a:	2201      	movs	r2, #1
10001a0c:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001a0e:	f7ff fac5 	bl	10000f9c <HAL_GetTick>
10001a12:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001a14:	e008      	b.n	10001a28 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10001a16:	f7ff fac1 	bl	10000f9c <HAL_GetTick>
10001a1a:	4602      	mov	r2, r0
10001a1c:	68bb      	ldr	r3, [r7, #8]
10001a1e:	1ad3      	subs	r3, r2, r3
10001a20:	2b64      	cmp	r3, #100	@ 0x64
10001a22:	d901      	bls.n	10001a28 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10001a24:	2303      	movs	r3, #3
10001a26:	e14d      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001a28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a2c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001a30:	f003 0301 	and.w	r3, r3, #1
10001a34:	2b01      	cmp	r3, #1
10001a36:	d0ee      	beq.n	10001a16 <HAL_RCC_OscConfig+0x3aa>
10001a38:	e000      	b.n	10001a3c <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10001a3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10001a3c:	687b      	ldr	r3, [r7, #4]
10001a3e:	681b      	ldr	r3, [r3, #0]
10001a40:	f003 0310 	and.w	r3, r3, #16
10001a44:	2b00      	cmp	r3, #0
10001a46:	f000 8091 	beq.w	10001b6c <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10001a4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a4e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001a52:	f003 0303 	and.w	r3, r3, #3
10001a56:	2b02      	cmp	r3, #2
10001a58:	d107      	bne.n	10001a6a <HAL_RCC_OscConfig+0x3fe>
10001a5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a5e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001a62:	f003 0302 	and.w	r3, r3, #2
10001a66:	2b02      	cmp	r3, #2
10001a68:	d01e      	beq.n	10001aa8 <HAL_RCC_OscConfig+0x43c>
10001a6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001a70:	f003 0303 	and.w	r3, r3, #3
10001a74:	2b02      	cmp	r3, #2
10001a76:	d107      	bne.n	10001a88 <HAL_RCC_OscConfig+0x41c>
10001a78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001a7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001a82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001a86:	d00f      	beq.n	10001aa8 <HAL_RCC_OscConfig+0x43c>
10001a88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a8c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001a90:	f003 0303 	and.w	r3, r3, #3
10001a94:	2b02      	cmp	r3, #2
10001a96:	d122      	bne.n	10001ade <HAL_RCC_OscConfig+0x472>
10001a98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a9c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001aa0:	f003 0302 	and.w	r3, r3, #2
10001aa4:	2b02      	cmp	r3, #2
10001aa6:	d11a      	bne.n	10001ade <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001aa8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001aac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001ab0:	f003 0310 	and.w	r3, r3, #16
10001ab4:	2b10      	cmp	r3, #16
10001ab6:	d105      	bne.n	10001ac4 <HAL_RCC_OscConfig+0x458>
10001ab8:	687b      	ldr	r3, [r7, #4]
10001aba:	69db      	ldr	r3, [r3, #28]
10001abc:	2b10      	cmp	r3, #16
10001abe:	d001      	beq.n	10001ac4 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10001ac0:	2301      	movs	r3, #1
10001ac2:	e0ff      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001ac4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ac8:	69db      	ldr	r3, [r3, #28]
10001aca:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10001ace:	687b      	ldr	r3, [r7, #4]
10001ad0:	6a1b      	ldr	r3, [r3, #32]
10001ad2:	021b      	lsls	r3, r3, #8
10001ad4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001ad8:	4313      	orrs	r3, r2
10001ada:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001adc:	e046      	b.n	10001b6c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10001ade:	687b      	ldr	r3, [r7, #4]
10001ae0:	69db      	ldr	r3, [r3, #28]
10001ae2:	2b00      	cmp	r3, #0
10001ae4:	d029      	beq.n	10001b3a <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10001ae6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001aea:	68db      	ldr	r3, [r3, #12]
10001aec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001af0:	f043 0310 	orr.w	r3, r3, #16
10001af4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001af6:	f7ff fa51 	bl	10000f9c <HAL_GetTick>
10001afa:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001afc:	e008      	b.n	10001b10 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10001afe:	f7ff fa4d 	bl	10000f9c <HAL_GetTick>
10001b02:	4602      	mov	r2, r0
10001b04:	68bb      	ldr	r3, [r7, #8]
10001b06:	1ad3      	subs	r3, r2, r3
10001b08:	2b64      	cmp	r3, #100	@ 0x64
10001b0a:	d901      	bls.n	10001b10 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10001b0c:	2303      	movs	r3, #3
10001b0e:	e0d9      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001b10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b14:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001b18:	f003 0310 	and.w	r3, r3, #16
10001b1c:	2b10      	cmp	r3, #16
10001b1e:	d1ee      	bne.n	10001afe <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001b20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b24:	69db      	ldr	r3, [r3, #28]
10001b26:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10001b2a:	687b      	ldr	r3, [r7, #4]
10001b2c:	6a1b      	ldr	r3, [r3, #32]
10001b2e:	021b      	lsls	r3, r3, #8
10001b30:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001b34:	4313      	orrs	r3, r2
10001b36:	61cb      	str	r3, [r1, #28]
10001b38:	e018      	b.n	10001b6c <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10001b3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b3e:	2210      	movs	r2, #16
10001b40:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001b42:	f7ff fa2b 	bl	10000f9c <HAL_GetTick>
10001b46:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10001b48:	e008      	b.n	10001b5c <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10001b4a:	f7ff fa27 	bl	10000f9c <HAL_GetTick>
10001b4e:	4602      	mov	r2, r0
10001b50:	68bb      	ldr	r3, [r7, #8]
10001b52:	1ad3      	subs	r3, r2, r3
10001b54:	2b64      	cmp	r3, #100	@ 0x64
10001b56:	d901      	bls.n	10001b5c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10001b58:	2303      	movs	r3, #3
10001b5a:	e0b3      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10001b5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b60:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001b64:	f003 0310 	and.w	r3, r3, #16
10001b68:	2b10      	cmp	r3, #16
10001b6a:	d0ee      	beq.n	10001b4a <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10001b6c:	687b      	ldr	r3, [r7, #4]
10001b6e:	681b      	ldr	r3, [r3, #0]
10001b70:	f003 0308 	and.w	r3, r3, #8
10001b74:	2b00      	cmp	r3, #0
10001b76:	d042      	beq.n	10001bfe <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10001b78:	687b      	ldr	r3, [r7, #4]
10001b7a:	699b      	ldr	r3, [r3, #24]
10001b7c:	2b00      	cmp	r3, #0
10001b7e:	d01f      	beq.n	10001bc0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10001b80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b84:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001b88:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001b8c:	f043 0301 	orr.w	r3, r3, #1
10001b90:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001b94:	f7ff fa02 	bl	10000f9c <HAL_GetTick>
10001b98:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001b9a:	e008      	b.n	10001bae <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001b9c:	f7ff f9fe 	bl	10000f9c <HAL_GetTick>
10001ba0:	4602      	mov	r2, r0
10001ba2:	68bb      	ldr	r3, [r7, #8]
10001ba4:	1ad3      	subs	r3, r2, r3
10001ba6:	2b64      	cmp	r3, #100	@ 0x64
10001ba8:	d901      	bls.n	10001bae <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10001baa:	2303      	movs	r3, #3
10001bac:	e08a      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001bae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bb2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001bb6:	f003 0302 	and.w	r3, r3, #2
10001bba:	2b02      	cmp	r3, #2
10001bbc:	d1ee      	bne.n	10001b9c <HAL_RCC_OscConfig+0x530>
10001bbe:	e01e      	b.n	10001bfe <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10001bc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bc4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001bc8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001bcc:	f023 0301 	bic.w	r3, r3, #1
10001bd0:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001bd4:	f7ff f9e2 	bl	10000f9c <HAL_GetTick>
10001bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001bda:	e008      	b.n	10001bee <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001bdc:	f7ff f9de 	bl	10000f9c <HAL_GetTick>
10001be0:	4602      	mov	r2, r0
10001be2:	68bb      	ldr	r3, [r7, #8]
10001be4:	1ad3      	subs	r3, r2, r3
10001be6:	2b64      	cmp	r3, #100	@ 0x64
10001be8:	d901      	bls.n	10001bee <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10001bea:	2303      	movs	r3, #3
10001bec:	e06a      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001bee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bf2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001bf6:	f003 0302 	and.w	r3, r3, #2
10001bfa:	2b02      	cmp	r3, #2
10001bfc:	d0ee      	beq.n	10001bdc <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10001bfe:	687b      	ldr	r3, [r7, #4]
10001c00:	681b      	ldr	r3, [r3, #0]
10001c02:	f003 0304 	and.w	r3, r3, #4
10001c06:	2b00      	cmp	r3, #0
10001c08:	d02b      	beq.n	10001c62 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001c0a:	4b07      	ldr	r3, [pc, #28]	@ (10001c28 <HAL_RCC_OscConfig+0x5bc>)
10001c0c:	681b      	ldr	r3, [r3, #0]
10001c0e:	4a06      	ldr	r2, [pc, #24]	@ (10001c28 <HAL_RCC_OscConfig+0x5bc>)
10001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10001c14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10001c16:	f7ff f9c1 	bl	10000f9c <HAL_GetTick>
10001c1a:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001c1c:	e00f      	b.n	10001c3e <HAL_RCC_OscConfig+0x5d2>
10001c1e:	bf00      	nop
10001c20:	10020000 	.word	0x10020000
10001c24:	10020024 	.word	0x10020024
10001c28:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10001c2c:	f7ff f9b6 	bl	10000f9c <HAL_GetTick>
10001c30:	4602      	mov	r2, r0
10001c32:	68bb      	ldr	r3, [r7, #8]
10001c34:	1ad3      	subs	r3, r2, r3
10001c36:	2b64      	cmp	r3, #100	@ 0x64
10001c38:	d901      	bls.n	10001c3e <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10001c3a:	2303      	movs	r3, #3
10001c3c:	e042      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001c3e:	4b23      	ldr	r3, [pc, #140]	@ (10001ccc <HAL_RCC_OscConfig+0x660>)
10001c40:	681b      	ldr	r3, [r3, #0]
10001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001c46:	2b00      	cmp	r3, #0
10001c48:	d0f0      	beq.n	10001c2c <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10001c4a:	687b      	ldr	r3, [r7, #4]
10001c4c:	689b      	ldr	r3, [r3, #8]
10001c4e:	4618      	mov	r0, r3
10001c50:	f000 f8a9 	bl	10001da6 <HAL_RCC_LSEConfig>
10001c54:	4603      	mov	r3, r0
10001c56:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10001c58:	7bfb      	ldrb	r3, [r7, #15]
10001c5a:	2b00      	cmp	r3, #0
10001c5c:	d001      	beq.n	10001c62 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10001c5e:	7bfb      	ldrb	r3, [r7, #15]
10001c60:	e030      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10001c62:	687b      	ldr	r3, [r7, #4]
10001c64:	3324      	adds	r3, #36	@ 0x24
10001c66:	4618      	mov	r0, r3
10001c68:	f000 f91a 	bl	10001ea0 <RCC_PLL1_Config>
10001c6c:	4603      	mov	r3, r0
10001c6e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001c70:	7bfb      	ldrb	r3, [r7, #15]
10001c72:	2b00      	cmp	r3, #0
10001c74:	d001      	beq.n	10001c7a <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10001c76:	7bfb      	ldrb	r3, [r7, #15]
10001c78:	e024      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10001c7a:	687b      	ldr	r3, [r7, #4]
10001c7c:	3360      	adds	r3, #96	@ 0x60
10001c7e:	4618      	mov	r0, r3
10001c80:	f001 f96c 	bl	10002f5c <RCCEx_PLL2_Config>
10001c84:	4603      	mov	r3, r0
10001c86:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001c88:	7bfb      	ldrb	r3, [r7, #15]
10001c8a:	2b00      	cmp	r3, #0
10001c8c:	d001      	beq.n	10001c92 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10001c8e:	7bfb      	ldrb	r3, [r7, #15]
10001c90:	e018      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10001c92:	687b      	ldr	r3, [r7, #4]
10001c94:	339c      	adds	r3, #156	@ 0x9c
10001c96:	4618      	mov	r0, r3
10001c98:	f001 fae2 	bl	10003260 <RCCEx_PLL3_Config>
10001c9c:	4603      	mov	r3, r0
10001c9e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001ca0:	7bfb      	ldrb	r3, [r7, #15]
10001ca2:	2b00      	cmp	r3, #0
10001ca4:	d001      	beq.n	10001caa <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10001ca6:	7bfb      	ldrb	r3, [r7, #15]
10001ca8:	e00c      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10001caa:	687b      	ldr	r3, [r7, #4]
10001cac:	33d8      	adds	r3, #216	@ 0xd8
10001cae:	4618      	mov	r0, r3
10001cb0:	f001 fc40 	bl	10003534 <RCCEx_PLL4_Config>
10001cb4:	4603      	mov	r3, r0
10001cb6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001cb8:	7bfb      	ldrb	r3, [r7, #15]
10001cba:	2b00      	cmp	r3, #0
10001cbc:	d001      	beq.n	10001cc2 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10001cbe:	7bfb      	ldrb	r3, [r7, #15]
10001cc0:	e000      	b.n	10001cc4 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10001cc2:	2300      	movs	r3, #0
}
10001cc4:	4618      	mov	r0, r3
10001cc6:	3710      	adds	r7, #16
10001cc8:	46bd      	mov	sp, r7
10001cca:	bd80      	pop	{r7, pc}
10001ccc:	50001000 	.word	0x50001000

10001cd0 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001cd0:	b580      	push	{r7, lr}
10001cd2:	b084      	sub	sp, #16
10001cd4:	af00      	add	r7, sp, #0
10001cd6:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10001cd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001cdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
10001ce0:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ce2:	f7ff f95b 	bl	10000f9c <HAL_GetTick>
10001ce6:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001ce8:	e008      	b.n	10001cfc <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001cea:	f7ff f957 	bl	10000f9c <HAL_GetTick>
10001cee:	4602      	mov	r2, r0
10001cf0:	68fb      	ldr	r3, [r7, #12]
10001cf2:	1ad3      	subs	r3, r2, r3
10001cf4:	2b64      	cmp	r3, #100	@ 0x64
10001cf6:	d901      	bls.n	10001cfc <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10001cf8:	2303      	movs	r3, #3
10001cfa:	e050      	b.n	10001d9e <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001cfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d00:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001d0c:	d0ed      	beq.n	10001cea <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10001d0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d12:	f44f 6290 	mov.w	r2, #1152	@ 0x480
10001d16:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10001d18:	687b      	ldr	r3, [r7, #4]
10001d1a:	2b00      	cmp	r3, #0
10001d1c:	d03e      	beq.n	10001d9c <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10001d1e:	687b      	ldr	r3, [r7, #4]
10001d20:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10001d24:	d108      	bne.n	10001d38 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001d26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d2a:	68db      	ldr	r3, [r3, #12]
10001d2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10001d34:	60d3      	str	r3, [r2, #12]
10001d36:	e013      	b.n	10001d60 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10001d38:	687b      	ldr	r3, [r7, #4]
10001d3a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
10001d3e:	d10f      	bne.n	10001d60 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10001d40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d44:	68db      	ldr	r3, [r3, #12]
10001d46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10001d4e:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001d50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d54:	68db      	ldr	r3, [r3, #12]
10001d56:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10001d5e:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10001d60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d64:	68db      	ldr	r3, [r3, #12]
10001d66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10001d6e:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001d70:	f7ff f914 	bl	10000f9c <HAL_GetTick>
10001d74:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001d76:	e008      	b.n	10001d8a <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001d78:	f7ff f910 	bl	10000f9c <HAL_GetTick>
10001d7c:	4602      	mov	r2, r0
10001d7e:	68fb      	ldr	r3, [r7, #12]
10001d80:	1ad3      	subs	r3, r2, r3
10001d82:	2b64      	cmp	r3, #100	@ 0x64
10001d84:	d901      	bls.n	10001d8a <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10001d86:	2303      	movs	r3, #3
10001d88:	e009      	b.n	10001d9e <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001d8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d8e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001d9a:	d1ed      	bne.n	10001d78 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001d9c:	2300      	movs	r3, #0
}
10001d9e:	4618      	mov	r0, r3
10001da0:	3710      	adds	r7, #16
10001da2:	46bd      	mov	sp, r7
10001da4:	bd80      	pop	{r7, pc}

10001da6 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10001da6:	b580      	push	{r7, lr}
10001da8:	b084      	sub	sp, #16
10001daa:	af00      	add	r7, sp, #0
10001dac:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001dae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001db2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001db6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001dba:	f023 0301 	bic.w	r3, r3, #1
10001dbe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001dc2:	f7ff f8eb 	bl	10000f9c <HAL_GetTick>
10001dc6:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001dc8:	e00a      	b.n	10001de0 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001dca:	f7ff f8e7 	bl	10000f9c <HAL_GetTick>
10001dce:	4602      	mov	r2, r0
10001dd0:	68fb      	ldr	r3, [r7, #12]
10001dd2:	1ad3      	subs	r3, r2, r3
10001dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
10001dd8:	4293      	cmp	r3, r2
10001dda:	d901      	bls.n	10001de0 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001ddc:	2303      	movs	r3, #3
10001dde:	e05b      	b.n	10001e98 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001de0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001de4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001de8:	f003 0304 	and.w	r3, r3, #4
10001dec:	2b04      	cmp	r3, #4
10001dee:	d0ec      	beq.n	10001dca <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001df0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001df4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001df8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001dfc:	f023 030a 	bic.w	r3, r3, #10
10001e00:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10001e04:	687b      	ldr	r3, [r7, #4]
10001e06:	2b00      	cmp	r3, #0
10001e08:	d045      	beq.n	10001e96 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10001e0a:	687b      	ldr	r3, [r7, #4]
10001e0c:	2b03      	cmp	r3, #3
10001e0e:	d10a      	bne.n	10001e26 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001e10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001e18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e1c:	f043 0302 	orr.w	r3, r3, #2
10001e20:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10001e24:	e016      	b.n	10001e54 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10001e26:	687b      	ldr	r3, [r7, #4]
10001e28:	2b0b      	cmp	r3, #11
10001e2a:	d113      	bne.n	10001e54 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10001e2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001e34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e38:	f043 0308 	orr.w	r3, r3, #8
10001e3c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001e40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001e48:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e4c:	f043 0302 	orr.w	r3, r3, #2
10001e50:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001e54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001e5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e60:	f043 0301 	orr.w	r3, r3, #1
10001e64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001e68:	f7ff f898 	bl	10000f9c <HAL_GetTick>
10001e6c:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001e6e:	e00a      	b.n	10001e86 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001e70:	f7ff f894 	bl	10000f9c <HAL_GetTick>
10001e74:	4602      	mov	r2, r0
10001e76:	68fb      	ldr	r3, [r7, #12]
10001e78:	1ad3      	subs	r3, r2, r3
10001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
10001e7e:	4293      	cmp	r3, r2
10001e80:	d901      	bls.n	10001e86 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10001e82:	2303      	movs	r3, #3
10001e84:	e008      	b.n	10001e98 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001e86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001e8e:	f003 0304 	and.w	r3, r3, #4
10001e92:	2b04      	cmp	r3, #4
10001e94:	d1ec      	bne.n	10001e70 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10001e96:	2300      	movs	r3, #0
}
10001e98:	4618      	mov	r0, r3
10001e9a:	3710      	adds	r7, #16
10001e9c:	46bd      	mov	sp, r7
10001e9e:	bd80      	pop	{r7, pc}

10001ea0 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001ea0:	b580      	push	{r7, lr}
10001ea2:	b084      	sub	sp, #16
10001ea4:	af00      	add	r7, sp, #0
10001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10001ea8:	687b      	ldr	r3, [r7, #4]
10001eaa:	681b      	ldr	r3, [r3, #0]
10001eac:	2b00      	cmp	r3, #0
10001eae:	f000 8174 	beq.w	1000219a <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001eb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001eb6:	6a1b      	ldr	r3, [r3, #32]
10001eb8:	f003 0303 	and.w	r3, r3, #3
10001ebc:	2b02      	cmp	r3, #2
10001ebe:	d108      	bne.n	10001ed2 <RCC_PLL1_Config+0x32>
10001ec0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ec4:	6a1b      	ldr	r3, [r3, #32]
10001ec6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001ece:	f000 8162 	beq.w	10002196 <RCC_PLL1_Config+0x2f6>
10001ed2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ed6:	6a1b      	ldr	r3, [r3, #32]
10001ed8:	f003 0303 	and.w	r3, r3, #3
10001edc:	2b03      	cmp	r3, #3
10001ede:	d108      	bne.n	10001ef2 <RCC_PLL1_Config+0x52>
10001ee0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ee4:	6a1b      	ldr	r3, [r3, #32]
10001ee6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001eea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001eee:	f000 8152 	beq.w	10002196 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10001ef2:	687b      	ldr	r3, [r7, #4]
10001ef4:	681b      	ldr	r3, [r3, #0]
10001ef6:	2b02      	cmp	r3, #2
10001ef8:	f040 8123 	bne.w	10002142 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001efc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001f04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001f0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10001f10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001f18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001f1c:	f023 0301 	bic.w	r3, r3, #1
10001f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001f24:	f7ff f83a 	bl	10000f9c <HAL_GetTick>
10001f28:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001f2a:	e008      	b.n	10001f3e <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001f2c:	f7ff f836 	bl	10000f9c <HAL_GetTick>
10001f30:	4602      	mov	r2, r0
10001f32:	68fb      	ldr	r3, [r7, #12]
10001f34:	1ad3      	subs	r3, r2, r3
10001f36:	2b64      	cmp	r3, #100	@ 0x64
10001f38:	d901      	bls.n	10001f3e <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001f3a:	2303      	movs	r3, #3
10001f3c:	e12e      	b.n	1000219c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001f3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001f46:	f003 0302 	and.w	r3, r3, #2
10001f4a:	2b02      	cmp	r3, #2
10001f4c:	d0ee      	beq.n	10001f2c <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10001f4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001f54:	f003 0307 	and.w	r3, r3, #7
10001f58:	2b02      	cmp	r3, #2
10001f5a:	d112      	bne.n	10001f82 <RCC_PLL1_Config+0xe2>
10001f5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001f62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001f66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001f6a:	d10a      	bne.n	10001f82 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001f6c:	687b      	ldr	r3, [r7, #4]
10001f6e:	685a      	ldr	r2, [r3, #4]
10001f70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001f76:	f003 0303 	and.w	r3, r3, #3
10001f7a:	429a      	cmp	r2, r3
10001f7c:	d00c      	beq.n	10001f98 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10001f7e:	2301      	movs	r3, #1
10001f80:	e10c      	b.n	1000219c <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10001f82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001f88:	f023 0203 	bic.w	r2, r3, #3
10001f8c:	687b      	ldr	r3, [r7, #4]
10001f8e:	685b      	ldr	r3, [r3, #4]
10001f90:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001f94:	4313      	orrs	r3, r2
10001f96:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001f98:	e008      	b.n	10001fac <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001f9a:	f7fe ffff 	bl	10000f9c <HAL_GetTick>
10001f9e:	4602      	mov	r2, r0
10001fa0:	68fb      	ldr	r3, [r7, #12]
10001fa2:	1ad3      	subs	r3, r2, r3
10001fa4:	2b64      	cmp	r3, #100	@ 0x64
10001fa6:	d901      	bls.n	10001fac <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10001fa8:	2303      	movs	r3, #3
10001faa:	e0f7      	b.n	1000219c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001fac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001fb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001fba:	d1ee      	bne.n	10001f9a <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001fbc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fc0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10001fc4:	4b77      	ldr	r3, [pc, #476]	@ (100021a4 <RCC_PLL1_Config+0x304>)
10001fc6:	4013      	ands	r3, r2
10001fc8:	687a      	ldr	r2, [r7, #4]
10001fca:	68d2      	ldr	r2, [r2, #12]
10001fcc:	1e51      	subs	r1, r2, #1
10001fce:	687a      	ldr	r2, [r7, #4]
10001fd0:	6892      	ldr	r2, [r2, #8]
10001fd2:	3a01      	subs	r2, #1
10001fd4:	0412      	lsls	r2, r2, #16
10001fd6:	430a      	orrs	r2, r1
10001fd8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001fdc:	4313      	orrs	r3, r2
10001fde:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10001fe2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10001fea:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10001fee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10001ff2:	687a      	ldr	r2, [r7, #4]
10001ff4:	6912      	ldr	r2, [r2, #16]
10001ff6:	1e51      	subs	r1, r2, #1
10001ff8:	687a      	ldr	r2, [r7, #4]
10001ffa:	6952      	ldr	r2, [r2, #20]
10001ffc:	3a01      	subs	r2, #1
10001ffe:	0212      	lsls	r2, r2, #8
10002000:	4311      	orrs	r1, r2
10002002:	687a      	ldr	r2, [r7, #4]
10002004:	6992      	ldr	r2, [r2, #24]
10002006:	3a01      	subs	r2, #1
10002008:	0412      	lsls	r2, r2, #16
1000200a:	430a      	orrs	r2, r1
1000200c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002010:	4313      	orrs	r3, r2
10002012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10002016:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000201a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000201e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002026:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000202a:	687b      	ldr	r3, [r7, #4]
1000202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000202e:	2b02      	cmp	r3, #2
10002030:	d003      	beq.n	1000203a <RCC_PLL1_Config+0x19a>
10002032:	687b      	ldr	r3, [r7, #4]
10002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002036:	2b00      	cmp	r3, #0
10002038:	d10c      	bne.n	10002054 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000203a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000203e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10002042:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000204a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000204e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
10002052:	e00f      	b.n	10002074 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10002054:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000205c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002060:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002064:	687a      	ldr	r2, [r7, #4]
10002066:	6a12      	ldr	r2, [r2, #32]
10002068:	00d2      	lsls	r2, r2, #3
1000206a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000206e:	4313      	orrs	r3, r2
10002070:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10002074:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000207c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002084:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002088:	687b      	ldr	r3, [r7, #4]
1000208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000208c:	2b02      	cmp	r3, #2
1000208e:	d124      	bne.n	100020da <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10002090:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
10002098:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
1000209c:	687b      	ldr	r3, [r7, #4]
1000209e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100020a0:	687b      	ldr	r3, [r7, #4]
100020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100020a4:	4319      	orrs	r1, r3
100020a6:	687b      	ldr	r3, [r7, #4]
100020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100020aa:	4319      	orrs	r1, r3
100020ac:	687b      	ldr	r3, [r7, #4]
100020ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100020b0:	4319      	orrs	r1, r3
100020b2:	687b      	ldr	r3, [r7, #4]
100020b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100020b6:	041b      	lsls	r3, r3, #16
100020b8:	430b      	orrs	r3, r1
100020ba:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100020be:	4313      	orrs	r3, r2
100020c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
100020c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100020cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100020d0:	f043 0304 	orr.w	r3, r3, #4
100020d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
100020d8:	e009      	b.n	100020ee <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100020da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100020e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100020e6:	f023 0304 	bic.w	r3, r3, #4
100020ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100020ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100020f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100020fa:	f043 0301 	orr.w	r3, r3, #1
100020fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002102:	f7fe ff4b 	bl	10000f9c <HAL_GetTick>
10002106:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002108:	e008      	b.n	1000211c <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000210a:	f7fe ff47 	bl	10000f9c <HAL_GetTick>
1000210e:	4602      	mov	r2, r0
10002110:	68fb      	ldr	r3, [r7, #12]
10002112:	1ad3      	subs	r3, r2, r3
10002114:	2b64      	cmp	r3, #100	@ 0x64
10002116:	d901      	bls.n	1000211c <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10002118:	2303      	movs	r3, #3
1000211a:	e03f      	b.n	1000219c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000211c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002124:	f003 0302 	and.w	r3, r3, #2
10002128:	2b02      	cmp	r3, #2
1000212a:	d1ee      	bne.n	1000210a <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000212c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002134:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002138:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
1000213c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10002140:	e02b      	b.n	1000219a <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002142:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000214a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000214e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002152:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10002156:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000215a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000215e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002162:	f023 0301 	bic.w	r3, r3, #1
10002166:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000216a:	f7fe ff17 	bl	10000f9c <HAL_GetTick>
1000216e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002170:	e008      	b.n	10002184 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002172:	f7fe ff13 	bl	10000f9c <HAL_GetTick>
10002176:	4602      	mov	r2, r0
10002178:	68fb      	ldr	r3, [r7, #12]
1000217a:	1ad3      	subs	r3, r2, r3
1000217c:	2b64      	cmp	r3, #100	@ 0x64
1000217e:	d901      	bls.n	10002184 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10002180:	2303      	movs	r3, #3
10002182:	e00b      	b.n	1000219c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002184:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000218c:	f003 0302 	and.w	r3, r3, #2
10002190:	2b02      	cmp	r3, #2
10002192:	d0ee      	beq.n	10002172 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10002194:	e001      	b.n	1000219a <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002196:	2301      	movs	r3, #1
10002198:	e000      	b.n	1000219c <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000219a:	2300      	movs	r3, #0

}
1000219c:	4618      	mov	r0, r3
1000219e:	3710      	adds	r7, #16
100021a0:	46bd      	mov	sp, r7
100021a2:	bd80      	pop	{r7, pc}
100021a4:	ffc0fe00 	.word	0xffc0fe00

100021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
100021a8:	b580      	push	{r7, lr}
100021aa:	b084      	sub	sp, #16
100021ac:	af00      	add	r7, sp, #0
100021ae:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100021b0:	2300      	movs	r3, #0
100021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100021b4:	687b      	ldr	r3, [r7, #4]
100021b6:	2b00      	cmp	r3, #0
100021b8:	d101      	bne.n	100021be <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
100021ba:	2301      	movs	r3, #1
100021bc:	e102      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
100021be:	687b      	ldr	r3, [r7, #4]
100021c0:	681b      	ldr	r3, [r3, #0]
100021c2:	f003 0301 	and.w	r3, r3, #1
100021c6:	2b00      	cmp	r3, #0
100021c8:	d00b      	beq.n	100021e2 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
100021ca:	687b      	ldr	r3, [r7, #4]
100021cc:	3304      	adds	r3, #4
100021ce:	4618      	mov	r0, r3
100021d0:	f000 f8fc 	bl	100023cc <RCC_MPUConfig>
100021d4:	4603      	mov	r3, r0
100021d6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100021d8:	7bfb      	ldrb	r3, [r7, #15]
100021da:	2b00      	cmp	r3, #0
100021dc:	d001      	beq.n	100021e2 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
100021de:	7bfb      	ldrb	r3, [r7, #15]
100021e0:	e0f0      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
100021e2:	687b      	ldr	r3, [r7, #4]
100021e4:	681b      	ldr	r3, [r3, #0]
100021e6:	f003 0302 	and.w	r3, r3, #2
100021ea:	2b00      	cmp	r3, #0
100021ec:	d00b      	beq.n	10002206 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
100021ee:	687b      	ldr	r3, [r7, #4]
100021f0:	330c      	adds	r3, #12
100021f2:	4618      	mov	r0, r3
100021f4:	f000 f960 	bl	100024b8 <RCC_AXISSConfig>
100021f8:	4603      	mov	r3, r0
100021fa:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100021fc:	7bfb      	ldrb	r3, [r7, #15]
100021fe:	2b00      	cmp	r3, #0
10002200:	d001      	beq.n	10002206 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10002202:	7bfb      	ldrb	r3, [r7, #15]
10002204:	e0de      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10002206:	687b      	ldr	r3, [r7, #4]
10002208:	681b      	ldr	r3, [r3, #0]
1000220a:	f003 0304 	and.w	r3, r3, #4
1000220e:	2b00      	cmp	r3, #0
10002210:	d00b      	beq.n	1000222a <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10002212:	687b      	ldr	r3, [r7, #4]
10002214:	3314      	adds	r3, #20
10002216:	4618      	mov	r0, r3
10002218:	f000 f9e6 	bl	100025e8 <RCC_MCUConfig>
1000221c:	4603      	mov	r3, r0
1000221e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002220:	7bfb      	ldrb	r3, [r7, #15]
10002222:	2b00      	cmp	r3, #0
10002224:	d001      	beq.n	1000222a <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10002226:	7bfb      	ldrb	r3, [r7, #15]
10002228:	e0cc      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000222a:	687b      	ldr	r3, [r7, #4]
1000222c:	681b      	ldr	r3, [r3, #0]
1000222e:	f003 0308 	and.w	r3, r3, #8
10002232:	2b00      	cmp	r3, #0
10002234:	d020      	beq.n	10002278 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10002236:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000223c:	f023 0207 	bic.w	r2, r3, #7
10002240:	687b      	ldr	r3, [r7, #4]
10002242:	69db      	ldr	r3, [r3, #28]
10002244:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002248:	4313      	orrs	r3, r2
1000224a:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000224c:	f7fe fea6 	bl	10000f9c <HAL_GetTick>
10002250:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002252:	e009      	b.n	10002268 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002254:	f7fe fea2 	bl	10000f9c <HAL_GetTick>
10002258:	4602      	mov	r2, r0
1000225a:	68bb      	ldr	r3, [r7, #8]
1000225c:	1ad3      	subs	r3, r2, r3
1000225e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002262:	d901      	bls.n	10002268 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10002264:	2303      	movs	r3, #3
10002266:	e0ad      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002268:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000226c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000226e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002276:	d1ed      	bne.n	10002254 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10002278:	687b      	ldr	r3, [r7, #4]
1000227a:	681b      	ldr	r3, [r3, #0]
1000227c:	f003 0310 	and.w	r3, r3, #16
10002280:	2b00      	cmp	r3, #0
10002282:	d020      	beq.n	100022c6 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10002284:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1000228a:	f023 0207 	bic.w	r2, r3, #7
1000228e:	687b      	ldr	r3, [r7, #4]
10002290:	6a1b      	ldr	r3, [r3, #32]
10002292:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002296:	4313      	orrs	r3, r2
10002298:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000229a:	f7fe fe7f 	bl	10000f9c <HAL_GetTick>
1000229e:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100022a0:	e009      	b.n	100022b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100022a2:	f7fe fe7b 	bl	10000f9c <HAL_GetTick>
100022a6:	4602      	mov	r2, r0
100022a8:	68bb      	ldr	r3, [r7, #8]
100022aa:	1ad3      	subs	r3, r2, r3
100022ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100022b0:	d901      	bls.n	100022b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100022b2:	2303      	movs	r3, #3
100022b4:	e086      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100022b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100022bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100022c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100022c4:	d1ed      	bne.n	100022a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
100022c6:	687b      	ldr	r3, [r7, #4]
100022c8:	681b      	ldr	r3, [r3, #0]
100022ca:	f003 0320 	and.w	r3, r3, #32
100022ce:	2b00      	cmp	r3, #0
100022d0:	d023      	beq.n	1000231a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
100022d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022d6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
100022da:	f023 0207 	bic.w	r2, r3, #7
100022de:	687b      	ldr	r3, [r7, #4]
100022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100022e2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100022e6:	4313      	orrs	r3, r2
100022e8:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100022ec:	f7fe fe56 	bl	10000f9c <HAL_GetTick>
100022f0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100022f2:	e009      	b.n	10002308 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100022f4:	f7fe fe52 	bl	10000f9c <HAL_GetTick>
100022f8:	4602      	mov	r2, r0
100022fa:	68bb      	ldr	r3, [r7, #8]
100022fc:	1ad3      	subs	r3, r2, r3
100022fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002302:	d901      	bls.n	10002308 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10002304:	2303      	movs	r3, #3
10002306:	e05d      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002308:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000230c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10002310:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002314:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002318:	d1ec      	bne.n	100022f4 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000231a:	687b      	ldr	r3, [r7, #4]
1000231c:	681b      	ldr	r3, [r3, #0]
1000231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10002322:	2b00      	cmp	r3, #0
10002324:	d023      	beq.n	1000236e <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10002326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000232a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
1000232e:	f023 0207 	bic.w	r2, r3, #7
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002336:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000233a:	4313      	orrs	r3, r2
1000233c:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002340:	f7fe fe2c 	bl	10000f9c <HAL_GetTick>
10002344:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002346:	e009      	b.n	1000235c <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002348:	f7fe fe28 	bl	10000f9c <HAL_GetTick>
1000234c:	4602      	mov	r2, r0
1000234e:	68bb      	ldr	r3, [r7, #8]
10002350:	1ad3      	subs	r3, r2, r3
10002352:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002356:	d901      	bls.n	1000235c <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10002358:	2303      	movs	r3, #3
1000235a:	e033      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000235c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002360:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10002364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000236c:	d1ec      	bne.n	10002348 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
1000236e:	687b      	ldr	r3, [r7, #4]
10002370:	681b      	ldr	r3, [r3, #0]
10002372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10002376:	2b00      	cmp	r3, #0
10002378:	d023      	beq.n	100023c2 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
1000237a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000237e:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10002382:	f023 0207 	bic.w	r2, r3, #7
10002386:	687b      	ldr	r3, [r7, #4]
10002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000238a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000238e:	4313      	orrs	r3, r2
10002390:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002394:	f7fe fe02 	bl	10000f9c <HAL_GetTick>
10002398:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000239a:	e009      	b.n	100023b0 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000239c:	f7fe fdfe 	bl	10000f9c <HAL_GetTick>
100023a0:	4602      	mov	r2, r0
100023a2:	68bb      	ldr	r3, [r7, #8]
100023a4:	1ad3      	subs	r3, r2, r3
100023a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100023aa:	d901      	bls.n	100023b0 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
100023ac:	2303      	movs	r3, #3
100023ae:	e009      	b.n	100023c4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100023b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023b4:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
100023b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100023bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100023c0:	d1ec      	bne.n	1000239c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
100023c2:	2300      	movs	r3, #0
}
100023c4:	4618      	mov	r0, r3
100023c6:	3710      	adds	r7, #16
100023c8:	46bd      	mov	sp, r7
100023ca:	bd80      	pop	{r7, pc}

100023cc <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
100023cc:	b580      	push	{r7, lr}
100023ce:	b084      	sub	sp, #16
100023d0:	af00      	add	r7, sp, #0
100023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
100023d4:	687b      	ldr	r3, [r7, #4]
100023d6:	681b      	ldr	r3, [r3, #0]
100023d8:	2b03      	cmp	r3, #3
100023da:	d840      	bhi.n	1000245e <RCC_MPUConfig+0x92>
100023dc:	a201      	add	r2, pc, #4	@ (adr r2, 100023e4 <RCC_MPUConfig+0x18>)
100023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100023e2:	bf00      	nop
100023e4:	100023f5 	.word	0x100023f5
100023e8:	10002409 	.word	0x10002409
100023ec:	1000241f 	.word	0x1000241f
100023f0:	10002433 	.word	0x10002433
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100023f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023f8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100023fc:	f003 0301 	and.w	r3, r3, #1
10002400:	2b01      	cmp	r3, #1
10002402:	d02e      	beq.n	10002462 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10002404:	2301      	movs	r3, #1
10002406:	e053      	b.n	100024b0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002408:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000240c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002418:	d025      	beq.n	10002466 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000241a:	2301      	movs	r3, #1
1000241c:	e048      	b.n	100024b0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000241e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002426:	f003 0302 	and.w	r3, r3, #2
1000242a:	2b02      	cmp	r3, #2
1000242c:	d01d      	beq.n	1000246a <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
1000242e:	2301      	movs	r3, #1
10002430:	e03e      	b.n	100024b0 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002432:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000243a:	f003 0302 	and.w	r3, r3, #2
1000243e:	2b02      	cmp	r3, #2
10002440:	d001      	beq.n	10002446 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10002442:	2301      	movs	r3, #1
10002444:	e034      	b.n	100024b0 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10002446:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000244c:	f023 0207 	bic.w	r2, r3, #7
10002450:	687b      	ldr	r3, [r7, #4]
10002452:	685b      	ldr	r3, [r3, #4]
10002454:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002458:	4313      	orrs	r3, r2
1000245a:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
1000245c:	e006      	b.n	1000246c <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
1000245e:	2301      	movs	r3, #1
10002460:	e026      	b.n	100024b0 <RCC_MPUConfig+0xe4>
      break;
10002462:	bf00      	nop
10002464:	e002      	b.n	1000246c <RCC_MPUConfig+0xa0>
      break;
10002466:	bf00      	nop
10002468:	e000      	b.n	1000246c <RCC_MPUConfig+0xa0>
      break;
1000246a:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
1000246c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002470:	6a1b      	ldr	r3, [r3, #32]
10002472:	f023 0203 	bic.w	r2, r3, #3
10002476:	687b      	ldr	r3, [r7, #4]
10002478:	681b      	ldr	r3, [r3, #0]
1000247a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000247e:	4313      	orrs	r3, r2
10002480:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002482:	f7fe fd8b 	bl	10000f9c <HAL_GetTick>
10002486:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002488:	e009      	b.n	1000249e <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000248a:	f7fe fd87 	bl	10000f9c <HAL_GetTick>
1000248e:	4602      	mov	r2, r0
10002490:	68fb      	ldr	r3, [r7, #12]
10002492:	1ad3      	subs	r3, r2, r3
10002494:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002498:	d901      	bls.n	1000249e <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
1000249a:	2303      	movs	r3, #3
1000249c:	e008      	b.n	100024b0 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000249e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024a2:	6a1b      	ldr	r3, [r3, #32]
100024a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100024a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100024ac:	d1ed      	bne.n	1000248a <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
100024ae:	2300      	movs	r3, #0
}
100024b0:	4618      	mov	r0, r3
100024b2:	3710      	adds	r7, #16
100024b4:	46bd      	mov	sp, r7
100024b6:	bd80      	pop	{r7, pc}

100024b8 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
100024b8:	b580      	push	{r7, lr}
100024ba:	b084      	sub	sp, #16
100024bc:	af00      	add	r7, sp, #0
100024be:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
100024c0:	687b      	ldr	r3, [r7, #4]
100024c2:	681b      	ldr	r3, [r3, #0]
100024c4:	2b02      	cmp	r3, #2
100024c6:	d01b      	beq.n	10002500 <RCC_AXISSConfig+0x48>
100024c8:	2b02      	cmp	r3, #2
100024ca:	d823      	bhi.n	10002514 <RCC_AXISSConfig+0x5c>
100024cc:	2b00      	cmp	r3, #0
100024ce:	d002      	beq.n	100024d6 <RCC_AXISSConfig+0x1e>
100024d0:	2b01      	cmp	r3, #1
100024d2:	d00a      	beq.n	100024ea <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
100024d4:	e01e      	b.n	10002514 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100024d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024da:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100024de:	f003 0301 	and.w	r3, r3, #1
100024e2:	2b01      	cmp	r3, #1
100024e4:	d018      	beq.n	10002518 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
100024e6:	2301      	movs	r3, #1
100024e8:	e079      	b.n	100025de <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100024ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024ee:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100024f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100024fa:	d00f      	beq.n	1000251c <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
100024fc:	2301      	movs	r3, #1
100024fe:	e06e      	b.n	100025de <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002500:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002508:	f003 0302 	and.w	r3, r3, #2
1000250c:	2b02      	cmp	r3, #2
1000250e:	d007      	beq.n	10002520 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10002510:	2301      	movs	r3, #1
10002512:	e064      	b.n	100025de <RCC_AXISSConfig+0x126>
      break;
10002514:	bf00      	nop
10002516:	e004      	b.n	10002522 <RCC_AXISSConfig+0x6a>
      break;
10002518:	bf00      	nop
1000251a:	e002      	b.n	10002522 <RCC_AXISSConfig+0x6a>
      break;
1000251c:	bf00      	nop
1000251e:	e000      	b.n	10002522 <RCC_AXISSConfig+0x6a>
      break;
10002520:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10002522:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002528:	f023 0207 	bic.w	r2, r3, #7
1000252c:	687b      	ldr	r3, [r7, #4]
1000252e:	681b      	ldr	r3, [r3, #0]
10002530:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002534:	4313      	orrs	r3, r2
10002536:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10002538:	687b      	ldr	r3, [r7, #4]
1000253a:	681b      	ldr	r3, [r3, #0]
1000253c:	2b03      	cmp	r3, #3
1000253e:	d016      	beq.n	1000256e <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002540:	f7fe fd2c 	bl	10000f9c <HAL_GetTick>
10002544:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002546:	e009      	b.n	1000255c <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002548:	f7fe fd28 	bl	10000f9c <HAL_GetTick>
1000254c:	4602      	mov	r2, r0
1000254e:	68fb      	ldr	r3, [r7, #12]
10002550:	1ad3      	subs	r3, r2, r3
10002552:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002556:	d901      	bls.n	1000255c <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10002558:	2303      	movs	r3, #3
1000255a:	e040      	b.n	100025de <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000255c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000256a:	d1ed      	bne.n	10002548 <RCC_AXISSConfig+0x90>
1000256c:	e015      	b.n	1000259a <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000256e:	f7fe fd15 	bl	10000f9c <HAL_GetTick>
10002572:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002574:	e009      	b.n	1000258a <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002576:	f7fe fd11 	bl	10000f9c <HAL_GetTick>
1000257a:	4602      	mov	r2, r0
1000257c:	68fb      	ldr	r3, [r7, #12]
1000257e:	1ad3      	subs	r3, r2, r3
10002580:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002584:	d901      	bls.n	1000258a <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10002586:	2303      	movs	r3, #3
10002588:	e029      	b.n	100025de <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
1000258a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002598:	d0ed      	beq.n	10002576 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
1000259a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100025a0:	f023 0207 	bic.w	r2, r3, #7
100025a4:	687b      	ldr	r3, [r7, #4]
100025a6:	685b      	ldr	r3, [r3, #4]
100025a8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100025ac:	4313      	orrs	r3, r2
100025ae:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100025b0:	f7fe fcf4 	bl	10000f9c <HAL_GetTick>
100025b4:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100025b6:	e009      	b.n	100025cc <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100025b8:	f7fe fcf0 	bl	10000f9c <HAL_GetTick>
100025bc:	4602      	mov	r2, r0
100025be:	68fb      	ldr	r3, [r7, #12]
100025c0:	1ad3      	subs	r3, r2, r3
100025c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100025c6:	d901      	bls.n	100025cc <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
100025c8:	2303      	movs	r3, #3
100025ca:	e008      	b.n	100025de <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100025cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100025d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100025d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100025da:	d1ed      	bne.n	100025b8 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
100025dc:	2300      	movs	r3, #0
}
100025de:	4618      	mov	r0, r3
100025e0:	3710      	adds	r7, #16
100025e2:	46bd      	mov	sp, r7
100025e4:	bd80      	pop	{r7, pc}
	...

100025e8 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
100025e8:	b580      	push	{r7, lr}
100025ea:	b084      	sub	sp, #16
100025ec:	af00      	add	r7, sp, #0
100025ee:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
100025f0:	687b      	ldr	r3, [r7, #4]
100025f2:	681b      	ldr	r3, [r3, #0]
100025f4:	2b03      	cmp	r3, #3
100025f6:	d834      	bhi.n	10002662 <RCC_MCUConfig+0x7a>
100025f8:	a201      	add	r2, pc, #4	@ (adr r2, 10002600 <RCC_MCUConfig+0x18>)
100025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100025fe:	bf00      	nop
10002600:	10002611 	.word	0x10002611
10002604:	10002625 	.word	0x10002625
10002608:	1000263b 	.word	0x1000263b
1000260c:	1000264f 	.word	0x1000264f
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002610:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002614:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002618:	f003 0301 	and.w	r3, r3, #1
1000261c:	2b01      	cmp	r3, #1
1000261e:	d022      	beq.n	10002666 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10002620:	2301      	movs	r3, #1
10002622:	e081      	b.n	10002728 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002624:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002628:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002634:	d019      	beq.n	1000266a <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10002636:	2301      	movs	r3, #1
10002638:	e076      	b.n	10002728 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000263a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000263e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002642:	f003 0310 	and.w	r3, r3, #16
10002646:	2b10      	cmp	r3, #16
10002648:	d011      	beq.n	1000266e <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
1000264a:	2301      	movs	r3, #1
1000264c:	e06c      	b.n	10002728 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000264e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002652:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002656:	f003 0302 	and.w	r3, r3, #2
1000265a:	2b02      	cmp	r3, #2
1000265c:	d009      	beq.n	10002672 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
1000265e:	2301      	movs	r3, #1
10002660:	e062      	b.n	10002728 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10002662:	bf00      	nop
10002664:	e006      	b.n	10002674 <RCC_MCUConfig+0x8c>
      break;
10002666:	bf00      	nop
10002668:	e004      	b.n	10002674 <RCC_MCUConfig+0x8c>
      break;
1000266a:	bf00      	nop
1000266c:	e002      	b.n	10002674 <RCC_MCUConfig+0x8c>
      break;
1000266e:	bf00      	nop
10002670:	e000      	b.n	10002674 <RCC_MCUConfig+0x8c>
      break;
10002672:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10002674:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000267a:	f023 0203 	bic.w	r2, r3, #3
1000267e:	687b      	ldr	r3, [r7, #4]
10002680:	681b      	ldr	r3, [r3, #0]
10002682:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002686:	4313      	orrs	r3, r2
10002688:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000268a:	f7fe fc87 	bl	10000f9c <HAL_GetTick>
1000268e:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002690:	e009      	b.n	100026a6 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002692:	f7fe fc83 	bl	10000f9c <HAL_GetTick>
10002696:	4602      	mov	r2, r0
10002698:	68fb      	ldr	r3, [r7, #12]
1000269a:	1ad3      	subs	r3, r2, r3
1000269c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100026a0:	d901      	bls.n	100026a6 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
100026a2:	2303      	movs	r3, #3
100026a4:	e040      	b.n	10002728 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100026a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100026ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100026b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100026b4:	d1ed      	bne.n	10002692 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100026b6:	f000 fbb5 	bl	10002e24 <HAL_RCC_GetSystemCoreClockFreq>
100026ba:	4603      	mov	r3, r0
100026bc:	4a1c      	ldr	r2, [pc, #112]	@ (10002730 <RCC_MCUConfig+0x148>)
100026be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100026c0:	4b1c      	ldr	r3, [pc, #112]	@ (10002734 <RCC_MCUConfig+0x14c>)
100026c2:	681b      	ldr	r3, [r3, #0]
100026c4:	4618      	mov	r0, r3
100026c6:	f7fe fc1f 	bl	10000f08 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
100026ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026ce:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100026d2:	f023 020f 	bic.w	r2, r3, #15
100026d6:	687b      	ldr	r3, [r7, #4]
100026d8:	685b      	ldr	r3, [r3, #4]
100026da:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100026de:	4313      	orrs	r3, r2
100026e0:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100026e4:	f7fe fc5a 	bl	10000f9c <HAL_GetTick>
100026e8:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100026ea:	e009      	b.n	10002700 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100026ec:	f7fe fc56 	bl	10000f9c <HAL_GetTick>
100026f0:	4602      	mov	r2, r0
100026f2:	68fb      	ldr	r3, [r7, #12]
100026f4:	1ad3      	subs	r3, r2, r3
100026f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100026fa:	d901      	bls.n	10002700 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
100026fc:	2303      	movs	r3, #3
100026fe:	e013      	b.n	10002728 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002700:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002704:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10002708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000270c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002710:	d1ec      	bne.n	100026ec <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002712:	f000 fb87 	bl	10002e24 <HAL_RCC_GetSystemCoreClockFreq>
10002716:	4603      	mov	r3, r0
10002718:	4a05      	ldr	r2, [pc, #20]	@ (10002730 <RCC_MCUConfig+0x148>)
1000271a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
1000271c:	4b05      	ldr	r3, [pc, #20]	@ (10002734 <RCC_MCUConfig+0x14c>)
1000271e:	681b      	ldr	r3, [r3, #0]
10002720:	4618      	mov	r0, r3
10002722:	f7fe fbf1 	bl	10000f08 <HAL_InitTick>
#endif

  return HAL_OK;
10002726:	2300      	movs	r3, #0
}
10002728:	4618      	mov	r0, r3
1000272a:	3710      	adds	r7, #16
1000272c:	46bd      	mov	sp, r7
1000272e:	bd80      	pop	{r7, pc}
10002730:	10020000 	.word	0x10020000
10002734:	10020024 	.word	0x10020024

10002738 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10002738:	b480      	push	{r7}
1000273a:	b089      	sub	sp, #36	@ 0x24
1000273c:	af00      	add	r7, sp, #0
1000273e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10002740:	2300      	movs	r3, #0
10002742:	61bb      	str	r3, [r7, #24]
10002744:	2301      	movs	r3, #1
10002746:	617b      	str	r3, [r7, #20]
10002748:	2300      	movs	r3, #0
1000274a:	613b      	str	r3, [r7, #16]
1000274c:	2300      	movs	r3, #0
1000274e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10002750:	f04f 0300 	mov.w	r3, #0
10002754:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
10002756:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000275c:	f003 0303 	and.w	r3, r3, #3
10002760:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10002762:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002766:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
1000276a:	0c1b      	lsrs	r3, r3, #16
1000276c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10002770:	3301      	adds	r3, #1
10002772:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10002774:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002778:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000277c:	0c1b      	lsrs	r3, r3, #16
1000277e:	f003 0301 	and.w	r3, r3, #1
10002782:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10002784:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002788:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000278c:	08db      	lsrs	r3, r3, #3
1000278e:	f3c3 030c 	ubfx	r3, r3, #0, #13
10002792:	693a      	ldr	r2, [r7, #16]
10002794:	fb02 f303 	mul.w	r3, r2, r3
10002798:	ee07 3a90 	vmov	s15, r3
1000279c:	eef8 7a67 	vcvt.f32.u32	s15, s15
100027a0:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
100027a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
100027ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
100027b0:	3301      	adds	r3, #1
100027b2:	ee07 3a90 	vmov	s15, r3
100027b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100027ba:	edd7 6a02 	vldr	s13, [r7, #8]
100027be:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 10002904 <HAL_RCC_GetPLL2ClockFreq+0x1cc>
100027c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
100027c6:	ee77 7a27 	vadd.f32	s15, s14, s15
100027ca:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100027ce:	69bb      	ldr	r3, [r7, #24]
100027d0:	2b02      	cmp	r3, #2
100027d2:	d047      	beq.n	10002864 <HAL_RCC_GetPLL2ClockFreq+0x12c>
100027d4:	69bb      	ldr	r3, [r7, #24]
100027d6:	2b02      	cmp	r3, #2
100027d8:	d848      	bhi.n	1000286c <HAL_RCC_GetPLL2ClockFreq+0x134>
100027da:	69bb      	ldr	r3, [r7, #24]
100027dc:	2b00      	cmp	r3, #0
100027de:	d003      	beq.n	100027e8 <HAL_RCC_GetPLL2ClockFreq+0xb0>
100027e0:	69bb      	ldr	r3, [r7, #24]
100027e2:	2b01      	cmp	r3, #1
100027e4:	d02f      	beq.n	10002846 <HAL_RCC_GetPLL2ClockFreq+0x10e>
100027e6:	e041      	b.n	1000286c <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100027e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100027f0:	f003 0304 	and.w	r3, r3, #4
100027f4:	2b04      	cmp	r3, #4
100027f6:	d117      	bne.n	10002828 <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100027f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027fc:	699b      	ldr	r3, [r3, #24]
100027fe:	f003 0303 	and.w	r3, r3, #3
10002802:	4a41      	ldr	r2, [pc, #260]	@ (10002908 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10002804:	fa22 f303 	lsr.w	r3, r2, r3
10002808:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
1000280a:	68fa      	ldr	r2, [r7, #12]
1000280c:	697b      	ldr	r3, [r7, #20]
1000280e:	fbb2 f3f3 	udiv	r3, r2, r3
10002812:	ee07 3a90 	vmov	s15, r3
10002816:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000281a:	ed97 7a07 	vldr	s14, [r7, #28]
1000281e:	ee67 7a27 	vmul.f32	s15, s14, s15
10002822:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10002826:	e025      	b.n	10002874 <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10002828:	4a37      	ldr	r2, [pc, #220]	@ (10002908 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
1000282a:	697b      	ldr	r3, [r7, #20]
1000282c:	fbb2 f3f3 	udiv	r3, r2, r3
10002830:	ee07 3a90 	vmov	s15, r3
10002834:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002838:	ed97 7a07 	vldr	s14, [r7, #28]
1000283c:	ee67 7a27 	vmul.f32	s15, s14, s15
10002840:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002844:	e016      	b.n	10002874 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10002846:	4a31      	ldr	r2, [pc, #196]	@ (1000290c <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
10002848:	697b      	ldr	r3, [r7, #20]
1000284a:	fbb2 f3f3 	udiv	r3, r2, r3
1000284e:	ee07 3a90 	vmov	s15, r3
10002852:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002856:	ed97 7a07 	vldr	s14, [r7, #28]
1000285a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000285e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002862:	e007      	b.n	10002874 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10002864:	f04f 0300 	mov.w	r3, #0
10002868:	61fb      	str	r3, [r7, #28]
      break;
1000286a:	e003      	b.n	10002874 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
1000286c:	f04f 0300 	mov.w	r3, #0
10002870:	61fb      	str	r3, [r7, #28]
      break;
10002872:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10002874:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002878:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
1000287c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002880:	3301      	adds	r3, #1
10002882:	ee07 3a90 	vmov	s15, r3
10002886:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000288a:	edd7 6a07 	vldr	s13, [r7, #28]
1000288e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002896:	ee17 2a90 	vmov	r2, s15
1000289a:	687b      	ldr	r3, [r7, #4]
1000289c:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
1000289e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
100028a6:	0a1b      	lsrs	r3, r3, #8
100028a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100028ac:	3301      	adds	r3, #1
100028ae:	ee07 3a90 	vmov	s15, r3
100028b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100028b6:	edd7 6a07 	vldr	s13, [r7, #28]
100028ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
100028be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100028c2:	ee17 2a90 	vmov	r2, s15
100028c6:	687b      	ldr	r3, [r7, #4]
100028c8:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
100028ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
100028d2:	0c1b      	lsrs	r3, r3, #16
100028d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100028d8:	3301      	adds	r3, #1
100028da:	ee07 3a90 	vmov	s15, r3
100028de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100028e2:	edd7 6a07 	vldr	s13, [r7, #28]
100028e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
100028ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100028ee:	ee17 2a90 	vmov	r2, s15
100028f2:	687b      	ldr	r3, [r7, #4]
100028f4:	609a      	str	r2, [r3, #8]
}
100028f6:	bf00      	nop
100028f8:	3724      	adds	r7, #36	@ 0x24
100028fa:	46bd      	mov	sp, r7
100028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10002900:	4770      	bx	lr
10002902:	bf00      	nop
10002904:	46000000 	.word	0x46000000
10002908:	03d09000 	.word	0x03d09000
1000290c:	016e3600 	.word	0x016e3600

10002910 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10002910:	b480      	push	{r7}
10002912:	b089      	sub	sp, #36	@ 0x24
10002914:	af00      	add	r7, sp, #0
10002916:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10002918:	2300      	movs	r3, #0
1000291a:	61bb      	str	r3, [r7, #24]
1000291c:	2301      	movs	r3, #1
1000291e:	617b      	str	r3, [r7, #20]
10002920:	2300      	movs	r3, #0
10002922:	613b      	str	r3, [r7, #16]
10002924:	2300      	movs	r3, #0
10002926:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10002928:	f04f 0300 	mov.w	r3, #0
1000292c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
1000292e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002932:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002936:	f003 0303 	and.w	r3, r3, #3
1000293a:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
1000293c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002940:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10002944:	0c1b      	lsrs	r3, r3, #16
10002946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
1000294a:	3301      	adds	r3, #1
1000294c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
1000294e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002952:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002956:	0c1b      	lsrs	r3, r3, #16
10002958:	f003 0301 	and.w	r3, r3, #1
1000295c:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
1000295e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002962:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002966:	08db      	lsrs	r3, r3, #3
10002968:	f3c3 030c 	ubfx	r3, r3, #0, #13
1000296c:	693a      	ldr	r2, [r7, #16]
1000296e:	fb02 f303 	mul.w	r3, r2, r3
10002972:	ee07 3a90 	vmov	s15, r3
10002976:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000297a:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
1000297e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002982:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10002986:	f3c3 0308 	ubfx	r3, r3, #0, #9
1000298a:	3301      	adds	r3, #1
1000298c:	ee07 3a90 	vmov	s15, r3
10002990:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002994:	edd7 6a02 	vldr	s13, [r7, #8]
10002998:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10002af4 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
1000299c:	eec6 7a86 	vdiv.f32	s15, s13, s12
100029a0:	ee77 7a27 	vadd.f32	s15, s14, s15
100029a4:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100029a8:	69bb      	ldr	r3, [r7, #24]
100029aa:	2b03      	cmp	r3, #3
100029ac:	d85b      	bhi.n	10002a66 <HAL_RCC_GetPLL3ClockFreq+0x156>
100029ae:	a201      	add	r2, pc, #4	@ (adr r2, 100029b4 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
100029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100029b4:	100029c5 	.word	0x100029c5
100029b8:	10002a23 	.word	0x10002a23
100029bc:	10002a41 	.word	0x10002a41
100029c0:	10002a5f 	.word	0x10002a5f
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100029c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029c8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100029cc:	f003 0304 	and.w	r3, r3, #4
100029d0:	2b04      	cmp	r3, #4
100029d2:	d117      	bne.n	10002a04 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100029d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029d8:	699b      	ldr	r3, [r3, #24]
100029da:	f003 0303 	and.w	r3, r3, #3
100029de:	4a46      	ldr	r2, [pc, #280]	@ (10002af8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100029e0:	fa22 f303 	lsr.w	r3, r2, r3
100029e4:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
100029e6:	68fa      	ldr	r2, [r7, #12]
100029e8:	697b      	ldr	r3, [r7, #20]
100029ea:	fbb2 f3f3 	udiv	r3, r2, r3
100029ee:	ee07 3a90 	vmov	s15, r3
100029f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100029f6:	ed97 7a07 	vldr	s14, [r7, #28]
100029fa:	ee67 7a27 	vmul.f32	s15, s14, s15
100029fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10002a02:	e030      	b.n	10002a66 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10002a04:	4a3c      	ldr	r2, [pc, #240]	@ (10002af8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10002a06:	697b      	ldr	r3, [r7, #20]
10002a08:	fbb2 f3f3 	udiv	r3, r2, r3
10002a0c:	ee07 3a90 	vmov	s15, r3
10002a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002a14:	ed97 7a07 	vldr	s14, [r7, #28]
10002a18:	ee67 7a27 	vmul.f32	s15, s14, s15
10002a1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002a20:	e021      	b.n	10002a66 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10002a22:	4a36      	ldr	r2, [pc, #216]	@ (10002afc <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10002a24:	697b      	ldr	r3, [r7, #20]
10002a26:	fbb2 f3f3 	udiv	r3, r2, r3
10002a2a:	ee07 3a90 	vmov	s15, r3
10002a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002a32:	ed97 7a07 	vldr	s14, [r7, #28]
10002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
10002a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002a3e:	e012      	b.n	10002a66 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10002a40:	4a2f      	ldr	r2, [pc, #188]	@ (10002b00 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10002a42:	697b      	ldr	r3, [r7, #20]
10002a44:	fbb2 f3f3 	udiv	r3, r2, r3
10002a48:	ee07 3a90 	vmov	s15, r3
10002a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002a50:	ed97 7a07 	vldr	s14, [r7, #28]
10002a54:	ee67 7a27 	vmul.f32	s15, s14, s15
10002a58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002a5c:	e003      	b.n	10002a66 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10002a5e:	f04f 0300 	mov.w	r3, #0
10002a62:	61fb      	str	r3, [r7, #28]
      break;
10002a64:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10002a66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a6a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10002a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002a72:	3301      	adds	r3, #1
10002a74:	ee07 3a90 	vmov	s15, r3
10002a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002a7c:	edd7 6a07 	vldr	s13, [r7, #28]
10002a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002a88:	ee17 2a90 	vmov	r2, s15
10002a8c:	687b      	ldr	r3, [r7, #4]
10002a8e:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10002a90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a94:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10002a98:	0a1b      	lsrs	r3, r3, #8
10002a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002a9e:	3301      	adds	r3, #1
10002aa0:	ee07 3a90 	vmov	s15, r3
10002aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002aa8:	edd7 6a07 	vldr	s13, [r7, #28]
10002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002ab4:	ee17 2a90 	vmov	r2, s15
10002ab8:	687b      	ldr	r3, [r7, #4]
10002aba:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10002abc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ac0:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10002ac4:	0c1b      	lsrs	r3, r3, #16
10002ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002aca:	3301      	adds	r3, #1
10002acc:	ee07 3a90 	vmov	s15, r3
10002ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002ad4:	edd7 6a07 	vldr	s13, [r7, #28]
10002ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002ae0:	ee17 2a90 	vmov	r2, s15
10002ae4:	687b      	ldr	r3, [r7, #4]
10002ae6:	609a      	str	r2, [r3, #8]
}
10002ae8:	bf00      	nop
10002aea:	3724      	adds	r7, #36	@ 0x24
10002aec:	46bd      	mov	sp, r7
10002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
10002af2:	4770      	bx	lr
10002af4:	46000000 	.word	0x46000000
10002af8:	03d09000 	.word	0x03d09000
10002afc:	016e3600 	.word	0x016e3600
10002b00:	003d0900 	.word	0x003d0900

10002b04 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10002b04:	b480      	push	{r7}
10002b06:	b089      	sub	sp, #36	@ 0x24
10002b08:	af00      	add	r7, sp, #0
10002b0a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
10002b0c:	2300      	movs	r3, #0
10002b0e:	61bb      	str	r3, [r7, #24]
10002b10:	2301      	movs	r3, #1
10002b12:	617b      	str	r3, [r7, #20]
10002b14:	2300      	movs	r3, #0
10002b16:	613b      	str	r3, [r7, #16]
10002b18:	2300      	movs	r3, #0
10002b1a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
10002b1c:	f04f 0300 	mov.w	r3, #0
10002b20:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10002b22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b26:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002b2a:	f003 0303 	and.w	r3, r3, #3
10002b2e:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10002b30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b34:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10002b38:	0c1b      	lsrs	r3, r3, #16
10002b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10002b3e:	3301      	adds	r3, #1
10002b40:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10002b42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b46:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002b4a:	0c1b      	lsrs	r3, r3, #16
10002b4c:	f003 0301 	and.w	r3, r3, #1
10002b50:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10002b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b56:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002b5a:	08db      	lsrs	r3, r3, #3
10002b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10002b60:	693a      	ldr	r2, [r7, #16]
10002b62:	fb02 f303 	mul.w	r3, r2, r3
10002b66:	ee07 3a90 	vmov	s15, r3
10002b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002b6e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10002b72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b76:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10002b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
10002b7e:	3301      	adds	r3, #1
10002b80:	ee07 3a90 	vmov	s15, r3
10002b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002b88:	edd7 6a02 	vldr	s13, [r7, #8]
10002b8c:	ed9f 6a5c 	vldr	s12, [pc, #368]	@ 10002d00 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
10002b90:	eec6 7a86 	vdiv.f32	s15, s13, s12
10002b94:	ee77 7a27 	vadd.f32	s15, s14, s15
10002b98:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10002b9c:	69bb      	ldr	r3, [r7, #24]
10002b9e:	2b03      	cmp	r3, #3
10002ba0:	d866      	bhi.n	10002c70 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10002ba2:	a201      	add	r2, pc, #4	@ (adr r2, 10002ba8 <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002ba8:	10002bb9 	.word	0x10002bb9
10002bac:	10002c17 	.word	0x10002c17
10002bb0:	10002c35 	.word	0x10002c35
10002bb4:	10002c53 	.word	0x10002c53
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002bb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bbc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002bc0:	f003 0304 	and.w	r3, r3, #4
10002bc4:	2b04      	cmp	r3, #4
10002bc6:	d117      	bne.n	10002bf8 <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002bc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bcc:	699b      	ldr	r3, [r3, #24]
10002bce:	f003 0303 	and.w	r3, r3, #3
10002bd2:	4a4c      	ldr	r2, [pc, #304]	@ (10002d04 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10002bd4:	fa22 f303 	lsr.w	r3, r2, r3
10002bd8:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
10002bda:	68fa      	ldr	r2, [r7, #12]
10002bdc:	697b      	ldr	r3, [r7, #20]
10002bde:	fbb2 f3f3 	udiv	r3, r2, r3
10002be2:	ee07 3a90 	vmov	s15, r3
10002be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002bea:	ed97 7a07 	vldr	s14, [r7, #28]
10002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
10002bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
10002bf6:	e03b      	b.n	10002c70 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10002bf8:	4a42      	ldr	r2, [pc, #264]	@ (10002d04 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10002bfa:	697b      	ldr	r3, [r7, #20]
10002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
10002c00:	ee07 3a90 	vmov	s15, r3
10002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002c08:	ed97 7a07 	vldr	s14, [r7, #28]
10002c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
10002c10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002c14:	e02c      	b.n	10002c70 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10002c16:	4a3c      	ldr	r2, [pc, #240]	@ (10002d08 <HAL_RCC_GetPLL4ClockFreq+0x204>)
10002c18:	697b      	ldr	r3, [r7, #20]
10002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
10002c1e:	ee07 3a90 	vmov	s15, r3
10002c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002c26:	ed97 7a07 	vldr	s14, [r7, #28]
10002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
10002c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002c32:	e01d      	b.n	10002c70 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
10002c34:	4a35      	ldr	r2, [pc, #212]	@ (10002d0c <HAL_RCC_GetPLL4ClockFreq+0x208>)
10002c36:	697b      	ldr	r3, [r7, #20]
10002c38:	fbb2 f3f3 	udiv	r3, r2, r3
10002c3c:	ee07 3a90 	vmov	s15, r3
10002c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002c44:	ed97 7a07 	vldr	s14, [r7, #28]
10002c48:	ee67 7a27 	vmul.f32	s15, s14, s15
10002c4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002c50:	e00e      	b.n	10002c70 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10002c52:	4a2f      	ldr	r2, [pc, #188]	@ (10002d10 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
10002c54:	697b      	ldr	r3, [r7, #20]
10002c56:	fbb2 f3f3 	udiv	r3, r2, r3
10002c5a:	ee07 3a90 	vmov	s15, r3
10002c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002c62:	ed97 7a07 	vldr	s14, [r7, #28]
10002c66:	ee67 7a27 	vmul.f32	s15, s14, s15
10002c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002c6e:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
10002c70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c74:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10002c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002c7c:	3301      	adds	r3, #1
10002c7e:	ee07 3a90 	vmov	s15, r3
10002c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002c86:	edd7 6a07 	vldr	s13, [r7, #28]
10002c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002c92:	ee17 2a90 	vmov	r2, s15
10002c96:	687b      	ldr	r3, [r7, #4]
10002c98:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
10002c9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c9e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10002ca2:	0a1b      	lsrs	r3, r3, #8
10002ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002ca8:	3301      	adds	r3, #1
10002caa:	ee07 3a90 	vmov	s15, r3
10002cae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002cb2:	edd7 6a07 	vldr	s13, [r7, #28]
10002cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002cbe:	ee17 2a90 	vmov	r2, s15
10002cc2:	687b      	ldr	r3, [r7, #4]
10002cc4:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
10002cc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002cca:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10002cce:	0c1b      	lsrs	r3, r3, #16
10002cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002cd4:	3301      	adds	r3, #1
10002cd6:	ee07 3a90 	vmov	s15, r3
10002cda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002cde:	edd7 6a07 	vldr	s13, [r7, #28]
10002ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002cea:	ee17 2a90 	vmov	r2, s15
10002cee:	687b      	ldr	r3, [r7, #4]
10002cf0:	609a      	str	r2, [r3, #8]
}
10002cf2:	bf00      	nop
10002cf4:	3724      	adds	r7, #36	@ 0x24
10002cf6:	46bd      	mov	sp, r7
10002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
10002cfc:	4770      	bx	lr
10002cfe:	bf00      	nop
10002d00:	46000000 	.word	0x46000000
10002d04:	03d09000 	.word	0x03d09000
10002d08:	016e3600 	.word	0x016e3600
10002d0c:	003d0900 	.word	0x003d0900
10002d10:	00bb8000 	.word	0x00bb8000

10002d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10002d14:	b580      	push	{r7, lr}
10002d16:	b082      	sub	sp, #8
10002d18:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
10002d1a:	2300      	movs	r3, #0
10002d1c:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
10002d1e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d22:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10002d26:	f003 0307 	and.w	r3, r3, #7
10002d2a:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
10002d2c:	687b      	ldr	r3, [r7, #4]
10002d2e:	2b04      	cmp	r3, #4
10002d30:	d901      	bls.n	10002d36 <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
10002d32:	2304      	movs	r3, #4
10002d34:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
10002d36:	f000 f85a 	bl	10002dee <HAL_RCC_GetMCUFreq>
10002d3a:	4602      	mov	r2, r0
10002d3c:	687b      	ldr	r3, [r7, #4]
10002d3e:	fa22 f303 	lsr.w	r3, r2, r3
}
10002d42:	4618      	mov	r0, r3
10002d44:	3708      	adds	r7, #8
10002d46:	46bd      	mov	sp, r7
10002d48:	bd80      	pop	{r7, pc}

10002d4a <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
10002d4a:	b580      	push	{r7, lr}
10002d4c:	b082      	sub	sp, #8
10002d4e:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
10002d50:	2300      	movs	r3, #0
10002d52:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
10002d54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d58:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10002d5c:	f003 0307 	and.w	r3, r3, #7
10002d60:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
10002d62:	687b      	ldr	r3, [r7, #4]
10002d64:	2b04      	cmp	r3, #4
10002d66:	d901      	bls.n	10002d6c <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
10002d68:	2304      	movs	r3, #4
10002d6a:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
10002d6c:	f000 f83f 	bl	10002dee <HAL_RCC_GetMCUFreq>
10002d70:	4602      	mov	r2, r0
10002d72:	687b      	ldr	r3, [r7, #4]
10002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
10002d78:	4618      	mov	r0, r3
10002d7a:	3708      	adds	r7, #8
10002d7c:	46bd      	mov	sp, r7
10002d7e:	bd80      	pop	{r7, pc}

10002d80 <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
10002d80:	b580      	push	{r7, lr}
10002d82:	b082      	sub	sp, #8
10002d84:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10002d86:	2300      	movs	r3, #0
10002d88:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
10002d8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10002d90:	f003 0307 	and.w	r3, r3, #7
10002d94:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10002d96:	687b      	ldr	r3, [r7, #4]
10002d98:	2b04      	cmp	r3, #4
10002d9a:	d901      	bls.n	10002da0 <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
10002d9c:	2304      	movs	r3, #4
10002d9e:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
10002da0:	f000 f808 	bl	10002db4 <HAL_RCC_GetACLKFreq>
10002da4:	4602      	mov	r2, r0
10002da6:	687b      	ldr	r3, [r7, #4]
10002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
10002dac:	4618      	mov	r0, r3
10002dae:	3708      	adds	r7, #8
10002db0:	46bd      	mov	sp, r7
10002db2:	bd80      	pop	{r7, pc}

10002db4 <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
10002db4:	b580      	push	{r7, lr}
10002db6:	b082      	sub	sp, #8
10002db8:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
10002dba:	2300      	movs	r3, #0
10002dbc:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
10002dbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002dc4:	f003 0307 	and.w	r3, r3, #7
10002dc8:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
10002dca:	687b      	ldr	r3, [r7, #4]
10002dcc:	2b03      	cmp	r3, #3
10002dce:	d901      	bls.n	10002dd4 <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
10002dd0:	2303      	movs	r3, #3
10002dd2:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
10002dd4:	687b      	ldr	r3, [r7, #4]
10002dd6:	3301      	adds	r3, #1
10002dd8:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
10002dda:	f000 f82b 	bl	10002e34 <HAL_RCC_GetAXISSFreq>
10002dde:	4602      	mov	r2, r0
10002de0:	687b      	ldr	r3, [r7, #4]
10002de2:	fbb2 f3f3 	udiv	r3, r2, r3
}
10002de6:	4618      	mov	r0, r3
10002de8:	3708      	adds	r7, #8
10002dea:	46bd      	mov	sp, r7
10002dec:	bd80      	pop	{r7, pc}

10002dee <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10002dee:	b580      	push	{r7, lr}
10002df0:	b082      	sub	sp, #8
10002df2:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10002df4:	2300      	movs	r3, #0
10002df6:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10002df8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dfc:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10002e00:	f003 030f 	and.w	r3, r3, #15
10002e04:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10002e06:	687b      	ldr	r3, [r7, #4]
10002e08:	2b09      	cmp	r3, #9
10002e0a:	d901      	bls.n	10002e10 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10002e0c:	2309      	movs	r3, #9
10002e0e:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10002e10:	f000 f84e 	bl	10002eb0 <HAL_RCC_GetMCUSSFreq>
10002e14:	4602      	mov	r2, r0
10002e16:	687b      	ldr	r3, [r7, #4]
10002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
10002e1c:	4618      	mov	r0, r3
10002e1e:	3708      	adds	r7, #8
10002e20:	46bd      	mov	sp, r7
10002e22:	bd80      	pop	{r7, pc}

10002e24 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10002e24:	b580      	push	{r7, lr}
10002e26:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10002e28:	f7ff ffe1 	bl	10002dee <HAL_RCC_GetMCUFreq>
10002e2c:	4603      	mov	r3, r0
#endif
}
10002e2e:	4618      	mov	r0, r3
10002e30:	bd80      	pop	{r7, pc}
	...

10002e34 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
10002e34:	b580      	push	{r7, lr}
10002e36:	b084      	sub	sp, #16
10002e38:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
10002e3a:	2300      	movs	r3, #0
10002e3c:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
10002e3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002e44:	f003 0307 	and.w	r3, r3, #7
10002e48:	2b02      	cmp	r3, #2
10002e4a:	d006      	beq.n	10002e5a <HAL_RCC_GetAXISSFreq+0x26>
10002e4c:	2b02      	cmp	r3, #2
10002e4e:	d823      	bhi.n	10002e98 <HAL_RCC_GetAXISSFreq+0x64>
10002e50:	2b00      	cmp	r3, #0
10002e52:	d009      	beq.n	10002e68 <HAL_RCC_GetAXISSFreq+0x34>
10002e54:	2b01      	cmp	r3, #1
10002e56:	d01c      	beq.n	10002e92 <HAL_RCC_GetAXISSFreq+0x5e>
10002e58:	e01e      	b.n	10002e98 <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10002e5a:	463b      	mov	r3, r7
10002e5c:	4618      	mov	r0, r3
10002e5e:	f7ff fc6b 	bl	10002738 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
10002e62:	683b      	ldr	r3, [r7, #0]
10002e64:	60fb      	str	r3, [r7, #12]
      break;
10002e66:	e01a      	b.n	10002e9e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002e68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e6c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002e70:	f003 0304 	and.w	r3, r3, #4
10002e74:	2b04      	cmp	r3, #4
10002e76:	d109      	bne.n	10002e8c <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002e78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e7c:	699b      	ldr	r3, [r3, #24]
10002e7e:	f003 0303 	and.w	r3, r3, #3
10002e82:	4a09      	ldr	r2, [pc, #36]	@ (10002ea8 <HAL_RCC_GetAXISSFreq+0x74>)
10002e84:	fa22 f303 	lsr.w	r3, r2, r3
10002e88:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
10002e8a:	e008      	b.n	10002e9e <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
10002e8c:	4b06      	ldr	r3, [pc, #24]	@ (10002ea8 <HAL_RCC_GetAXISSFreq+0x74>)
10002e8e:	60fb      	str	r3, [r7, #12]
      break;
10002e90:	e005      	b.n	10002e9e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
10002e92:	4b06      	ldr	r3, [pc, #24]	@ (10002eac <HAL_RCC_GetAXISSFreq+0x78>)
10002e94:	60fb      	str	r3, [r7, #12]
      break;
10002e96:	e002      	b.n	10002e9e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
10002e98:	2300      	movs	r3, #0
10002e9a:	60fb      	str	r3, [r7, #12]
      break;
10002e9c:	bf00      	nop
  }

  return axissfreq;
10002e9e:	68fb      	ldr	r3, [r7, #12]
}
10002ea0:	4618      	mov	r0, r3
10002ea2:	3710      	adds	r7, #16
10002ea4:	46bd      	mov	sp, r7
10002ea6:	bd80      	pop	{r7, pc}
10002ea8:	03d09000 	.word	0x03d09000
10002eac:	016e3600 	.word	0x016e3600

10002eb0 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
10002eb0:	b580      	push	{r7, lr}
10002eb2:	b084      	sub	sp, #16
10002eb4:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10002eb6:	2300      	movs	r3, #0
10002eb8:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10002eba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002ec0:	f003 0303 	and.w	r3, r3, #3
10002ec4:	2b03      	cmp	r3, #3
10002ec6:	d822      	bhi.n	10002f0e <HAL_RCC_GetMCUSSFreq+0x5e>
10002ec8:	a201      	add	r2, pc, #4	@ (adr r2, 10002ed0 <HAL_RCC_GetMCUSSFreq+0x20>)
10002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002ece:	bf00      	nop
10002ed0:	10002eef 	.word	0x10002eef
10002ed4:	10002f03 	.word	0x10002f03
10002ed8:	10002f09 	.word	0x10002f09
10002edc:	10002ee1 	.word	0x10002ee1
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10002ee0:	463b      	mov	r3, r7
10002ee2:	4618      	mov	r0, r3
10002ee4:	f7ff fd14 	bl	10002910 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10002ee8:	683b      	ldr	r3, [r7, #0]
10002eea:	60fb      	str	r3, [r7, #12]
      break;
10002eec:	e00f      	b.n	10002f0e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002eee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ef2:	699b      	ldr	r3, [r3, #24]
10002ef4:	f003 0303 	and.w	r3, r3, #3
10002ef8:	4a07      	ldr	r2, [pc, #28]	@ (10002f18 <HAL_RCC_GetMCUSSFreq+0x68>)
10002efa:	fa22 f303 	lsr.w	r3, r2, r3
10002efe:	60fb      	str	r3, [r7, #12]

      break;
10002f00:	e005      	b.n	10002f0e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10002f02:	4b06      	ldr	r3, [pc, #24]	@ (10002f1c <HAL_RCC_GetMCUSSFreq+0x6c>)
10002f04:	60fb      	str	r3, [r7, #12]
      break;
10002f06:	e002      	b.n	10002f0e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10002f08:	4b05      	ldr	r3, [pc, #20]	@ (10002f20 <HAL_RCC_GetMCUSSFreq+0x70>)
10002f0a:	60fb      	str	r3, [r7, #12]
      break;
10002f0c:	bf00      	nop
  }

  return mcussfreq;
10002f0e:	68fb      	ldr	r3, [r7, #12]
}
10002f10:	4618      	mov	r0, r3
10002f12:	3710      	adds	r7, #16
10002f14:	46bd      	mov	sp, r7
10002f16:	bd80      	pop	{r7, pc}
10002f18:	03d09000 	.word	0x03d09000
10002f1c:	016e3600 	.word	0x016e3600
10002f20:	003d0900 	.word	0x003d0900

10002f24 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10002f24:	b580      	push	{r7, lr}
10002f26:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10002f28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f2c:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
10002f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10002f34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
10002f38:	d107      	bne.n	10002f4a <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10002f3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f3e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
10002f42:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10002f46:	f000 f802 	bl	10002f4e <HAL_RCC_WAKEUP_Callback>
  }
}
10002f4a:	bf00      	nop
10002f4c:	bd80      	pop	{r7, pc}

10002f4e <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10002f4e:	b480      	push	{r7}
10002f50:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10002f52:	bf00      	nop
10002f54:	46bd      	mov	sp, r7
10002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
10002f5a:	4770      	bx	lr

10002f5c <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10002f5c:	b580      	push	{r7, lr}
10002f5e:	b084      	sub	sp, #16
10002f60:	af00      	add	r7, sp, #0
10002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10002f64:	687b      	ldr	r3, [r7, #4]
10002f66:	681b      	ldr	r3, [r3, #0]
10002f68:	2b00      	cmp	r3, #0
10002f6a:	f000 8171 	beq.w	10003250 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10002f6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002f74:	f003 0307 	and.w	r3, r3, #7
10002f78:	2b02      	cmp	r3, #2
10002f7a:	d108      	bne.n	10002f8e <RCCEx_PLL2_Config+0x32>
10002f7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002f82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002f8a:	f000 815f 	beq.w	1000324c <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10002f8e:	687b      	ldr	r3, [r7, #4]
10002f90:	681b      	ldr	r3, [r3, #0]
10002f92:	2b02      	cmp	r3, #2
10002f94:	f040 8130 	bne.w	100031f8 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10002f98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002f9e:	f003 0303 	and.w	r3, r3, #3
10002fa2:	2b00      	cmp	r3, #0
10002fa4:	d008      	beq.n	10002fb8 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10002fa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002fac:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10002fb0:	2b01      	cmp	r3, #1
10002fb2:	d001      	beq.n	10002fb8 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10002fb4:	2301      	movs	r3, #1
10002fb6:	e14c      	b.n	10003252 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002fb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002fc0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002fc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10002fcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002fd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002fd8:	f023 0301 	bic.w	r3, r3, #1
10002fdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002fe0:	f7fd ffdc 	bl	10000f9c <HAL_GetTick>
10002fe4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002fe6:	e008      	b.n	10002ffa <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002fe8:	f7fd ffd8 	bl	10000f9c <HAL_GetTick>
10002fec:	4602      	mov	r2, r0
10002fee:	68fb      	ldr	r3, [r7, #12]
10002ff0:	1ad3      	subs	r3, r2, r3
10002ff2:	2b64      	cmp	r3, #100	@ 0x64
10002ff4:	d901      	bls.n	10002ffa <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10002ff6:	2303      	movs	r3, #3
10002ff8:	e12b      	b.n	10003252 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002ffa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003002:	f003 0302 	and.w	r3, r3, #2
10003006:	2b02      	cmp	r3, #2
10003008:	d0ee      	beq.n	10002fe8 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000300a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000300e:	6a1b      	ldr	r3, [r3, #32]
10003010:	f003 0303 	and.w	r3, r3, #3
10003014:	2b02      	cmp	r3, #2
10003016:	d107      	bne.n	10003028 <RCCEx_PLL2_Config+0xcc>
10003018:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000301c:	6a1b      	ldr	r3, [r3, #32]
1000301e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003026:	d00e      	beq.n	10003046 <RCCEx_PLL2_Config+0xea>
10003028:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000302c:	6a1b      	ldr	r3, [r3, #32]
1000302e:	f003 0303 	and.w	r3, r3, #3
10003032:	2b03      	cmp	r3, #3
10003034:	d112      	bne.n	1000305c <RCCEx_PLL2_Config+0x100>
10003036:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000303a:	6a1b      	ldr	r3, [r3, #32]
1000303c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003044:	d10a      	bne.n	1000305c <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10003046:	687b      	ldr	r3, [r7, #4]
10003048:	685a      	ldr	r2, [r3, #4]
1000304a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003050:	f003 0303 	and.w	r3, r3, #3
10003054:	429a      	cmp	r2, r3
10003056:	d00c      	beq.n	10003072 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10003058:	2301      	movs	r3, #1
1000305a:	e0fa      	b.n	10003252 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
1000305c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003062:	f023 0203 	bic.w	r2, r3, #3
10003066:	687b      	ldr	r3, [r7, #4]
10003068:	685b      	ldr	r3, [r3, #4]
1000306a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000306e:	4313      	orrs	r3, r2
10003070:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10003072:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003076:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
1000307a:	4b78      	ldr	r3, [pc, #480]	@ (1000325c <RCCEx_PLL2_Config+0x300>)
1000307c:	4013      	ands	r3, r2
1000307e:	687a      	ldr	r2, [r7, #4]
10003080:	68d2      	ldr	r2, [r2, #12]
10003082:	1e51      	subs	r1, r2, #1
10003084:	687a      	ldr	r2, [r7, #4]
10003086:	6892      	ldr	r2, [r2, #8]
10003088:	3a01      	subs	r2, #1
1000308a:	0412      	lsls	r2, r2, #16
1000308c:	430a      	orrs	r2, r1
1000308e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003092:	4313      	orrs	r3, r2
10003094:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
10003098:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000309c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
100030a0:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100030a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100030a8:	687a      	ldr	r2, [r7, #4]
100030aa:	6912      	ldr	r2, [r2, #16]
100030ac:	1e51      	subs	r1, r2, #1
100030ae:	687a      	ldr	r2, [r7, #4]
100030b0:	6952      	ldr	r2, [r2, #20]
100030b2:	3a01      	subs	r2, #1
100030b4:	0212      	lsls	r2, r2, #8
100030b6:	4311      	orrs	r1, r2
100030b8:	687a      	ldr	r2, [r7, #4]
100030ba:	6992      	ldr	r2, [r2, #24]
100030bc:	3a01      	subs	r2, #1
100030be:	0412      	lsls	r2, r2, #16
100030c0:	430a      	orrs	r2, r1
100030c2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100030c6:	4313      	orrs	r3, r2
100030c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
100030cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100030d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100030dc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
100030e0:	687b      	ldr	r3, [r7, #4]
100030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100030e4:	2b02      	cmp	r3, #2
100030e6:	d003      	beq.n	100030f0 <RCCEx_PLL2_Config+0x194>
100030e8:	687b      	ldr	r3, [r7, #4]
100030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100030ec:	2b00      	cmp	r3, #0
100030ee:	d10c      	bne.n	1000310a <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
100030f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100030f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003100:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003104:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
10003108:	e00f      	b.n	1000312a <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000310a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000310e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003116:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000311a:	687a      	ldr	r2, [r7, #4]
1000311c:	6a12      	ldr	r2, [r2, #32]
1000311e:	00d2      	lsls	r2, r2, #3
10003120:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003124:	4313      	orrs	r3, r2
10003126:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000312a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000312e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003132:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
1000313a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000313e:	687b      	ldr	r3, [r7, #4]
10003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003142:	2b02      	cmp	r3, #2
10003144:	d124      	bne.n	10003190 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10003146:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000314a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
1000314e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003152:	687b      	ldr	r3, [r7, #4]
10003154:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10003156:	687b      	ldr	r3, [r7, #4]
10003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000315a:	4319      	orrs	r1, r3
1000315c:	687b      	ldr	r3, [r7, #4]
1000315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003160:	4319      	orrs	r1, r3
10003162:	687b      	ldr	r3, [r7, #4]
10003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10003166:	4319      	orrs	r1, r3
10003168:	687b      	ldr	r3, [r7, #4]
1000316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000316c:	041b      	lsls	r3, r3, #16
1000316e:	430b      	orrs	r3, r1
10003170:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003174:	4313      	orrs	r3, r2
10003176:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
1000317a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003182:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003186:	f043 0304 	orr.w	r3, r3, #4
1000318a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
1000318e:	e009      	b.n	100031a4 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10003190:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003198:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000319c:	f023 0304 	bic.w	r3, r3, #4
100031a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100031a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100031ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100031b0:	f043 0301 	orr.w	r3, r3, #1
100031b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100031b8:	f7fd fef0 	bl	10000f9c <HAL_GetTick>
100031bc:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100031be:	e008      	b.n	100031d2 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100031c0:	f7fd feec 	bl	10000f9c <HAL_GetTick>
100031c4:	4602      	mov	r2, r0
100031c6:	68fb      	ldr	r3, [r7, #12]
100031c8:	1ad3      	subs	r3, r2, r3
100031ca:	2b64      	cmp	r3, #100	@ 0x64
100031cc:	d901      	bls.n	100031d2 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
100031ce:	2303      	movs	r3, #3
100031d0:	e03f      	b.n	10003252 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100031d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100031da:	f003 0302 	and.w	r3, r3, #2
100031de:	2b02      	cmp	r3, #2
100031e0:	d1ee      	bne.n	100031c0 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100031e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100031ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100031ee:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100031f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
100031f6:	e02b      	b.n	10003250 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100031f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003200:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003208:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
1000320c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003214:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003218:	f023 0301 	bic.w	r3, r3, #1
1000321c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003220:	f7fd febc 	bl	10000f9c <HAL_GetTick>
10003224:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003226:	e008      	b.n	1000323a <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003228:	f7fd feb8 	bl	10000f9c <HAL_GetTick>
1000322c:	4602      	mov	r2, r0
1000322e:	68fb      	ldr	r3, [r7, #12]
10003230:	1ad3      	subs	r3, r2, r3
10003232:	2b64      	cmp	r3, #100	@ 0x64
10003234:	d901      	bls.n	1000323a <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10003236:	2303      	movs	r3, #3
10003238:	e00b      	b.n	10003252 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000323a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003242:	f003 0302 	and.w	r3, r3, #2
10003246:	2b02      	cmp	r3, #2
10003248:	d0ee      	beq.n	10003228 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
1000324a:	e001      	b.n	10003250 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000324c:	2301      	movs	r3, #1
1000324e:	e000      	b.n	10003252 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10003250:	2300      	movs	r3, #0

}
10003252:	4618      	mov	r0, r3
10003254:	3710      	adds	r7, #16
10003256:	46bd      	mov	sp, r7
10003258:	bd80      	pop	{r7, pc}
1000325a:	bf00      	nop
1000325c:	ffc0fe00 	.word	0xffc0fe00

10003260 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10003260:	b580      	push	{r7, lr}
10003262:	b084      	sub	sp, #16
10003264:	af00      	add	r7, sp, #0
10003266:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10003268:	687b      	ldr	r3, [r7, #4]
1000326a:	681b      	ldr	r3, [r3, #0]
1000326c:	2b00      	cmp	r3, #0
1000326e:	f000 815a 	beq.w	10003526 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10003272:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003278:	f003 0303 	and.w	r3, r3, #3
1000327c:	2b03      	cmp	r3, #3
1000327e:	d108      	bne.n	10003292 <RCCEx_PLL3_Config+0x32>
10003280:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000328a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000328e:	f000 8148 	beq.w	10003522 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10003292:	687b      	ldr	r3, [r7, #4]
10003294:	681b      	ldr	r3, [r3, #0]
10003296:	2b02      	cmp	r3, #2
10003298:	f040 8119 	bne.w	100034ce <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000329c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100032a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100032a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100032ac:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100032b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032b4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100032b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100032bc:	f023 0301 	bic.w	r3, r3, #1
100032c0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100032c4:	f7fd fe6a 	bl	10000f9c <HAL_GetTick>
100032c8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100032ca:	e008      	b.n	100032de <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100032cc:	f7fd fe66 	bl	10000f9c <HAL_GetTick>
100032d0:	4602      	mov	r2, r0
100032d2:	68fb      	ldr	r3, [r7, #12]
100032d4:	1ad3      	subs	r3, r2, r3
100032d6:	2b64      	cmp	r3, #100	@ 0x64
100032d8:	d901      	bls.n	100032de <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100032da:	2303      	movs	r3, #3
100032dc:	e124      	b.n	10003528 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100032de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032e2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100032e6:	f003 0302 	and.w	r3, r3, #2
100032ea:	2b02      	cmp	r3, #2
100032ec:	d0ee      	beq.n	100032cc <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
100032ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032f2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100032f6:	f023 0203 	bic.w	r2, r3, #3
100032fa:	687b      	ldr	r3, [r7, #4]
100032fc:	685b      	ldr	r3, [r3, #4]
100032fe:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003302:	4313      	orrs	r3, r2
10003304:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003308:	e008      	b.n	1000331c <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000330a:	f7fd fe47 	bl	10000f9c <HAL_GetTick>
1000330e:	4602      	mov	r2, r0
10003310:	68fb      	ldr	r3, [r7, #12]
10003312:	1ad3      	subs	r3, r2, r3
10003314:	2b64      	cmp	r3, #100	@ 0x64
10003316:	d901      	bls.n	1000331c <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10003318:	2303      	movs	r3, #3
1000331a:	e105      	b.n	10003528 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000331c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003320:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10003324:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000332c:	d1ed      	bne.n	1000330a <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
1000332e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003332:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10003336:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
1000333a:	687b      	ldr	r3, [r7, #4]
1000333c:	69db      	ldr	r3, [r3, #28]
1000333e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003342:	4313      	orrs	r3, r2
10003344:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10003348:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000334c:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10003350:	4b77      	ldr	r3, [pc, #476]	@ (10003530 <RCCEx_PLL3_Config+0x2d0>)
10003352:	4013      	ands	r3, r2
10003354:	687a      	ldr	r2, [r7, #4]
10003356:	68d2      	ldr	r2, [r2, #12]
10003358:	1e51      	subs	r1, r2, #1
1000335a:	687a      	ldr	r2, [r7, #4]
1000335c:	6892      	ldr	r2, [r2, #8]
1000335e:	3a01      	subs	r2, #1
10003360:	0412      	lsls	r2, r2, #16
10003362:	430a      	orrs	r2, r1
10003364:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003368:	4313      	orrs	r3, r2
1000336a:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
1000336e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003372:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10003376:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
1000337a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
1000337e:	687a      	ldr	r2, [r7, #4]
10003380:	6912      	ldr	r2, [r2, #16]
10003382:	1e51      	subs	r1, r2, #1
10003384:	687a      	ldr	r2, [r7, #4]
10003386:	6952      	ldr	r2, [r2, #20]
10003388:	3a01      	subs	r2, #1
1000338a:	0212      	lsls	r2, r2, #8
1000338c:	4311      	orrs	r1, r2
1000338e:	687a      	ldr	r2, [r7, #4]
10003390:	6992      	ldr	r2, [r2, #24]
10003392:	3a01      	subs	r2, #1
10003394:	0412      	lsls	r2, r2, #16
10003396:	430a      	orrs	r2, r1
10003398:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000339c:	4313      	orrs	r3, r2
1000339e:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100033a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033a6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100033aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100033ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100033b2:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100033b6:	687b      	ldr	r3, [r7, #4]
100033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100033ba:	2b02      	cmp	r3, #2
100033bc:	d003      	beq.n	100033c6 <RCCEx_PLL3_Config+0x166>
100033be:	687b      	ldr	r3, [r7, #4]
100033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100033c2:	2b00      	cmp	r3, #0
100033c4:	d10c      	bne.n	100033e0 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100033c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033ca:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100033ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100033d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100033d6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100033da:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
100033de:	e00f      	b.n	10003400 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
100033e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033e4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100033e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100033ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100033f0:	687a      	ldr	r2, [r7, #4]
100033f2:	6a12      	ldr	r2, [r2, #32]
100033f4:	00d2      	lsls	r2, r2, #3
100033f6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100033fa:	4313      	orrs	r3, r2
100033fc:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10003400:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003404:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003408:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003410:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003414:	687b      	ldr	r3, [r7, #4]
10003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003418:	2b02      	cmp	r3, #2
1000341a:	d124      	bne.n	10003466 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
1000341c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003420:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10003424:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003428:	687b      	ldr	r3, [r7, #4]
1000342a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1000342c:	687b      	ldr	r3, [r7, #4]
1000342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003430:	4319      	orrs	r1, r3
10003432:	687b      	ldr	r3, [r7, #4]
10003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003436:	4319      	orrs	r1, r3
10003438:	687b      	ldr	r3, [r7, #4]
1000343a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000343c:	4319      	orrs	r1, r3
1000343e:	687b      	ldr	r3, [r7, #4]
10003440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003442:	041b      	lsls	r3, r3, #16
10003444:	430b      	orrs	r3, r1
10003446:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000344a:	4313      	orrs	r3, r2
1000344c:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10003450:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003454:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003458:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000345c:	f043 0304 	orr.w	r3, r3, #4
10003460:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
10003464:	e009      	b.n	1000347a <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10003466:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000346a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000346e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003472:	f023 0304 	bic.w	r3, r3, #4
10003476:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
1000347a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000347e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003482:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003486:	f043 0301 	orr.w	r3, r3, #1
1000348a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000348e:	f7fd fd85 	bl	10000f9c <HAL_GetTick>
10003492:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003494:	e008      	b.n	100034a8 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003496:	f7fd fd81 	bl	10000f9c <HAL_GetTick>
1000349a:	4602      	mov	r2, r0
1000349c:	68fb      	ldr	r3, [r7, #12]
1000349e:	1ad3      	subs	r3, r2, r3
100034a0:	2b64      	cmp	r3, #100	@ 0x64
100034a2:	d901      	bls.n	100034a8 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100034a4:	2303      	movs	r3, #3
100034a6:	e03f      	b.n	10003528 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100034a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034ac:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100034b0:	f003 0302 	and.w	r3, r3, #2
100034b4:	2b02      	cmp	r3, #2
100034b6:	d1ee      	bne.n	10003496 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100034b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034bc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100034c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034c4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100034c8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
100034cc:	e02b      	b.n	10003526 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100034ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100034d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100034de:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
100034e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034e6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100034ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034ee:	f023 0301 	bic.w	r3, r3, #1
100034f2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100034f6:	f7fd fd51 	bl	10000f9c <HAL_GetTick>
100034fa:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100034fc:	e008      	b.n	10003510 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100034fe:	f7fd fd4d 	bl	10000f9c <HAL_GetTick>
10003502:	4602      	mov	r2, r0
10003504:	68fb      	ldr	r3, [r7, #12]
10003506:	1ad3      	subs	r3, r2, r3
10003508:	2b64      	cmp	r3, #100	@ 0x64
1000350a:	d901      	bls.n	10003510 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
1000350c:	2303      	movs	r3, #3
1000350e:	e00b      	b.n	10003528 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003510:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003514:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003518:	f003 0302 	and.w	r3, r3, #2
1000351c:	2b02      	cmp	r3, #2
1000351e:	d0ee      	beq.n	100034fe <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10003520:	e001      	b.n	10003526 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003522:	2301      	movs	r3, #1
10003524:	e000      	b.n	10003528 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10003526:	2300      	movs	r3, #0
}
10003528:	4618      	mov	r0, r3
1000352a:	3710      	adds	r7, #16
1000352c:	46bd      	mov	sp, r7
1000352e:	bd80      	pop	{r7, pc}
10003530:	ffc0fe00 	.word	0xffc0fe00

10003534 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10003534:	b580      	push	{r7, lr}
10003536:	b084      	sub	sp, #16
10003538:	af00      	add	r7, sp, #0
1000353a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
1000353c:	687b      	ldr	r3, [r7, #4]
1000353e:	681b      	ldr	r3, [r3, #0]
10003540:	2b00      	cmp	r3, #0
10003542:	f000 8147 	beq.w	100037d4 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10003546:	687b      	ldr	r3, [r7, #4]
10003548:	681b      	ldr	r3, [r3, #0]
1000354a:	2b02      	cmp	r3, #2
1000354c:	f040 8119 	bne.w	10003782 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003550:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003554:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003558:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000355c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003560:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10003564:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003568:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000356c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003570:	f023 0301 	bic.w	r3, r3, #1
10003574:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003578:	f7fd fd10 	bl	10000f9c <HAL_GetTick>
1000357c:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000357e:	e008      	b.n	10003592 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003580:	f7fd fd0c 	bl	10000f9c <HAL_GetTick>
10003584:	4602      	mov	r2, r0
10003586:	68fb      	ldr	r3, [r7, #12]
10003588:	1ad3      	subs	r3, r2, r3
1000358a:	2b64      	cmp	r3, #100	@ 0x64
1000358c:	d901      	bls.n	10003592 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
1000358e:	2303      	movs	r3, #3
10003590:	e121      	b.n	100037d6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003592:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003596:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000359a:	f003 0302 	and.w	r3, r3, #2
1000359e:	2b02      	cmp	r3, #2
100035a0:	d0ee      	beq.n	10003580 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100035a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035a6:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100035aa:	f023 0203 	bic.w	r2, r3, #3
100035ae:	687b      	ldr	r3, [r7, #4]
100035b0:	685b      	ldr	r3, [r3, #4]
100035b2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100035b6:	4313      	orrs	r3, r2
100035b8:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100035bc:	e008      	b.n	100035d0 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100035be:	f7fd fced 	bl	10000f9c <HAL_GetTick>
100035c2:	4602      	mov	r2, r0
100035c4:	68fb      	ldr	r3, [r7, #12]
100035c6:	1ad3      	subs	r3, r2, r3
100035c8:	2b64      	cmp	r3, #100	@ 0x64
100035ca:	d901      	bls.n	100035d0 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
100035cc:	2303      	movs	r3, #3
100035ce:	e102      	b.n	100037d6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100035d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035d4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100035d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100035dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100035e0:	d1ed      	bne.n	100035be <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
100035e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035e6:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
100035ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
100035ee:	687b      	ldr	r3, [r7, #4]
100035f0:	69db      	ldr	r3, [r3, #28]
100035f2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100035f6:	4313      	orrs	r3, r2
100035f8:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
100035fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003600:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10003604:	4b76      	ldr	r3, [pc, #472]	@ (100037e0 <RCCEx_PLL4_Config+0x2ac>)
10003606:	4013      	ands	r3, r2
10003608:	687a      	ldr	r2, [r7, #4]
1000360a:	68d2      	ldr	r2, [r2, #12]
1000360c:	1e51      	subs	r1, r2, #1
1000360e:	687a      	ldr	r2, [r7, #4]
10003610:	6892      	ldr	r2, [r2, #8]
10003612:	3a01      	subs	r2, #1
10003614:	0412      	lsls	r2, r2, #16
10003616:	430a      	orrs	r2, r1
10003618:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000361c:	4313      	orrs	r3, r2
1000361e:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
10003622:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003626:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
1000362a:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
1000362e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10003632:	687a      	ldr	r2, [r7, #4]
10003634:	6912      	ldr	r2, [r2, #16]
10003636:	1e51      	subs	r1, r2, #1
10003638:	687a      	ldr	r2, [r7, #4]
1000363a:	6952      	ldr	r2, [r2, #20]
1000363c:	3a01      	subs	r2, #1
1000363e:	0212      	lsls	r2, r2, #8
10003640:	4311      	orrs	r1, r2
10003642:	687a      	ldr	r2, [r7, #4]
10003644:	6992      	ldr	r2, [r2, #24]
10003646:	3a01      	subs	r2, #1
10003648:	0412      	lsls	r2, r2, #16
1000364a:	430a      	orrs	r2, r1
1000364c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003650:	4313      	orrs	r3, r2
10003652:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10003656:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000365a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
1000365e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10003666:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
1000366a:	687b      	ldr	r3, [r7, #4]
1000366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000366e:	2b02      	cmp	r3, #2
10003670:	d003      	beq.n	1000367a <RCCEx_PLL4_Config+0x146>
10003672:	687b      	ldr	r3, [r7, #4]
10003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003676:	2b00      	cmp	r3, #0
10003678:	d10c      	bne.n	10003694 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
1000367a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000367e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10003682:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000368a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000368e:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10003692:	e00f      	b.n	100036b4 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10003694:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003698:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
1000369c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100036a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100036a4:	687a      	ldr	r2, [r7, #4]
100036a6:	6a12      	ldr	r2, [r2, #32]
100036a8:	00d2      	lsls	r2, r2, #3
100036aa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100036ae:	4313      	orrs	r3, r2
100036b0:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100036b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036b8:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100036bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100036c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100036c4:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100036c8:	687b      	ldr	r3, [r7, #4]
100036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100036cc:	2b02      	cmp	r3, #2
100036ce:	d124      	bne.n	1000371a <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
100036d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036d4:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
100036d8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
100036dc:	687b      	ldr	r3, [r7, #4]
100036de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100036e0:	687b      	ldr	r3, [r7, #4]
100036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100036e4:	4319      	orrs	r1, r3
100036e6:	687b      	ldr	r3, [r7, #4]
100036e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100036ea:	4319      	orrs	r1, r3
100036ec:	687b      	ldr	r3, [r7, #4]
100036ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100036f0:	4319      	orrs	r1, r3
100036f2:	687b      	ldr	r3, [r7, #4]
100036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100036f6:	041b      	lsls	r3, r3, #16
100036f8:	430b      	orrs	r3, r1
100036fa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100036fe:	4313      	orrs	r3, r2
10003700:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10003704:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003708:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000370c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003710:	f043 0304 	orr.w	r3, r3, #4
10003714:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10003718:	e009      	b.n	1000372e <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
1000371a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000371e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003722:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003726:	f023 0304 	bic.w	r3, r3, #4
1000372a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
1000372e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003732:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003736:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000373a:	f043 0301 	orr.w	r3, r3, #1
1000373e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003742:	f7fd fc2b 	bl	10000f9c <HAL_GetTick>
10003746:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003748:	e008      	b.n	1000375c <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000374a:	f7fd fc27 	bl	10000f9c <HAL_GetTick>
1000374e:	4602      	mov	r2, r0
10003750:	68fb      	ldr	r3, [r7, #12]
10003752:	1ad3      	subs	r3, r2, r3
10003754:	2b64      	cmp	r3, #100	@ 0x64
10003756:	d901      	bls.n	1000375c <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10003758:	2303      	movs	r3, #3
1000375a:	e03c      	b.n	100037d6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
1000375c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003760:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003764:	f003 0302 	and.w	r3, r3, #2
10003768:	2b02      	cmp	r3, #2
1000376a:	d1ee      	bne.n	1000374a <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
1000376c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003770:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003774:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003778:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
1000377c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10003780:	e028      	b.n	100037d4 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003782:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003786:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000378a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000378e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003792:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10003796:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000379a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000379e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100037a2:	f023 0301 	bic.w	r3, r3, #1
100037a6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100037aa:	f7fd fbf7 	bl	10000f9c <HAL_GetTick>
100037ae:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100037b0:	e008      	b.n	100037c4 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100037b2:	f7fd fbf3 	bl	10000f9c <HAL_GetTick>
100037b6:	4602      	mov	r2, r0
100037b8:	68fb      	ldr	r3, [r7, #12]
100037ba:	1ad3      	subs	r3, r2, r3
100037bc:	2b64      	cmp	r3, #100	@ 0x64
100037be:	d901      	bls.n	100037c4 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
100037c0:	2303      	movs	r3, #3
100037c2:	e008      	b.n	100037d6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100037c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037c8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100037cc:	f003 0302 	and.w	r3, r3, #2
100037d0:	2b02      	cmp	r3, #2
100037d2:	d0ee      	beq.n	100037b2 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
100037d4:	2300      	movs	r3, #0
}
100037d6:	4618      	mov	r0, r3
100037d8:	3710      	adds	r7, #16
100037da:	46bd      	mov	sp, r7
100037dc:	bd80      	pop	{r7, pc}
100037de:	bf00      	nop
100037e0:	ffc0fe00 	.word	0xffc0fe00

100037e4 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
100037e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
100037e8:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
100037ec:	af00      	add	r7, sp, #0
100037ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100037f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037f6:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
100037f8:	2300      	movs	r3, #0
100037fa:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
100037fe:	2300      	movs	r3, #0
10003800:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10003804:	2300      	movs	r3, #0
10003806:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
1000380a:	2300      	movs	r3, #0
1000380c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10003810:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003814:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003818:	681b      	ldr	r3, [r3, #0]
1000381a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000381e:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
10003822:	2500      	movs	r5, #0
10003824:	ea54 0305 	orrs.w	r3, r4, r5
10003828:	d011      	beq.n	1000384e <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
1000382a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000382e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003832:	f023 0103 	bic.w	r1, r3, #3
10003836:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000383a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000383e:	681b      	ldr	r3, [r3, #0]
10003840:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
10003844:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003848:	430b      	orrs	r3, r1
1000384a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
1000384e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003852:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003856:	681b      	ldr	r3, [r3, #0]
10003858:	e9d3 2300 	ldrd	r2, r3, [r3]
1000385c:	f002 0810 	and.w	r8, r2, #16
10003860:	f04f 0900 	mov.w	r9, #0
10003864:	ea58 0309 	orrs.w	r3, r8, r9
10003868:	d038      	beq.n	100038dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
1000386a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000386e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003872:	681b      	ldr	r3, [r3, #0]
10003874:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10003878:	2b01      	cmp	r3, #1
1000387a:	d11d      	bne.n	100038b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000387c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003880:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003884:	681b      	ldr	r3, [r3, #0]
10003886:	3380      	adds	r3, #128	@ 0x80
10003888:	4618      	mov	r0, r3
1000388a:	f7ff fe53 	bl	10003534 <RCCEx_PLL4_Config>
1000388e:	4603      	mov	r3, r0
10003890:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003894:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003898:	2b00      	cmp	r3, #0
1000389a:	d003      	beq.n	100038a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
1000389c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100038a0:	f001 be2a 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100038a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038a8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100038ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100038b4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
100038b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038bc:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
100038c0:	f023 0107 	bic.w	r1, r3, #7
100038c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038cc:	681b      	ldr	r3, [r3, #0]
100038ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
100038d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038d6:	430b      	orrs	r3, r1
100038d8:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
100038dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038e4:	681b      	ldr	r3, [r3, #0]
100038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
100038ea:	f002 0a20 	and.w	sl, r2, #32
100038ee:	f04f 0b00 	mov.w	fp, #0
100038f2:	ea5a 030b 	orrs.w	r3, sl, fp
100038f6:	d038      	beq.n	1000396a <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
100038f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003900:	681b      	ldr	r3, [r3, #0]
10003902:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10003906:	2b01      	cmp	r3, #1
10003908:	d11d      	bne.n	10003946 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000390a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000390e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003912:	681b      	ldr	r3, [r3, #0]
10003914:	3380      	adds	r3, #128	@ 0x80
10003916:	4618      	mov	r0, r3
10003918:	f7ff fe0c 	bl	10003534 <RCCEx_PLL4_Config>
1000391c:	4603      	mov	r3, r0
1000391e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003922:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003926:	2b00      	cmp	r3, #0
10003928:	d003      	beq.n	10003932 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
1000392a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000392e:	f001 bde3 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003932:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003936:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000393a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000393e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003942:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10003946:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000394a:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
1000394e:	f023 0107 	bic.w	r1, r3, #7
10003952:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003956:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000395a:	681b      	ldr	r3, [r3, #0]
1000395c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10003960:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003964:	430b      	orrs	r3, r1
10003966:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
1000396a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000396e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003972:	681b      	ldr	r3, [r3, #0]
10003974:	e9d3 2300 	ldrd	r2, r3, [r3]
10003978:	2100      	movs	r1, #0
1000397a:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
1000397e:	f003 0320 	and.w	r3, r3, #32
10003982:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
10003986:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
1000398a:	460b      	mov	r3, r1
1000398c:	4313      	orrs	r3, r2
1000398e:	d038      	beq.n	10003a02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10003990:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003994:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003998:	681b      	ldr	r3, [r3, #0]
1000399a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
1000399e:	2b01      	cmp	r3, #1
100039a0:	d11d      	bne.n	100039de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100039a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039aa:	681b      	ldr	r3, [r3, #0]
100039ac:	3344      	adds	r3, #68	@ 0x44
100039ae:	4618      	mov	r0, r3
100039b0:	f7ff fc56 	bl	10003260 <RCCEx_PLL3_Config>
100039b4:	4603      	mov	r3, r0
100039b6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100039ba:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100039be:	2b00      	cmp	r3, #0
100039c0:	d003      	beq.n	100039ca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
100039c2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100039c6:	f001 bd97 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100039ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039ce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100039d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039d6:	f043 0320 	orr.w	r3, r3, #32
100039da:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
100039de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
100039e6:	f023 0107 	bic.w	r1, r3, #7
100039ea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039f2:	681b      	ldr	r3, [r3, #0]
100039f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
100039f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039fc:	430b      	orrs	r3, r1
100039fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10003a02:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a0a:	681b      	ldr	r3, [r3, #0]
10003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003a10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10003a14:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
10003a18:	2300      	movs	r3, #0
10003a1a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
10003a1e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
10003a22:	460b      	mov	r3, r1
10003a24:	4313      	orrs	r3, r2
10003a26:	d07e      	beq.n	10003b26 <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10003a28:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a30:	681b      	ldr	r3, [r3, #0]
10003a32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10003a36:	2b04      	cmp	r3, #4
10003a38:	d044      	beq.n	10003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10003a3a:	2b04      	cmp	r3, #4
10003a3c:	d861      	bhi.n	10003b02 <HAL_RCCEx_PeriphCLKConfig+0x31e>
10003a3e:	2b00      	cmp	r3, #0
10003a40:	d002      	beq.n	10003a48 <HAL_RCCEx_PeriphCLKConfig+0x264>
10003a42:	2b01      	cmp	r3, #1
10003a44:	d01f      	beq.n	10003a86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10003a46:	e05c      	b.n	10003b02 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003a48:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a50:	681b      	ldr	r3, [r3, #0]
10003a52:	3380      	adds	r3, #128	@ 0x80
10003a54:	4618      	mov	r0, r3
10003a56:	f7ff fd6d 	bl	10003534 <RCCEx_PLL4_Config>
10003a5a:	4603      	mov	r3, r0
10003a5c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003a60:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a64:	2b00      	cmp	r3, #0
10003a66:	d003      	beq.n	10003a70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10003a68:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a6c:	f001 bd44 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003a70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a74:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003a78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a7c:	f043 0320 	orr.w	r3, r3, #32
10003a80:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003a84:	e03d      	b.n	10003b02 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003a86:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a8e:	681b      	ldr	r3, [r3, #0]
10003a90:	3344      	adds	r3, #68	@ 0x44
10003a92:	4618      	mov	r0, r3
10003a94:	f7ff fbe4 	bl	10003260 <RCCEx_PLL3_Config>
10003a98:	4603      	mov	r3, r0
10003a9a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003a9e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003aa2:	2b00      	cmp	r3, #0
10003aa4:	d003      	beq.n	10003aae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10003aa6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003aaa:	f001 bd25 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003aae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ab2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003ab6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003aba:	f043 0320 	orr.w	r3, r3, #32
10003abe:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003ac2:	e01e      	b.n	10003b02 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003ac4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ac8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003acc:	681b      	ldr	r3, [r3, #0]
10003ace:	3344      	adds	r3, #68	@ 0x44
10003ad0:	4618      	mov	r0, r3
10003ad2:	f7ff fbc5 	bl	10003260 <RCCEx_PLL3_Config>
10003ad6:	4603      	mov	r3, r0
10003ad8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003adc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ae0:	2b00      	cmp	r3, #0
10003ae2:	d003      	beq.n	10003aec <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10003ae4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ae8:	f001 bd06 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003aec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003af0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003af4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003afc:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003b00:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10003b02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b06:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
10003b0a:	f023 0107 	bic.w	r1, r3, #7
10003b0e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b16:	681b      	ldr	r3, [r3, #0]
10003b18:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10003b1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b20:	430b      	orrs	r3, r1
10003b22:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10003b26:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b2e:	681b      	ldr	r3, [r3, #0]
10003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
10003b34:	f402 7380 	and.w	r3, r2, #256	@ 0x100
10003b38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
10003b3c:	2300      	movs	r3, #0
10003b3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
10003b42:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
10003b46:	460b      	mov	r3, r1
10003b48:	4313      	orrs	r3, r2
10003b4a:	d07e      	beq.n	10003c4a <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10003b4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b54:	681b      	ldr	r3, [r3, #0]
10003b56:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10003b5a:	2b05      	cmp	r3, #5
10003b5c:	d044      	beq.n	10003be8 <HAL_RCCEx_PeriphCLKConfig+0x404>
10003b5e:	2b05      	cmp	r3, #5
10003b60:	d861      	bhi.n	10003c26 <HAL_RCCEx_PeriphCLKConfig+0x442>
10003b62:	2b00      	cmp	r3, #0
10003b64:	d002      	beq.n	10003b6c <HAL_RCCEx_PeriphCLKConfig+0x388>
10003b66:	2b01      	cmp	r3, #1
10003b68:	d01f      	beq.n	10003baa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10003b6a:	e05c      	b.n	10003c26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003b6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b74:	681b      	ldr	r3, [r3, #0]
10003b76:	3380      	adds	r3, #128	@ 0x80
10003b78:	4618      	mov	r0, r3
10003b7a:	f7ff fcdb 	bl	10003534 <RCCEx_PLL4_Config>
10003b7e:	4603      	mov	r3, r0
10003b80:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003b84:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003b88:	2b00      	cmp	r3, #0
10003b8a:	d003      	beq.n	10003b94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10003b8c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003b90:	f001 bcb2 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003b94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b98:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003b9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ba0:	f043 0320 	orr.w	r3, r3, #32
10003ba4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003ba8:	e03d      	b.n	10003c26 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003baa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003bae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bb2:	681b      	ldr	r3, [r3, #0]
10003bb4:	3344      	adds	r3, #68	@ 0x44
10003bb6:	4618      	mov	r0, r3
10003bb8:	f7ff fb52 	bl	10003260 <RCCEx_PLL3_Config>
10003bbc:	4603      	mov	r3, r0
10003bbe:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003bc2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bc6:	2b00      	cmp	r3, #0
10003bc8:	d003      	beq.n	10003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10003bca:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bce:	f001 bc93 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003bd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bd6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003bda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bde:	f043 0320 	orr.w	r3, r3, #32
10003be2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003be6:	e01e      	b.n	10003c26 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003be8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003bec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bf0:	681b      	ldr	r3, [r3, #0]
10003bf2:	3344      	adds	r3, #68	@ 0x44
10003bf4:	4618      	mov	r0, r3
10003bf6:	f7ff fb33 	bl	10003260 <RCCEx_PLL3_Config>
10003bfa:	4603      	mov	r3, r0
10003bfc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003c00:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c04:	2b00      	cmp	r3, #0
10003c06:	d003      	beq.n	10003c10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10003c08:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c0c:	f001 bc74 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003c10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c14:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003c18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003c20:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003c24:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10003c26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c2a:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
10003c2e:	f023 0107 	bic.w	r1, r3, #7
10003c32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c3a:	681b      	ldr	r3, [r3, #0]
10003c3c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10003c40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c44:	430b      	orrs	r3, r1
10003c46:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10003c4a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c52:	681b      	ldr	r3, [r3, #0]
10003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
10003c58:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
10003c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
10003c60:	2300      	movs	r3, #0
10003c62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
10003c66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
10003c6a:	460b      	mov	r3, r1
10003c6c:	4313      	orrs	r3, r2
10003c6e:	d07e      	beq.n	10003d6e <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10003c70:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c78:	681b      	ldr	r3, [r3, #0]
10003c7a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003c7e:	2b04      	cmp	r3, #4
10003c80:	d044      	beq.n	10003d0c <HAL_RCCEx_PeriphCLKConfig+0x528>
10003c82:	2b04      	cmp	r3, #4
10003c84:	d861      	bhi.n	10003d4a <HAL_RCCEx_PeriphCLKConfig+0x566>
10003c86:	2b00      	cmp	r3, #0
10003c88:	d002      	beq.n	10003c90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
10003c8a:	2b01      	cmp	r3, #1
10003c8c:	d01f      	beq.n	10003cce <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10003c8e:	e05c      	b.n	10003d4a <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003c90:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c98:	681b      	ldr	r3, [r3, #0]
10003c9a:	3380      	adds	r3, #128	@ 0x80
10003c9c:	4618      	mov	r0, r3
10003c9e:	f7ff fc49 	bl	10003534 <RCCEx_PLL4_Config>
10003ca2:	4603      	mov	r3, r0
10003ca4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ca8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003cac:	2b00      	cmp	r3, #0
10003cae:	d003      	beq.n	10003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10003cb0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003cb4:	f001 bc20 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003cb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cbc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003cc0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003cc4:	f043 0320 	orr.w	r3, r3, #32
10003cc8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003ccc:	e03d      	b.n	10003d4a <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003cce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cd6:	681b      	ldr	r3, [r3, #0]
10003cd8:	3344      	adds	r3, #68	@ 0x44
10003cda:	4618      	mov	r0, r3
10003cdc:	f7ff fac0 	bl	10003260 <RCCEx_PLL3_Config>
10003ce0:	4603      	mov	r3, r0
10003ce2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ce6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003cea:	2b00      	cmp	r3, #0
10003cec:	d003      	beq.n	10003cf6 <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10003cee:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003cf2:	f001 bc01 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003cf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cfa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003cfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d02:	f043 0320 	orr.w	r3, r3, #32
10003d06:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003d0a:	e01e      	b.n	10003d4a <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003d0c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d14:	681b      	ldr	r3, [r3, #0]
10003d16:	3344      	adds	r3, #68	@ 0x44
10003d18:	4618      	mov	r0, r3
10003d1a:	f7ff faa1 	bl	10003260 <RCCEx_PLL3_Config>
10003d1e:	4603      	mov	r3, r0
10003d20:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003d24:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d28:	2b00      	cmp	r3, #0
10003d2a:	d003      	beq.n	10003d34 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10003d2c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d30:	f001 bbe2 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003d34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d38:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003d44:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003d48:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10003d4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d4e:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
10003d52:	f023 0107 	bic.w	r1, r3, #7
10003d56:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d5e:	681b      	ldr	r3, [r3, #0]
10003d60:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003d64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d68:	430b      	orrs	r3, r1
10003d6a:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10003d6e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d76:	681b      	ldr	r3, [r3, #0]
10003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
10003d7c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
10003d80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
10003d84:	2300      	movs	r3, #0
10003d86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
10003d8a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
10003d8e:	460b      	mov	r3, r1
10003d90:	4313      	orrs	r3, r2
10003d92:	d07e      	beq.n	10003e92 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10003d94:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d9c:	681b      	ldr	r3, [r3, #0]
10003d9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10003da2:	2b04      	cmp	r3, #4
10003da4:	d044      	beq.n	10003e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
10003da6:	2b04      	cmp	r3, #4
10003da8:	d861      	bhi.n	10003e6e <HAL_RCCEx_PeriphCLKConfig+0x68a>
10003daa:	2b00      	cmp	r3, #0
10003dac:	d002      	beq.n	10003db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
10003dae:	2b01      	cmp	r3, #1
10003db0:	d01f      	beq.n	10003df2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
10003db2:	e05c      	b.n	10003e6e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003db4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003db8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dbc:	681b      	ldr	r3, [r3, #0]
10003dbe:	3380      	adds	r3, #128	@ 0x80
10003dc0:	4618      	mov	r0, r3
10003dc2:	f7ff fbb7 	bl	10003534 <RCCEx_PLL4_Config>
10003dc6:	4603      	mov	r3, r0
10003dc8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003dcc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003dd0:	2b00      	cmp	r3, #0
10003dd2:	d003      	beq.n	10003ddc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10003dd4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003dd8:	f001 bb8e 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003ddc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003de0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003de4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003de8:	f043 0320 	orr.w	r3, r3, #32
10003dec:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003df0:	e03d      	b.n	10003e6e <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003df2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003df6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dfa:	681b      	ldr	r3, [r3, #0]
10003dfc:	3344      	adds	r3, #68	@ 0x44
10003dfe:	4618      	mov	r0, r3
10003e00:	f7ff fa2e 	bl	10003260 <RCCEx_PLL3_Config>
10003e04:	4603      	mov	r3, r0
10003e06:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003e0a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e0e:	2b00      	cmp	r3, #0
10003e10:	d003      	beq.n	10003e1a <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10003e12:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e16:	f001 bb6f 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003e1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e1e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003e22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e26:	f043 0320 	orr.w	r3, r3, #32
10003e2a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003e2e:	e01e      	b.n	10003e6e <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003e30:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e38:	681b      	ldr	r3, [r3, #0]
10003e3a:	3344      	adds	r3, #68	@ 0x44
10003e3c:	4618      	mov	r0, r3
10003e3e:	f7ff fa0f 	bl	10003260 <RCCEx_PLL3_Config>
10003e42:	4603      	mov	r3, r0
10003e44:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003e48:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e4c:	2b00      	cmp	r3, #0
10003e4e:	d003      	beq.n	10003e58 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10003e50:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e54:	f001 bb50 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003e58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e5c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003e60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003e68:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003e6c:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10003e6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e72:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
10003e76:	f023 0107 	bic.w	r1, r3, #7
10003e7a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e82:	681b      	ldr	r3, [r3, #0]
10003e84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10003e88:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e8c:	430b      	orrs	r3, r1
10003e8e:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10003e92:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e9a:	681b      	ldr	r3, [r3, #0]
10003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003ea0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
10003ea4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
10003ea8:	2300      	movs	r3, #0
10003eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
10003eae:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
10003eb2:	460b      	mov	r3, r1
10003eb4:	4313      	orrs	r3, r2
10003eb6:	d07e      	beq.n	10003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10003eb8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ebc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ec0:	681b      	ldr	r3, [r3, #0]
10003ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10003ec6:	2b04      	cmp	r3, #4
10003ec8:	d044      	beq.n	10003f54 <HAL_RCCEx_PeriphCLKConfig+0x770>
10003eca:	2b04      	cmp	r3, #4
10003ecc:	d861      	bhi.n	10003f92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10003ece:	2b00      	cmp	r3, #0
10003ed0:	d002      	beq.n	10003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
10003ed2:	2b01      	cmp	r3, #1
10003ed4:	d01f      	beq.n	10003f16 <HAL_RCCEx_PeriphCLKConfig+0x732>
10003ed6:	e05c      	b.n	10003f92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ed8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003edc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ee0:	681b      	ldr	r3, [r3, #0]
10003ee2:	3380      	adds	r3, #128	@ 0x80
10003ee4:	4618      	mov	r0, r3
10003ee6:	f7ff fb25 	bl	10003534 <RCCEx_PLL4_Config>
10003eea:	4603      	mov	r3, r0
10003eec:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ef0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ef4:	2b00      	cmp	r3, #0
10003ef6:	d003      	beq.n	10003f00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
10003ef8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003efc:	f001 bafc 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003f00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f04:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003f08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f0c:	f043 0310 	orr.w	r3, r3, #16
10003f10:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003f14:	e03d      	b.n	10003f92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003f16:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f1e:	681b      	ldr	r3, [r3, #0]
10003f20:	3344      	adds	r3, #68	@ 0x44
10003f22:	4618      	mov	r0, r3
10003f24:	f7ff f99c 	bl	10003260 <RCCEx_PLL3_Config>
10003f28:	4603      	mov	r3, r0
10003f2a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003f2e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f32:	2b00      	cmp	r3, #0
10003f34:	d003      	beq.n	10003f3e <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
10003f36:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f3a:	f001 badd 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003f3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f42:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f4a:	f043 0320 	orr.w	r3, r3, #32
10003f4e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003f52:	e01e      	b.n	10003f92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003f54:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f5c:	681b      	ldr	r3, [r3, #0]
10003f5e:	3344      	adds	r3, #68	@ 0x44
10003f60:	4618      	mov	r0, r3
10003f62:	f7ff f97d 	bl	10003260 <RCCEx_PLL3_Config>
10003f66:	4603      	mov	r3, r0
10003f68:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003f6c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f70:	2b00      	cmp	r3, #0
10003f72:	d003      	beq.n	10003f7c <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10003f74:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f78:	f001 babe 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003f7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f80:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003f8c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003f90:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10003f92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f96:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
10003f9a:	f023 0107 	bic.w	r1, r3, #7
10003f9e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fa6:	681b      	ldr	r3, [r3, #0]
10003fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10003fac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fb0:	430b      	orrs	r3, r1
10003fb2:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10003fb6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fbe:	681b      	ldr	r3, [r3, #0]
10003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
10003fc4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
10003fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
10003fcc:	2300      	movs	r3, #0
10003fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
10003fd2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
10003fd6:	460b      	mov	r3, r1
10003fd8:	4313      	orrs	r3, r2
10003fda:	d07e      	beq.n	100040da <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10003fdc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fe0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fe4:	681b      	ldr	r3, [r3, #0]
10003fe6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10003fea:	2b04      	cmp	r3, #4
10003fec:	d044      	beq.n	10004078 <HAL_RCCEx_PeriphCLKConfig+0x894>
10003fee:	2b04      	cmp	r3, #4
10003ff0:	d861      	bhi.n	100040b6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10003ff2:	2b00      	cmp	r3, #0
10003ff4:	d002      	beq.n	10003ffc <HAL_RCCEx_PeriphCLKConfig+0x818>
10003ff6:	2b01      	cmp	r3, #1
10003ff8:	d01f      	beq.n	1000403a <HAL_RCCEx_PeriphCLKConfig+0x856>
10003ffa:	e05c      	b.n	100040b6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ffc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004000:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004004:	681b      	ldr	r3, [r3, #0]
10004006:	3380      	adds	r3, #128	@ 0x80
10004008:	4618      	mov	r0, r3
1000400a:	f7ff fa93 	bl	10003534 <RCCEx_PLL4_Config>
1000400e:	4603      	mov	r3, r0
10004010:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004014:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004018:	2b00      	cmp	r3, #0
1000401a:	d003      	beq.n	10004024 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
1000401c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004020:	f001 ba6a 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004024:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004028:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000402c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004030:	f043 0310 	orr.w	r3, r3, #16
10004034:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004038:	e03d      	b.n	100040b6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000403a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000403e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004042:	681b      	ldr	r3, [r3, #0]
10004044:	3344      	adds	r3, #68	@ 0x44
10004046:	4618      	mov	r0, r3
10004048:	f7ff f90a 	bl	10003260 <RCCEx_PLL3_Config>
1000404c:	4603      	mov	r3, r0
1000404e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004052:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004056:	2b00      	cmp	r3, #0
10004058:	d003      	beq.n	10004062 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
1000405a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000405e:	f001 ba4b 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004062:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004066:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000406a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000406e:	f043 0320 	orr.w	r3, r3, #32
10004072:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004076:	e01e      	b.n	100040b6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004078:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000407c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004080:	681b      	ldr	r3, [r3, #0]
10004082:	3344      	adds	r3, #68	@ 0x44
10004084:	4618      	mov	r0, r3
10004086:	f7ff f8eb 	bl	10003260 <RCCEx_PLL3_Config>
1000408a:	4603      	mov	r3, r0
1000408c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004090:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004094:	2b00      	cmp	r3, #0
10004096:	d003      	beq.n	100040a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10004098:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000409c:	f001 ba2c 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100040a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100040a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100040b0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100040b4:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100040b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040ba:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
100040be:	f023 0107 	bic.w	r1, r3, #7
100040c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040ca:	681b      	ldr	r3, [r3, #0]
100040cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
100040d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040d4:	430b      	orrs	r3, r1
100040d6:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
100040da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040e2:	681b      	ldr	r3, [r3, #0]
100040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100040e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
100040ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
100040f0:	2300      	movs	r3, #0
100040f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
100040f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
100040fa:	460b      	mov	r3, r1
100040fc:	4313      	orrs	r3, r2
100040fe:	d038      	beq.n	10004172 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10004100:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004104:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004108:	681b      	ldr	r3, [r3, #0]
1000410a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
1000410e:	2b01      	cmp	r3, #1
10004110:	d11d      	bne.n	1000414e <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004112:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004116:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000411a:	681b      	ldr	r3, [r3, #0]
1000411c:	3380      	adds	r3, #128	@ 0x80
1000411e:	4618      	mov	r0, r3
10004120:	f7ff fa08 	bl	10003534 <RCCEx_PLL4_Config>
10004124:	4603      	mov	r3, r0
10004126:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000412a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000412e:	2b00      	cmp	r3, #0
10004130:	d003      	beq.n	1000413a <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10004132:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004136:	f001 b9df 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000413a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000413e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004142:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004146:	f043 0320 	orr.w	r3, r3, #32
1000414a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
1000414e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004152:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
10004156:	f023 0107 	bic.w	r1, r3, #7
1000415a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000415e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004162:	681b      	ldr	r3, [r3, #0]
10004164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10004168:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000416c:	430b      	orrs	r3, r1
1000416e:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10004172:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004176:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000417a:	681b      	ldr	r3, [r3, #0]
1000417c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004180:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
10004184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
10004188:	2300      	movs	r3, #0
1000418a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
1000418e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
10004192:	460b      	mov	r3, r1
10004194:	4313      	orrs	r3, r2
10004196:	d05b      	beq.n	10004250 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10004198:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000419c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041a0:	681b      	ldr	r3, [r3, #0]
100041a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
100041a6:	2b01      	cmp	r3, #1
100041a8:	d002      	beq.n	100041b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
100041aa:	2b05      	cmp	r3, #5
100041ac:	d01f      	beq.n	100041ee <HAL_RCCEx_PeriphCLKConfig+0xa0a>
100041ae:	e03d      	b.n	1000422c <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100041b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041b8:	681b      	ldr	r3, [r3, #0]
100041ba:	3380      	adds	r3, #128	@ 0x80
100041bc:	4618      	mov	r0, r3
100041be:	f7ff f9b9 	bl	10003534 <RCCEx_PLL4_Config>
100041c2:	4603      	mov	r3, r0
100041c4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100041c8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100041cc:	2b00      	cmp	r3, #0
100041ce:	d003      	beq.n	100041d8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
100041d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100041d4:	f001 b990 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100041d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041dc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041e4:	f043 0320 	orr.w	r3, r3, #32
100041e8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100041ec:	e01e      	b.n	1000422c <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100041ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041f6:	681b      	ldr	r3, [r3, #0]
100041f8:	3344      	adds	r3, #68	@ 0x44
100041fa:	4618      	mov	r0, r3
100041fc:	f7ff f830 	bl	10003260 <RCCEx_PLL3_Config>
10004200:	4603      	mov	r3, r0
10004202:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004206:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000420a:	2b00      	cmp	r3, #0
1000420c:	d003      	beq.n	10004216 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
1000420e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004212:	f001 b971 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004216:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000421a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000421e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004222:	f043 0320 	orr.w	r3, r3, #32
10004226:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000422a:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
1000422c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004230:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10004234:	f023 0107 	bic.w	r1, r3, #7
10004238:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000423c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004240:	681b      	ldr	r3, [r3, #0]
10004242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10004246:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000424a:	430b      	orrs	r3, r1
1000424c:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10004250:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004254:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004258:	681b      	ldr	r3, [r3, #0]
1000425a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000425e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
10004262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
10004266:	2300      	movs	r3, #0
10004268:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
1000426c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
10004270:	460b      	mov	r3, r1
10004272:	4313      	orrs	r3, r2
10004274:	d038      	beq.n	100042e8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10004276:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000427a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000427e:	681b      	ldr	r3, [r3, #0]
10004280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10004284:	2b01      	cmp	r3, #1
10004286:	d11d      	bne.n	100042c4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004288:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000428c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004290:	681b      	ldr	r3, [r3, #0]
10004292:	3380      	adds	r3, #128	@ 0x80
10004294:	4618      	mov	r0, r3
10004296:	f7ff f94d 	bl	10003534 <RCCEx_PLL4_Config>
1000429a:	4603      	mov	r3, r0
1000429c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100042a0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100042a4:	2b00      	cmp	r3, #0
100042a6:	d003      	beq.n	100042b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
100042a8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100042ac:	f001 b924 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100042b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100042b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042bc:	f043 0320 	orr.w	r3, r3, #32
100042c0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
100042c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042c8:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
100042cc:	f023 0107 	bic.w	r1, r3, #7
100042d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042d8:	681b      	ldr	r3, [r3, #0]
100042da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
100042de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042e2:	430b      	orrs	r3, r1
100042e4:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
100042e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042f0:	681b      	ldr	r3, [r3, #0]
100042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
100042f6:	f002 0302 	and.w	r3, r2, #2
100042fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
100042fe:	2300      	movs	r3, #0
10004300:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
10004304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
10004308:	460b      	mov	r3, r1
1000430a:	4313      	orrs	r3, r2
1000430c:	d038      	beq.n	10004380 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
1000430e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004312:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004316:	681b      	ldr	r3, [r3, #0]
10004318:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
1000431c:	2b01      	cmp	r3, #1
1000431e:	d11d      	bne.n	1000435c <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004320:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004328:	681b      	ldr	r3, [r3, #0]
1000432a:	3380      	adds	r3, #128	@ 0x80
1000432c:	4618      	mov	r0, r3
1000432e:	f7ff f901 	bl	10003534 <RCCEx_PLL4_Config>
10004332:	4603      	mov	r3, r0
10004334:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004338:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000433c:	2b00      	cmp	r3, #0
1000433e:	d003      	beq.n	10004348 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10004340:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004344:	f001 b8d8 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004348:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000434c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004350:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004354:	f043 0320 	orr.w	r3, r3, #32
10004358:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
1000435c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004360:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10004364:	f023 0107 	bic.w	r1, r3, #7
10004368:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000436c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004370:	681b      	ldr	r3, [r3, #0]
10004372:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10004376:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000437a:	430b      	orrs	r3, r1
1000437c:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10004380:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004384:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004388:	681b      	ldr	r3, [r3, #0]
1000438a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000438e:	f002 0304 	and.w	r3, r2, #4
10004392:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
10004396:	2300      	movs	r3, #0
10004398:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
1000439c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
100043a0:	460b      	mov	r3, r1
100043a2:	4313      	orrs	r3, r2
100043a4:	d038      	beq.n	10004418 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100043a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043ae:	681b      	ldr	r3, [r3, #0]
100043b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
100043b4:	2b01      	cmp	r3, #1
100043b6:	d11d      	bne.n	100043f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100043b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043c0:	681b      	ldr	r3, [r3, #0]
100043c2:	3380      	adds	r3, #128	@ 0x80
100043c4:	4618      	mov	r0, r3
100043c6:	f7ff f8b5 	bl	10003534 <RCCEx_PLL4_Config>
100043ca:	4603      	mov	r3, r0
100043cc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100043d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043d4:	2b00      	cmp	r3, #0
100043d6:	d003      	beq.n	100043e0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
100043d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043dc:	f001 b88c 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100043e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043e4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100043e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043ec:	f043 0320 	orr.w	r3, r3, #32
100043f0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
100043f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
100043fc:	f023 0107 	bic.w	r1, r3, #7
10004400:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004404:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004408:	681b      	ldr	r3, [r3, #0]
1000440a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
1000440e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004412:	430b      	orrs	r3, r1
10004414:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10004418:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000441c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004420:	681b      	ldr	r3, [r3, #0]
10004422:	e9d3 2300 	ldrd	r2, r3, [r3]
10004426:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
1000442a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
1000442e:	2300      	movs	r3, #0
10004430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
10004434:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
10004438:	460b      	mov	r3, r1
1000443a:	4313      	orrs	r3, r2
1000443c:	d038      	beq.n	100044b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
1000443e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004442:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004446:	681b      	ldr	r3, [r3, #0]
10004448:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
1000444c:	2b01      	cmp	r3, #1
1000444e:	d11d      	bne.n	1000448c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004450:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004454:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004458:	681b      	ldr	r3, [r3, #0]
1000445a:	3380      	adds	r3, #128	@ 0x80
1000445c:	4618      	mov	r0, r3
1000445e:	f7ff f869 	bl	10003534 <RCCEx_PLL4_Config>
10004462:	4603      	mov	r3, r0
10004464:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004468:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000446c:	2b00      	cmp	r3, #0
1000446e:	d003      	beq.n	10004478 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10004470:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004474:	f001 b840 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004478:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000447c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004480:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004484:	f043 0320 	orr.w	r3, r3, #32
10004488:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
1000448c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004490:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10004494:	f023 0107 	bic.w	r1, r3, #7
10004498:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000449c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044a0:	681b      	ldr	r3, [r3, #0]
100044a2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
100044a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044aa:	430b      	orrs	r3, r1
100044ac:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100044b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044b8:	681b      	ldr	r3, [r3, #0]
100044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
100044be:	f002 0301 	and.w	r3, r2, #1
100044c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
100044c6:	2300      	movs	r3, #0
100044c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
100044cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
100044d0:	460b      	mov	r3, r1
100044d2:	4313      	orrs	r3, r2
100044d4:	d05b      	beq.n	1000458e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
100044d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044de:	681b      	ldr	r3, [r3, #0]
100044e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
100044e4:	2b01      	cmp	r3, #1
100044e6:	d002      	beq.n	100044ee <HAL_RCCEx_PeriphCLKConfig+0xd0a>
100044e8:	2b04      	cmp	r3, #4
100044ea:	d01f      	beq.n	1000452c <HAL_RCCEx_PeriphCLKConfig+0xd48>
100044ec:	e03d      	b.n	1000456a <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100044ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044f6:	681b      	ldr	r3, [r3, #0]
100044f8:	3344      	adds	r3, #68	@ 0x44
100044fa:	4618      	mov	r0, r3
100044fc:	f7fe feb0 	bl	10003260 <RCCEx_PLL3_Config>
10004500:	4603      	mov	r3, r0
10004502:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004506:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000450a:	2b00      	cmp	r3, #0
1000450c:	d003      	beq.n	10004516 <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
1000450e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004512:	f000 bff1 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004516:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000451a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000451e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004522:	f043 0320 	orr.w	r3, r3, #32
10004526:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000452a:	e01e      	b.n	1000456a <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000452c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004530:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004534:	681b      	ldr	r3, [r3, #0]
10004536:	3380      	adds	r3, #128	@ 0x80
10004538:	4618      	mov	r0, r3
1000453a:	f7fe fffb 	bl	10003534 <RCCEx_PLL4_Config>
1000453e:	4603      	mov	r3, r0
10004540:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004544:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004548:	2b00      	cmp	r3, #0
1000454a:	d003      	beq.n	10004554 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
1000454c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004550:	f000 bfd2 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004554:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004558:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000455c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004560:	f043 0320 	orr.w	r3, r3, #32
10004564:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004568:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
1000456a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000456e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10004572:	f023 0107 	bic.w	r1, r3, #7
10004576:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000457a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000457e:	681b      	ldr	r3, [r3, #0]
10004580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10004584:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004588:	430b      	orrs	r3, r1
1000458a:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
1000458e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004592:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004596:	681b      	ldr	r3, [r3, #0]
10004598:	e9d3 2300 	ldrd	r2, r3, [r3]
1000459c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
100045a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
100045a4:	2300      	movs	r3, #0
100045a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
100045aa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
100045ae:	460b      	mov	r3, r1
100045b0:	4313      	orrs	r3, r2
100045b2:	d05b      	beq.n	1000466c <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
100045b4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045bc:	681b      	ldr	r3, [r3, #0]
100045be:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
100045c2:	2b01      	cmp	r3, #1
100045c4:	d002      	beq.n	100045cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
100045c6:	2b02      	cmp	r3, #2
100045c8:	d01f      	beq.n	1000460a <HAL_RCCEx_PeriphCLKConfig+0xe26>
100045ca:	e03d      	b.n	10004648 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100045cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045d4:	681b      	ldr	r3, [r3, #0]
100045d6:	3344      	adds	r3, #68	@ 0x44
100045d8:	4618      	mov	r0, r3
100045da:	f7fe fe41 	bl	10003260 <RCCEx_PLL3_Config>
100045de:	4603      	mov	r3, r0
100045e0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100045e4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100045e8:	2b00      	cmp	r3, #0
100045ea:	d003      	beq.n	100045f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
100045ec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100045f0:	f000 bf82 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100045f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045f8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100045fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004604:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004608:	e01e      	b.n	10004648 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000460a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000460e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004612:	681b      	ldr	r3, [r3, #0]
10004614:	3380      	adds	r3, #128	@ 0x80
10004616:	4618      	mov	r0, r3
10004618:	f7fe ff8c 	bl	10003534 <RCCEx_PLL4_Config>
1000461c:	4603      	mov	r3, r0
1000461e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004622:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004626:	2b00      	cmp	r3, #0
10004628:	d003      	beq.n	10004632 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
1000462a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000462e:	f000 bf63 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004632:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004636:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000463a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000463e:	f043 0310 	orr.w	r3, r3, #16
10004642:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004646:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10004648:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000464c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10004650:	f023 0107 	bic.w	r1, r3, #7
10004654:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004658:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000465c:	681b      	ldr	r3, [r3, #0]
1000465e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10004662:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004666:	430b      	orrs	r3, r1
10004668:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
1000466c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004670:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004674:	681b      	ldr	r3, [r3, #0]
10004676:	e9d3 2300 	ldrd	r2, r3, [r3]
1000467a:	2100      	movs	r1, #0
1000467c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
10004680:	f003 0301 	and.w	r3, r3, #1
10004684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
10004688:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
1000468c:	460b      	mov	r3, r1
1000468e:	4313      	orrs	r3, r2
10004690:	d05b      	beq.n	1000474a <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10004692:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004696:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000469a:	681b      	ldr	r3, [r3, #0]
1000469c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
100046a0:	2b01      	cmp	r3, #1
100046a2:	d002      	beq.n	100046aa <HAL_RCCEx_PeriphCLKConfig+0xec6>
100046a4:	2b02      	cmp	r3, #2
100046a6:	d01f      	beq.n	100046e8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
100046a8:	e03d      	b.n	10004726 <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100046aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046b2:	681b      	ldr	r3, [r3, #0]
100046b4:	3344      	adds	r3, #68	@ 0x44
100046b6:	4618      	mov	r0, r3
100046b8:	f7fe fdd2 	bl	10003260 <RCCEx_PLL3_Config>
100046bc:	4603      	mov	r3, r0
100046be:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100046c2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100046c6:	2b00      	cmp	r3, #0
100046c8:	d003      	beq.n	100046d2 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
100046ca:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100046ce:	f000 bf13 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100046d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046d6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100046da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100046e2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100046e6:	e01e      	b.n	10004726 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100046e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046f0:	681b      	ldr	r3, [r3, #0]
100046f2:	3380      	adds	r3, #128	@ 0x80
100046f4:	4618      	mov	r0, r3
100046f6:	f7fe ff1d 	bl	10003534 <RCCEx_PLL4_Config>
100046fa:	4603      	mov	r3, r0
100046fc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004700:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004704:	2b00      	cmp	r3, #0
10004706:	d003      	beq.n	10004710 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10004708:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000470c:	f000 bef4 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004710:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004714:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004718:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000471c:	f043 0310 	orr.w	r3, r3, #16
10004720:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004724:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10004726:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000472a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
1000472e:	f023 0107 	bic.w	r1, r3, #7
10004732:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004736:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000473a:	681b      	ldr	r3, [r3, #0]
1000473c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10004740:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004744:	430b      	orrs	r3, r1
10004746:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
1000474a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000474e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004752:	681b      	ldr	r3, [r3, #0]
10004754:	e9d3 2300 	ldrd	r2, r3, [r3]
10004758:	2100      	movs	r1, #0
1000475a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
1000475e:	f003 0302 	and.w	r3, r3, #2
10004762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
10004766:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
1000476a:	460b      	mov	r3, r1
1000476c:	4313      	orrs	r3, r2
1000476e:	d05b      	beq.n	10004828 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10004770:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004774:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004778:	681b      	ldr	r3, [r3, #0]
1000477a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
1000477e:	2b00      	cmp	r3, #0
10004780:	d002      	beq.n	10004788 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10004782:	2b01      	cmp	r3, #1
10004784:	d01f      	beq.n	100047c6 <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10004786:	e03d      	b.n	10004804 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004788:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000478c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004790:	681b      	ldr	r3, [r3, #0]
10004792:	3380      	adds	r3, #128	@ 0x80
10004794:	4618      	mov	r0, r3
10004796:	f7fe fecd 	bl	10003534 <RCCEx_PLL4_Config>
1000479a:	4603      	mov	r3, r0
1000479c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100047a0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047a4:	2b00      	cmp	r3, #0
100047a6:	d003      	beq.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
100047a8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047ac:	f000 bea4 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100047b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100047b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047bc:	f043 0310 	orr.w	r3, r3, #16
100047c0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100047c4:	e01e      	b.n	10004804 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100047c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047ce:	681b      	ldr	r3, [r3, #0]
100047d0:	3344      	adds	r3, #68	@ 0x44
100047d2:	4618      	mov	r0, r3
100047d4:	f7fe fd44 	bl	10003260 <RCCEx_PLL3_Config>
100047d8:	4603      	mov	r3, r0
100047da:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100047de:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047e2:	2b00      	cmp	r3, #0
100047e4:	d003      	beq.n	100047ee <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
100047e6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047ea:	f000 be85 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100047ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047f2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100047f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047fa:	f043 0320 	orr.w	r3, r3, #32
100047fe:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004802:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10004804:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004808:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
1000480c:	f023 0103 	bic.w	r1, r3, #3
10004810:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004814:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004818:	681b      	ldr	r3, [r3, #0]
1000481a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
1000481e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004822:	430b      	orrs	r3, r1
10004824:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10004828:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000482c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004830:	681b      	ldr	r3, [r3, #0]
10004832:	e9d3 2300 	ldrd	r2, r3, [r3]
10004836:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
1000483a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
1000483e:	2300      	movs	r3, #0
10004840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
10004844:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
10004848:	460b      	mov	r3, r1
1000484a:	4313      	orrs	r3, r2
1000484c:	d05b      	beq.n	10004906 <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
1000484e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004852:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004856:	681b      	ldr	r3, [r3, #0]
10004858:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
1000485c:	2b01      	cmp	r3, #1
1000485e:	d002      	beq.n	10004866 <HAL_RCCEx_PeriphCLKConfig+0x1082>
10004860:	2b02      	cmp	r3, #2
10004862:	d01f      	beq.n	100048a4 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10004864:	e03d      	b.n	100048e2 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004866:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000486a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000486e:	681b      	ldr	r3, [r3, #0]
10004870:	3344      	adds	r3, #68	@ 0x44
10004872:	4618      	mov	r0, r3
10004874:	f7fe fcf4 	bl	10003260 <RCCEx_PLL3_Config>
10004878:	4603      	mov	r3, r0
1000487a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000487e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004882:	2b00      	cmp	r3, #0
10004884:	d003      	beq.n	1000488e <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10004886:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000488a:	f000 be35 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000488e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004892:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004896:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000489a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000489e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100048a2:	e01e      	b.n	100048e2 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100048a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048ac:	681b      	ldr	r3, [r3, #0]
100048ae:	3380      	adds	r3, #128	@ 0x80
100048b0:	4618      	mov	r0, r3
100048b2:	f7fe fe3f 	bl	10003534 <RCCEx_PLL4_Config>
100048b6:	4603      	mov	r3, r0
100048b8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100048bc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048c0:	2b00      	cmp	r3, #0
100048c2:	d003      	beq.n	100048cc <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
100048c4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048c8:	f000 be16 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100048cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100048d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100048d8:	f043 0310 	orr.w	r3, r3, #16
100048dc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100048e0:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
100048e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048e6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
100048ea:	f023 0103 	bic.w	r1, r3, #3
100048ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048f6:	681b      	ldr	r3, [r3, #0]
100048f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
100048fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004900:	430b      	orrs	r3, r1
10004902:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10004906:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000490a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000490e:	681b      	ldr	r3, [r3, #0]
10004910:	e9d3 2300 	ldrd	r2, r3, [r3]
10004914:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
10004918:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
1000491c:	2300      	movs	r3, #0
1000491e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
10004922:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
10004926:	460b      	mov	r3, r1
10004928:	4313      	orrs	r3, r2
1000492a:	d05b      	beq.n	100049e4 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
1000492c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004930:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004934:	681b      	ldr	r3, [r3, #0]
10004936:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
1000493a:	2b01      	cmp	r3, #1
1000493c:	d002      	beq.n	10004944 <HAL_RCCEx_PeriphCLKConfig+0x1160>
1000493e:	2b02      	cmp	r3, #2
10004940:	d01f      	beq.n	10004982 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10004942:	e03d      	b.n	100049c0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004944:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004948:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000494c:	681b      	ldr	r3, [r3, #0]
1000494e:	3344      	adds	r3, #68	@ 0x44
10004950:	4618      	mov	r0, r3
10004952:	f7fe fc85 	bl	10003260 <RCCEx_PLL3_Config>
10004956:	4603      	mov	r3, r0
10004958:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000495c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004960:	2b00      	cmp	r3, #0
10004962:	d003      	beq.n	1000496c <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10004964:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004968:	f000 bdc6 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000496c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004970:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004974:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000497c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004980:	e01e      	b.n	100049c0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004982:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004986:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000498a:	681b      	ldr	r3, [r3, #0]
1000498c:	3380      	adds	r3, #128	@ 0x80
1000498e:	4618      	mov	r0, r3
10004990:	f7fe fdd0 	bl	10003534 <RCCEx_PLL4_Config>
10004994:	4603      	mov	r3, r0
10004996:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000499a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000499e:	2b00      	cmp	r3, #0
100049a0:	d003      	beq.n	100049aa <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
100049a2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049a6:	f000 bda7 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100049aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049ae:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100049b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049b6:	f043 0310 	orr.w	r3, r3, #16
100049ba:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100049be:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
100049c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049c4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
100049c8:	f023 0103 	bic.w	r1, r3, #3
100049cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100049d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100049d4:	681b      	ldr	r3, [r3, #0]
100049d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
100049da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049de:	430b      	orrs	r3, r1
100049e0:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
100049e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100049e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100049ec:	681b      	ldr	r3, [r3, #0]
100049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
100049f2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
100049f6:	67bb      	str	r3, [r7, #120]	@ 0x78
100049f8:	2300      	movs	r3, #0
100049fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
100049fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
10004a00:	460b      	mov	r3, r1
10004a02:	4313      	orrs	r3, r2
10004a04:	d07e      	beq.n	10004b04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10004a06:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a0e:	681b      	ldr	r3, [r3, #0]
10004a10:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10004a14:	2b03      	cmp	r3, #3
10004a16:	d044      	beq.n	10004aa2 <HAL_RCCEx_PeriphCLKConfig+0x12be>
10004a18:	2b03      	cmp	r3, #3
10004a1a:	d861      	bhi.n	10004ae0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10004a1c:	2b01      	cmp	r3, #1
10004a1e:	d002      	beq.n	10004a26 <HAL_RCCEx_PeriphCLKConfig+0x1242>
10004a20:	2b02      	cmp	r3, #2
10004a22:	d01f      	beq.n	10004a64 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10004a24:	e05c      	b.n	10004ae0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004a26:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a2e:	681b      	ldr	r3, [r3, #0]
10004a30:	3344      	adds	r3, #68	@ 0x44
10004a32:	4618      	mov	r0, r3
10004a34:	f7fe fc14 	bl	10003260 <RCCEx_PLL3_Config>
10004a38:	4603      	mov	r3, r0
10004a3a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004a3e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a42:	2b00      	cmp	r3, #0
10004a44:	d003      	beq.n	10004a4e <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10004a46:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a4a:	f000 bd55 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004a4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a52:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004a56:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a5a:	f043 0320 	orr.w	r3, r3, #32
10004a5e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004a62:	e03d      	b.n	10004ae0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004a64:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a6c:	681b      	ldr	r3, [r3, #0]
10004a6e:	3380      	adds	r3, #128	@ 0x80
10004a70:	4618      	mov	r0, r3
10004a72:	f7fe fd5f 	bl	10003534 <RCCEx_PLL4_Config>
10004a76:	4603      	mov	r3, r0
10004a78:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004a7c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a80:	2b00      	cmp	r3, #0
10004a82:	d003      	beq.n	10004a8c <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10004a84:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a88:	f000 bd36 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004a8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a90:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004a94:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a98:	f043 0320 	orr.w	r3, r3, #32
10004a9c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004aa0:	e01e      	b.n	10004ae0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004aa2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004aa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004aaa:	681b      	ldr	r3, [r3, #0]
10004aac:	3380      	adds	r3, #128	@ 0x80
10004aae:	4618      	mov	r0, r3
10004ab0:	f7fe fd40 	bl	10003534 <RCCEx_PLL4_Config>
10004ab4:	4603      	mov	r3, r0
10004ab6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004aba:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004abe:	2b00      	cmp	r3, #0
10004ac0:	d003      	beq.n	10004aca <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10004ac2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ac6:	f000 bd17 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004aca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ace:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004ad2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004ada:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004ade:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10004ae0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ae4:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
10004ae8:	f023 0103 	bic.w	r1, r3, #3
10004aec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004af0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004af4:	681b      	ldr	r3, [r3, #0]
10004af6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10004afa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004afe:	430b      	orrs	r3, r1
10004b00:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10004b04:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b0c:	681b      	ldr	r3, [r3, #0]
10004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004b12:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
10004b16:	673b      	str	r3, [r7, #112]	@ 0x70
10004b18:	2300      	movs	r3, #0
10004b1a:	677b      	str	r3, [r7, #116]	@ 0x74
10004b1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
10004b20:	460b      	mov	r3, r1
10004b22:	4313      	orrs	r3, r2
10004b24:	d05b      	beq.n	10004bde <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10004b26:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b2e:	681b      	ldr	r3, [r3, #0]
10004b30:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10004b34:	2b00      	cmp	r3, #0
10004b36:	d002      	beq.n	10004b3e <HAL_RCCEx_PeriphCLKConfig+0x135a>
10004b38:	2b01      	cmp	r3, #1
10004b3a:	d01f      	beq.n	10004b7c <HAL_RCCEx_PeriphCLKConfig+0x1398>
10004b3c:	e03d      	b.n	10004bba <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004b3e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b46:	681b      	ldr	r3, [r3, #0]
10004b48:	3380      	adds	r3, #128	@ 0x80
10004b4a:	4618      	mov	r0, r3
10004b4c:	f7fe fcf2 	bl	10003534 <RCCEx_PLL4_Config>
10004b50:	4603      	mov	r3, r0
10004b52:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004b56:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b5a:	2b00      	cmp	r3, #0
10004b5c:	d003      	beq.n	10004b66 <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10004b5e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b62:	f000 bcc9 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004b66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b6a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004b6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b72:	f043 0310 	orr.w	r3, r3, #16
10004b76:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004b7a:	e01e      	b.n	10004bba <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004b7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b84:	681b      	ldr	r3, [r3, #0]
10004b86:	3344      	adds	r3, #68	@ 0x44
10004b88:	4618      	mov	r0, r3
10004b8a:	f7fe fb69 	bl	10003260 <RCCEx_PLL3_Config>
10004b8e:	4603      	mov	r3, r0
10004b90:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004b94:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b98:	2b00      	cmp	r3, #0
10004b9a:	d003      	beq.n	10004ba4 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10004b9c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ba0:	f000 bcaa 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004ba4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ba8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004bac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004bb0:	f043 0320 	orr.w	r3, r3, #32
10004bb4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004bb8:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10004bba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bbe:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
10004bc2:	f023 0103 	bic.w	r1, r3, #3
10004bc6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bce:	681b      	ldr	r3, [r3, #0]
10004bd0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10004bd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004bd8:	430b      	orrs	r3, r1
10004bda:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10004bde:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004be2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004be6:	681b      	ldr	r3, [r3, #0]
10004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
10004bec:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
10004bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
10004bf2:	2300      	movs	r3, #0
10004bf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
10004bf6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
10004bfa:	460b      	mov	r3, r1
10004bfc:	4313      	orrs	r3, r2
10004bfe:	d011      	beq.n	10004c24 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10004c00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c04:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
10004c08:	f023 0103 	bic.w	r1, r3, #3
10004c0c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c14:	681b      	ldr	r3, [r3, #0]
10004c16:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
10004c1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c1e:	430b      	orrs	r3, r1
10004c20:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10004c24:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c2c:	681b      	ldr	r3, [r3, #0]
10004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004c32:	f402 7300 	and.w	r3, r2, #512	@ 0x200
10004c36:	663b      	str	r3, [r7, #96]	@ 0x60
10004c38:	2300      	movs	r3, #0
10004c3a:	667b      	str	r3, [r7, #100]	@ 0x64
10004c3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
10004c40:	460b      	mov	r3, r1
10004c42:	4313      	orrs	r3, r2
10004c44:	d038      	beq.n	10004cb8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10004c46:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c4e:	681b      	ldr	r3, [r3, #0]
10004c50:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10004c54:	2b01      	cmp	r3, #1
10004c56:	d11d      	bne.n	10004c94 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004c58:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c60:	681b      	ldr	r3, [r3, #0]
10004c62:	3380      	adds	r3, #128	@ 0x80
10004c64:	4618      	mov	r0, r3
10004c66:	f7fe fc65 	bl	10003534 <RCCEx_PLL4_Config>
10004c6a:	4603      	mov	r3, r0
10004c6c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004c70:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c74:	2b00      	cmp	r3, #0
10004c76:	d003      	beq.n	10004c80 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10004c78:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c7c:	f000 bc3c 	b.w	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004c80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c84:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004c88:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004c90:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10004c94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c98:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10004c9c:	f023 0103 	bic.w	r1, r3, #3
10004ca0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ca4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ca8:	681b      	ldr	r3, [r3, #0]
10004caa:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10004cae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004cb2:	430b      	orrs	r3, r1
10004cb4:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10004cb8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cc0:	681b      	ldr	r3, [r3, #0]
10004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
10004cc6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
10004cca:	65bb      	str	r3, [r7, #88]	@ 0x58
10004ccc:	2300      	movs	r3, #0
10004cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
10004cd0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
10004cd4:	460b      	mov	r3, r1
10004cd6:	4313      	orrs	r3, r2
10004cd8:	d037      	beq.n	10004d4a <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10004cda:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ce2:	681b      	ldr	r3, [r3, #0]
10004ce4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10004ce8:	2b00      	cmp	r3, #0
10004cea:	d11c      	bne.n	10004d26 <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004cec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cf4:	681b      	ldr	r3, [r3, #0]
10004cf6:	3380      	adds	r3, #128	@ 0x80
10004cf8:	4618      	mov	r0, r3
10004cfa:	f7fe fc1b 	bl	10003534 <RCCEx_PLL4_Config>
10004cfe:	4603      	mov	r3, r0
10004d00:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004d04:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d08:	2b00      	cmp	r3, #0
10004d0a:	d002      	beq.n	10004d12 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10004d0c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d10:	e3f2      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004d12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d16:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004d1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004d22:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10004d26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d2a:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10004d2e:	f023 0110 	bic.w	r1, r3, #16
10004d32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d3a:	681b      	ldr	r3, [r3, #0]
10004d3c:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10004d40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d44:	430b      	orrs	r3, r1
10004d46:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10004d4a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d52:	681b      	ldr	r3, [r3, #0]
10004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
10004d58:	2100      	movs	r1, #0
10004d5a:	6539      	str	r1, [r7, #80]	@ 0x50
10004d5c:	f003 0304 	and.w	r3, r3, #4
10004d60:	657b      	str	r3, [r7, #84]	@ 0x54
10004d62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
10004d66:	460b      	mov	r3, r1
10004d68:	4313      	orrs	r3, r2
10004d6a:	d037      	beq.n	10004ddc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10004d6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d74:	681b      	ldr	r3, [r3, #0]
10004d76:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
10004d7a:	2b01      	cmp	r3, #1
10004d7c:	d11c      	bne.n	10004db8 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004d7e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d86:	681b      	ldr	r3, [r3, #0]
10004d88:	3380      	adds	r3, #128	@ 0x80
10004d8a:	4618      	mov	r0, r3
10004d8c:	f7fe fbd2 	bl	10003534 <RCCEx_PLL4_Config>
10004d90:	4603      	mov	r3, r0
10004d92:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004d96:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d9a:	2b00      	cmp	r3, #0
10004d9c:	d002      	beq.n	10004da4 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
10004d9e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004da2:	e3a9      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004da4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004da8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004dac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004db4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10004db8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004dbc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10004dc0:	f023 0103 	bic.w	r1, r3, #3
10004dc4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004dc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004dcc:	681b      	ldr	r3, [r3, #0]
10004dce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
10004dd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004dd6:	430b      	orrs	r3, r1
10004dd8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10004ddc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004de0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004de4:	681b      	ldr	r3, [r3, #0]
10004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
10004dea:	2100      	movs	r1, #0
10004dec:	64b9      	str	r1, [r7, #72]	@ 0x48
10004dee:	f003 0308 	and.w	r3, r3, #8
10004df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
10004df4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
10004df8:	460b      	mov	r3, r1
10004dfa:	4313      	orrs	r3, r2
10004dfc:	d037      	beq.n	10004e6e <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10004dfe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e06:	681b      	ldr	r3, [r3, #0]
10004e08:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10004e0c:	2b01      	cmp	r3, #1
10004e0e:	d11c      	bne.n	10004e4a <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004e10:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e18:	681b      	ldr	r3, [r3, #0]
10004e1a:	3380      	adds	r3, #128	@ 0x80
10004e1c:	4618      	mov	r0, r3
10004e1e:	f7fe fb89 	bl	10003534 <RCCEx_PLL4_Config>
10004e22:	4603      	mov	r3, r0
10004e24:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004e28:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004e2c:	2b00      	cmp	r3, #0
10004e2e:	d002      	beq.n	10004e36 <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10004e30:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004e34:	e360      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004e36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e3a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004e3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004e46:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10004e4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e4e:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
10004e52:	f023 0103 	bic.w	r1, r3, #3
10004e56:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e5e:	681b      	ldr	r3, [r3, #0]
10004e60:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10004e64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004e68:	430b      	orrs	r3, r1
10004e6a:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10004e6e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e76:	681b      	ldr	r3, [r3, #0]
10004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e7c:	2100      	movs	r1, #0
10004e7e:	6439      	str	r1, [r7, #64]	@ 0x40
10004e80:	f003 0310 	and.w	r3, r3, #16
10004e84:	647b      	str	r3, [r7, #68]	@ 0x44
10004e86:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
10004e8a:	460b      	mov	r3, r1
10004e8c:	4313      	orrs	r3, r2
10004e8e:	d011      	beq.n	10004eb4 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10004e90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10004e98:	f023 0103 	bic.w	r1, r3, #3
10004e9c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ea0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ea4:	681b      	ldr	r3, [r3, #0]
10004ea6:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
10004eaa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004eae:	430b      	orrs	r3, r1
10004eb0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10004eb4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ebc:	681b      	ldr	r3, [r3, #0]
10004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
10004ec2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
10004ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
10004ec8:	2300      	movs	r3, #0
10004eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
10004ecc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
10004ed0:	460b      	mov	r3, r1
10004ed2:	4313      	orrs	r3, r2
10004ed4:	d037      	beq.n	10004f46 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10004ed6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004eda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ede:	681b      	ldr	r3, [r3, #0]
10004ee0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
10004ee4:	2b01      	cmp	r3, #1
10004ee6:	d11c      	bne.n	10004f22 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004ee8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004eec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ef0:	681b      	ldr	r3, [r3, #0]
10004ef2:	3380      	adds	r3, #128	@ 0x80
10004ef4:	4618      	mov	r0, r3
10004ef6:	f7fe fb1d 	bl	10003534 <RCCEx_PLL4_Config>
10004efa:	4603      	mov	r3, r0
10004efc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004f00:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f04:	2b00      	cmp	r3, #0
10004f06:	d002      	beq.n	10004f0e <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
10004f08:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f0c:	e2f4      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004f0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f12:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004f16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f1a:	f043 0310 	orr.w	r3, r3, #16
10004f1e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10004f22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f26:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
10004f2a:	f023 0101 	bic.w	r1, r3, #1
10004f2e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f36:	681b      	ldr	r3, [r3, #0]
10004f38:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
10004f3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f40:	430b      	orrs	r3, r1
10004f42:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
10004f46:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f4e:	681b      	ldr	r3, [r3, #0]
10004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
10004f54:	f002 0308 	and.w	r3, r2, #8
10004f58:	633b      	str	r3, [r7, #48]	@ 0x30
10004f5a:	2300      	movs	r3, #0
10004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
10004f5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
10004f62:	460b      	mov	r3, r1
10004f64:	4313      	orrs	r3, r2
10004f66:	d059      	beq.n	1000501c <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10004f68:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f70:	681b      	ldr	r3, [r3, #0]
10004f72:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10004f76:	2b00      	cmp	r3, #0
10004f78:	d002      	beq.n	10004f80 <HAL_RCCEx_PeriphCLKConfig+0x179c>
10004f7a:	2b02      	cmp	r3, #2
10004f7c:	d01e      	beq.n	10004fbc <HAL_RCCEx_PeriphCLKConfig+0x17d8>
10004f7e:	e03b      	b.n	10004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004f80:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f88:	681b      	ldr	r3, [r3, #0]
10004f8a:	3380      	adds	r3, #128	@ 0x80
10004f8c:	4618      	mov	r0, r3
10004f8e:	f7fe fad1 	bl	10003534 <RCCEx_PLL4_Config>
10004f92:	4603      	mov	r3, r0
10004f94:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004f98:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f9c:	2b00      	cmp	r3, #0
10004f9e:	d002      	beq.n	10004fa6 <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10004fa0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fa4:	e2a8      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004fa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004faa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004fae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004fb6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
10004fba:	e01d      	b.n	10004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004fbc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004fc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004fc4:	681b      	ldr	r3, [r3, #0]
10004fc6:	3344      	adds	r3, #68	@ 0x44
10004fc8:	4618      	mov	r0, r3
10004fca:	f7fe f949 	bl	10003260 <RCCEx_PLL3_Config>
10004fce:	4603      	mov	r3, r0
10004fd0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004fd4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fd8:	2b00      	cmp	r3, #0
10004fda:	d002      	beq.n	10004fe2 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10004fdc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fe0:	e28a      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004fe2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004fe6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004fea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004fee:	f043 0320 	orr.w	r3, r3, #32
10004ff2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004ff6:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10004ff8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ffc:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
10005000:	f023 0103 	bic.w	r1, r3, #3
10005004:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005008:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000500c:	681b      	ldr	r3, [r3, #0]
1000500e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10005012:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005016:	430b      	orrs	r3, r1
10005018:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
1000501c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005020:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005024:	681b      	ldr	r3, [r3, #0]
10005026:	e9d3 2300 	ldrd	r2, r3, [r3]
1000502a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
1000502e:	62bb      	str	r3, [r7, #40]	@ 0x28
10005030:	2300      	movs	r3, #0
10005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
10005034:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
10005038:	460b      	mov	r3, r1
1000503a:	4313      	orrs	r3, r2
1000503c:	d058      	beq.n	100050f0 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
1000503e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005042:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005046:	681b      	ldr	r3, [r3, #0]
10005048:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000504c:	2b01      	cmp	r3, #1
1000504e:	d01f      	beq.n	10005090 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10005050:	2b02      	cmp	r3, #2
10005052:	d13b      	bne.n	100050cc <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005054:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005058:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000505c:	681b      	ldr	r3, [r3, #0]
1000505e:	3344      	adds	r3, #68	@ 0x44
10005060:	4618      	mov	r0, r3
10005062:	f7fe f8fd 	bl	10003260 <RCCEx_PLL3_Config>
10005066:	4603      	mov	r3, r0
10005068:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000506c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005070:	2b00      	cmp	r3, #0
10005072:	d002      	beq.n	1000507a <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10005074:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005078:	e23e      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000507a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000507e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005082:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005086:	f043 0320 	orr.w	r3, r3, #32
1000508a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000508e:	e01d      	b.n	100050cc <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005090:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005094:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005098:	681b      	ldr	r3, [r3, #0]
1000509a:	3380      	adds	r3, #128	@ 0x80
1000509c:	4618      	mov	r0, r3
1000509e:	f7fe fa49 	bl	10003534 <RCCEx_PLL4_Config>
100050a2:	4603      	mov	r3, r0
100050a4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100050a8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050ac:	2b00      	cmp	r3, #0
100050ae:	d002      	beq.n	100050b6 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
100050b0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050b4:	e220      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100050b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050ba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100050be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100050c2:	f043 0310 	orr.w	r3, r3, #16
100050c6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100050ca:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
100050cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050d0:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
100050d4:	f023 0207 	bic.w	r2, r3, #7
100050d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100050dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100050e0:	681b      	ldr	r3, [r3, #0]
100050e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100050e6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100050ea:	4313      	orrs	r3, r2
100050ec:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
100050f0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100050f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100050f8:	681b      	ldr	r3, [r3, #0]
100050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
100050fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
10005102:	623b      	str	r3, [r7, #32]
10005104:	2300      	movs	r3, #0
10005106:	627b      	str	r3, [r7, #36]	@ 0x24
10005108:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
1000510c:	460b      	mov	r3, r1
1000510e:	4313      	orrs	r3, r2
10005110:	d037      	beq.n	10005182 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10005112:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005116:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000511a:	681b      	ldr	r3, [r3, #0]
1000511c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10005120:	2b01      	cmp	r3, #1
10005122:	d11c      	bne.n	1000515e <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005124:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005128:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000512c:	681b      	ldr	r3, [r3, #0]
1000512e:	3380      	adds	r3, #128	@ 0x80
10005130:	4618      	mov	r0, r3
10005132:	f7fe f9ff 	bl	10003534 <RCCEx_PLL4_Config>
10005136:	4603      	mov	r3, r0
10005138:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000513c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005140:	2b00      	cmp	r3, #0
10005142:	d002      	beq.n	1000514a <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10005144:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005148:	e1d6      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000514a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000514e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005152:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005156:	f043 0320 	orr.w	r3, r3, #32
1000515a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
1000515e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005162:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
10005166:	f023 0207 	bic.w	r2, r3, #7
1000516a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000516e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005172:	681b      	ldr	r3, [r3, #0]
10005174:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10005178:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000517c:	4313      	orrs	r3, r2
1000517e:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10005182:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005186:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000518a:	681b      	ldr	r3, [r3, #0]
1000518c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005190:	f002 0340 	and.w	r3, r2, #64	@ 0x40
10005194:	61bb      	str	r3, [r7, #24]
10005196:	2300      	movs	r3, #0
10005198:	61fb      	str	r3, [r7, #28]
1000519a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
1000519e:	460b      	mov	r3, r1
100051a0:	4313      	orrs	r3, r2
100051a2:	d058      	beq.n	10005256 <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100051a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051ac:	681b      	ldr	r3, [r3, #0]
100051ae:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
100051b2:	2b01      	cmp	r3, #1
100051b4:	d01f      	beq.n	100051f6 <HAL_RCCEx_PeriphCLKConfig+0x1a12>
100051b6:	2b02      	cmp	r3, #2
100051b8:	d13b      	bne.n	10005232 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100051ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051c2:	681b      	ldr	r3, [r3, #0]
100051c4:	3344      	adds	r3, #68	@ 0x44
100051c6:	4618      	mov	r0, r3
100051c8:	f7fe f84a 	bl	10003260 <RCCEx_PLL3_Config>
100051cc:	4603      	mov	r3, r0
100051ce:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100051d2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100051d6:	2b00      	cmp	r3, #0
100051d8:	d002      	beq.n	100051e0 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
100051da:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100051de:	e18b      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100051e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100051e4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100051e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100051ec:	f043 0320 	orr.w	r3, r3, #32
100051f0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100051f4:	e01d      	b.n	10005232 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100051f6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051fe:	681b      	ldr	r3, [r3, #0]
10005200:	3380      	adds	r3, #128	@ 0x80
10005202:	4618      	mov	r0, r3
10005204:	f7fe f996 	bl	10003534 <RCCEx_PLL4_Config>
10005208:	4603      	mov	r3, r0
1000520a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000520e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005212:	2b00      	cmp	r3, #0
10005214:	d002      	beq.n	1000521c <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
10005216:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000521a:	e16d      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000521c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005220:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005224:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005228:	f043 0310 	orr.w	r3, r3, #16
1000522c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005230:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10005232:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005236:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
1000523a:	f023 0207 	bic.w	r2, r3, #7
1000523e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005242:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005246:	681b      	ldr	r3, [r3, #0]
10005248:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1000524c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005250:	4313      	orrs	r3, r2
10005252:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10005256:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000525a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000525e:	681b      	ldr	r3, [r3, #0]
10005260:	e9d3 2300 	ldrd	r2, r3, [r3]
10005264:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
10005268:	613b      	str	r3, [r7, #16]
1000526a:	2300      	movs	r3, #0
1000526c:	617b      	str	r3, [r7, #20]
1000526e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10005272:	460b      	mov	r3, r1
10005274:	4313      	orrs	r3, r2
10005276:	f000 80c6 	beq.w	10005406 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000527a:	4ba2      	ldr	r3, [pc, #648]	@ (10005504 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
1000527c:	681b      	ldr	r3, [r3, #0]
1000527e:	4aa1      	ldr	r2, [pc, #644]	@ (10005504 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10005280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10005284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10005286:	f7fb fe89 	bl	10000f9c <HAL_GetTick>
1000528a:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000528e:	e00a      	b.n	100052a6 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10005290:	f7fb fe84 	bl	10000f9c <HAL_GetTick>
10005294:	4602      	mov	r2, r0
10005296:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
1000529a:	1ad3      	subs	r3, r2, r3
1000529c:	2b64      	cmp	r3, #100	@ 0x64
1000529e:	d902      	bls.n	100052a6 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
100052a0:	2303      	movs	r3, #3
100052a2:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100052a6:	4b97      	ldr	r3, [pc, #604]	@ (10005504 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100052a8:	681b      	ldr	r3, [r3, #0]
100052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100052ae:	2b00      	cmp	r3, #0
100052b0:	d0ee      	beq.n	10005290 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
100052b2:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
100052b6:	2b00      	cmp	r3, #0
100052b8:	f040 80a2 	bne.w	10005400 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100052bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
100052c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100052c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100052cc:	681b      	ldr	r3, [r3, #0]
100052ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
100052d2:	4053      	eors	r3, r2
100052d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
100052d8:	2b00      	cmp	r3, #0
100052da:	f000 8086 	beq.w	100053ea <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
100052de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100052e6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
100052ea:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
100052ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100052f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100052fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
100052fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10005302:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005306:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000530a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000530e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10005312:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10005316:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000531a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000531e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
10005322:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10005326:	f003 0330 	and.w	r3, r3, #48	@ 0x30
1000532a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000532e:	4313      	orrs	r3, r2
10005330:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10005334:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005338:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000533c:	2204      	movs	r2, #4
1000533e:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10005340:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10005344:	f003 020b 	and.w	r2, r3, #11
10005348:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000534c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005350:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10005352:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005356:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000535a:	2200      	movs	r2, #0
1000535c:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000535e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005362:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005366:	2200      	movs	r2, #0
10005368:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000536a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000536e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005372:	2200      	movs	r2, #0
10005374:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10005378:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000537c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005380:	2200      	movs	r2, #0
10005382:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10005386:	f507 7390 	add.w	r3, r7, #288	@ 0x120
1000538a:	4618      	mov	r0, r3
1000538c:	f7fc f96e 	bl	1000166c <HAL_RCC_OscConfig>
10005390:	4603      	mov	r3, r0
10005392:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
10005396:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000539a:	2b00      	cmp	r3, #0
1000539c:	d002      	beq.n	100053a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
1000539e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
100053a2:	e0a9      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100053a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100053a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100053ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
100053b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053b8:	681b      	ldr	r3, [r3, #0]
100053ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
100053be:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100053c2:	4313      	orrs	r3, r2
100053c4:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
100053c8:	4b4f      	ldr	r3, [pc, #316]	@ (10005508 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
100053ca:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100053ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100053d2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
100053d6:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
100053da:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
100053de:	400b      	ands	r3, r1
100053e0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100053e4:	4313      	orrs	r3, r2
100053e6:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
100053ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100053ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100053f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100053f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
100053fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
100053fe:	e002      	b.n	10005406 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10005400:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005404:	e078      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
10005406:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000540a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000540e:	681b      	ldr	r3, [r3, #0]
10005410:	e9d3 2300 	ldrd	r2, r3, [r3]
10005414:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
10005418:	60bb      	str	r3, [r7, #8]
1000541a:	2300      	movs	r3, #0
1000541c:	60fb      	str	r3, [r7, #12]
1000541e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10005422:	460b      	mov	r3, r1
10005424:	4313      	orrs	r3, r2
10005426:	d02a      	beq.n	1000547e <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10005428:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000542c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10005430:	f023 0201 	bic.w	r2, r3, #1
10005434:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005438:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000543c:	681b      	ldr	r3, [r3, #0]
1000543e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
10005442:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005446:	4313      	orrs	r3, r2
10005448:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000544c:	f7fb fda6 	bl	10000f9c <HAL_GetTick>
10005450:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10005454:	e00a      	b.n	1000546c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005456:	f7fb fda1 	bl	10000f9c <HAL_GetTick>
1000545a:	4602      	mov	r2, r0
1000545c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005460:	1ad3      	subs	r3, r2, r3
10005462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10005466:	d901      	bls.n	1000546c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10005468:	2303      	movs	r3, #3
1000546a:	e045      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000546c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005470:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10005474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000547c:	d1eb      	bne.n	10005456 <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
1000547e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005482:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005486:	681b      	ldr	r3, [r3, #0]
10005488:	e9d3 2300 	ldrd	r2, r3, [r3]
1000548c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
10005490:	603b      	str	r3, [r7, #0]
10005492:	2300      	movs	r3, #0
10005494:	607b      	str	r3, [r7, #4]
10005496:	e9d7 1200 	ldrd	r1, r2, [r7]
1000549a:	460b      	mov	r3, r1
1000549c:	4313      	orrs	r3, r2
1000549e:	d02a      	beq.n	100054f6 <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
100054a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100054a4:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
100054a8:	f023 0201 	bic.w	r2, r3, #1
100054ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100054b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100054b4:	681b      	ldr	r3, [r3, #0]
100054b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
100054ba:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100054be:	4313      	orrs	r3, r2
100054c0:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100054c4:	f7fb fd6a 	bl	10000f9c <HAL_GetTick>
100054c8:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100054cc:	e00a      	b.n	100054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100054ce:	f7fb fd65 	bl	10000f9c <HAL_GetTick>
100054d2:	4602      	mov	r2, r0
100054d4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
100054d8:	1ad3      	subs	r3, r2, r3
100054da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100054de:	d901      	bls.n	100054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
100054e0:	2303      	movs	r3, #3
100054e2:	e009      	b.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100054e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100054e8:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
100054ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100054f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100054f4:	d1eb      	bne.n	100054ce <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
100054f6:	2300      	movs	r3, #0
}
100054f8:	4618      	mov	r0, r3
100054fa:	f507 7712 	add.w	r7, r7, #584	@ 0x248
100054fe:	46bd      	mov	sp, r7
10005500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10005504:	50001000 	.word	0x50001000
10005508:	7fecfdc0 	.word	0x7fecfdc0

1000550c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
1000550c:	b580      	push	{r7, lr}
1000550e:	b082      	sub	sp, #8
10005510:	af00      	add	r7, sp, #0
10005512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10005514:	687b      	ldr	r3, [r7, #4]
10005516:	2b00      	cmp	r3, #0
10005518:	d101      	bne.n	1000551e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
1000551a:	2301      	movs	r3, #1
1000551c:	e04a      	b.n	100055b4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
1000551e:	687b      	ldr	r3, [r7, #4]
10005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10005524:	2b00      	cmp	r3, #0
10005526:	d106      	bne.n	10005536 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10005528:	687b      	ldr	r3, [r7, #4]
1000552a:	2200      	movs	r2, #0
1000552c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10005530:	6878      	ldr	r0, [r7, #4]
10005532:	f7fb fc87 	bl	10000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10005536:	687b      	ldr	r3, [r7, #4]
10005538:	2224      	movs	r2, #36	@ 0x24
1000553a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
1000553e:	687b      	ldr	r3, [r7, #4]
10005540:	681b      	ldr	r3, [r3, #0]
10005542:	681a      	ldr	r2, [r3, #0]
10005544:	687b      	ldr	r3, [r7, #4]
10005546:	681b      	ldr	r3, [r3, #0]
10005548:	f022 0201 	bic.w	r2, r2, #1
1000554c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
1000554e:	6878      	ldr	r0, [r7, #4]
10005550:	f000 f834 	bl	100055bc <UART_SetConfig>
10005554:	4603      	mov	r3, r0
10005556:	2b01      	cmp	r3, #1
10005558:	d101      	bne.n	1000555e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
1000555a:	2301      	movs	r3, #1
1000555c:	e02a      	b.n	100055b4 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1000555e:	687b      	ldr	r3, [r7, #4]
10005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005562:	2b00      	cmp	r3, #0
10005564:	d002      	beq.n	1000556c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10005566:	6878      	ldr	r0, [r7, #4]
10005568:	f001 f8ce 	bl	10006708 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1000556c:	687b      	ldr	r3, [r7, #4]
1000556e:	681b      	ldr	r3, [r3, #0]
10005570:	685a      	ldr	r2, [r3, #4]
10005572:	687b      	ldr	r3, [r7, #4]
10005574:	681b      	ldr	r3, [r3, #0]
10005576:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
1000557a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
1000557c:	687b      	ldr	r3, [r7, #4]
1000557e:	681b      	ldr	r3, [r3, #0]
10005580:	689a      	ldr	r2, [r3, #8]
10005582:	687b      	ldr	r3, [r7, #4]
10005584:	681b      	ldr	r3, [r3, #0]
10005586:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
1000558a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
1000558c:	687b      	ldr	r3, [r7, #4]
1000558e:	681b      	ldr	r3, [r3, #0]
10005590:	689a      	ldr	r2, [r3, #8]
10005592:	687b      	ldr	r3, [r7, #4]
10005594:	681b      	ldr	r3, [r3, #0]
10005596:	f042 0208 	orr.w	r2, r2, #8
1000559a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1000559c:	687b      	ldr	r3, [r7, #4]
1000559e:	681b      	ldr	r3, [r3, #0]
100055a0:	681a      	ldr	r2, [r3, #0]
100055a2:	687b      	ldr	r3, [r7, #4]
100055a4:	681b      	ldr	r3, [r3, #0]
100055a6:	f042 0201 	orr.w	r2, r2, #1
100055aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
100055ac:	6878      	ldr	r0, [r7, #4]
100055ae:	f001 f94d 	bl	1000684c <UART_CheckIdleState>
100055b2:	4603      	mov	r3, r0
}
100055b4:	4618      	mov	r0, r3
100055b6:	3708      	adds	r7, #8
100055b8:	46bd      	mov	sp, r7
100055ba:	bd80      	pop	{r7, pc}

100055bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
100055bc:	b580      	push	{r7, lr}
100055be:	b08e      	sub	sp, #56	@ 0x38
100055c0:	af00      	add	r7, sp, #0
100055c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
100055c4:	2300      	movs	r3, #0
100055c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
100055c8:	2300      	movs	r3, #0
100055ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
100055ce:	687b      	ldr	r3, [r7, #4]
100055d0:	689a      	ldr	r2, [r3, #8]
100055d2:	687b      	ldr	r3, [r7, #4]
100055d4:	691b      	ldr	r3, [r3, #16]
100055d6:	431a      	orrs	r2, r3
100055d8:	687b      	ldr	r3, [r7, #4]
100055da:	695b      	ldr	r3, [r3, #20]
100055dc:	431a      	orrs	r2, r3
100055de:	687b      	ldr	r3, [r7, #4]
100055e0:	69db      	ldr	r3, [r3, #28]
100055e2:	4313      	orrs	r3, r2
100055e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
100055e6:	687b      	ldr	r3, [r7, #4]
100055e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100055ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100055ec:	4313      	orrs	r3, r2
100055ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
100055f0:	687b      	ldr	r3, [r7, #4]
100055f2:	681b      	ldr	r3, [r3, #0]
100055f4:	681a      	ldr	r2, [r3, #0]
100055f6:	4bb1      	ldr	r3, [pc, #708]	@ (100058bc <UART_SetConfig+0x300>)
100055f8:	4013      	ands	r3, r2
100055fa:	687a      	ldr	r2, [r7, #4]
100055fc:	6812      	ldr	r2, [r2, #0]
100055fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10005600:	430b      	orrs	r3, r1
10005602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10005604:	687b      	ldr	r3, [r7, #4]
10005606:	681b      	ldr	r3, [r3, #0]
10005608:	685b      	ldr	r3, [r3, #4]
1000560a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
1000560e:	687b      	ldr	r3, [r7, #4]
10005610:	68da      	ldr	r2, [r3, #12]
10005612:	687b      	ldr	r3, [r7, #4]
10005614:	681b      	ldr	r3, [r3, #0]
10005616:	430a      	orrs	r2, r1
10005618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1000561a:	687b      	ldr	r3, [r7, #4]
1000561c:	699b      	ldr	r3, [r3, #24]
1000561e:	62bb      	str	r3, [r7, #40]	@ 0x28

  tmpreg |= huart->Init.OneBitSampling;
10005620:	687b      	ldr	r3, [r7, #4]
10005622:	6a1b      	ldr	r3, [r3, #32]
10005624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10005626:	4313      	orrs	r3, r2
10005628:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1000562a:	687b      	ldr	r3, [r7, #4]
1000562c:	681b      	ldr	r3, [r3, #0]
1000562e:	689b      	ldr	r3, [r3, #8]
10005630:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
10005634:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
10005638:	687a      	ldr	r2, [r7, #4]
1000563a:	6812      	ldr	r2, [r2, #0]
1000563c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
1000563e:	430b      	orrs	r3, r1
10005640:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10005642:	687b      	ldr	r3, [r7, #4]
10005644:	681b      	ldr	r3, [r3, #0]
10005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10005648:	f023 010f 	bic.w	r1, r3, #15
1000564c:	687b      	ldr	r3, [r7, #4]
1000564e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10005650:	687b      	ldr	r3, [r7, #4]
10005652:	681b      	ldr	r3, [r3, #0]
10005654:	430a      	orrs	r2, r1
10005656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10005658:	687b      	ldr	r3, [r7, #4]
1000565a:	681b      	ldr	r3, [r3, #0]
1000565c:	f1b3 4fb8 	cmp.w	r3, #1543503872	@ 0x5c000000
10005660:	d132      	bne.n	100056c8 <UART_SetConfig+0x10c>
10005662:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005666:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
1000566a:	f003 0307 	and.w	r3, r3, #7
1000566e:	2b05      	cmp	r3, #5
10005670:	d826      	bhi.n	100056c0 <UART_SetConfig+0x104>
10005672:	a201      	add	r2, pc, #4	@ (adr r2, 10005678 <UART_SetConfig+0xbc>)
10005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005678:	10005691 	.word	0x10005691
1000567c:	10005699 	.word	0x10005699
10005680:	100056a1 	.word	0x100056a1
10005684:	100056a9 	.word	0x100056a9
10005688:	100056b1 	.word	0x100056b1
1000568c:	100056b9 	.word	0x100056b9
10005690:	2302      	movs	r3, #2
10005692:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005696:	e184      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005698:	2304      	movs	r3, #4
1000569a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000569e:	e180      	b.n	100059a2 <UART_SetConfig+0x3e6>
100056a0:	2310      	movs	r3, #16
100056a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100056a6:	e17c      	b.n	100059a2 <UART_SetConfig+0x3e6>
100056a8:	2320      	movs	r3, #32
100056aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100056ae:	e178      	b.n	100059a2 <UART_SetConfig+0x3e6>
100056b0:	2308      	movs	r3, #8
100056b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100056b6:	e174      	b.n	100059a2 <UART_SetConfig+0x3e6>
100056b8:	2340      	movs	r3, #64	@ 0x40
100056ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100056be:	e170      	b.n	100059a2 <UART_SetConfig+0x3e6>
100056c0:	2380      	movs	r3, #128	@ 0x80
100056c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100056c6:	e16c      	b.n	100059a2 <UART_SetConfig+0x3e6>
100056c8:	687b      	ldr	r3, [r7, #4]
100056ca:	681b      	ldr	r3, [r3, #0]
100056cc:	4a7c      	ldr	r2, [pc, #496]	@ (100058c0 <UART_SetConfig+0x304>)
100056ce:	4293      	cmp	r3, r2
100056d0:	d12c      	bne.n	1000572c <UART_SetConfig+0x170>
100056d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100056d6:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
100056da:	f003 0307 	and.w	r3, r3, #7
100056de:	2b04      	cmp	r3, #4
100056e0:	d820      	bhi.n	10005724 <UART_SetConfig+0x168>
100056e2:	a201      	add	r2, pc, #4	@ (adr r2, 100056e8 <UART_SetConfig+0x12c>)
100056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100056e8:	100056fd 	.word	0x100056fd
100056ec:	10005705 	.word	0x10005705
100056f0:	1000570d 	.word	0x1000570d
100056f4:	10005715 	.word	0x10005715
100056f8:	1000571d 	.word	0x1000571d
100056fc:	2300      	movs	r3, #0
100056fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005702:	e14e      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005704:	2308      	movs	r3, #8
10005706:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000570a:	e14a      	b.n	100059a2 <UART_SetConfig+0x3e6>
1000570c:	2310      	movs	r3, #16
1000570e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005712:	e146      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005714:	2320      	movs	r3, #32
10005716:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000571a:	e142      	b.n	100059a2 <UART_SetConfig+0x3e6>
1000571c:	2340      	movs	r3, #64	@ 0x40
1000571e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005722:	e13e      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005724:	2380      	movs	r3, #128	@ 0x80
10005726:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000572a:	e13a      	b.n	100059a2 <UART_SetConfig+0x3e6>
1000572c:	687b      	ldr	r3, [r7, #4]
1000572e:	681b      	ldr	r3, [r3, #0]
10005730:	4a64      	ldr	r2, [pc, #400]	@ (100058c4 <UART_SetConfig+0x308>)
10005732:	4293      	cmp	r3, r2
10005734:	d12c      	bne.n	10005790 <UART_SetConfig+0x1d4>
10005736:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000573a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
1000573e:	f003 0307 	and.w	r3, r3, #7
10005742:	2b04      	cmp	r3, #4
10005744:	d820      	bhi.n	10005788 <UART_SetConfig+0x1cc>
10005746:	a201      	add	r2, pc, #4	@ (adr r2, 1000574c <UART_SetConfig+0x190>)
10005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000574c:	10005761 	.word	0x10005761
10005750:	10005769 	.word	0x10005769
10005754:	10005771 	.word	0x10005771
10005758:	10005779 	.word	0x10005779
1000575c:	10005781 	.word	0x10005781
10005760:	2300      	movs	r3, #0
10005762:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005766:	e11c      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005768:	2308      	movs	r3, #8
1000576a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000576e:	e118      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005770:	2310      	movs	r3, #16
10005772:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005776:	e114      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005778:	2320      	movs	r3, #32
1000577a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000577e:	e110      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005780:	2340      	movs	r3, #64	@ 0x40
10005782:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005786:	e10c      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005788:	2380      	movs	r3, #128	@ 0x80
1000578a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000578e:	e108      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005790:	687b      	ldr	r3, [r7, #4]
10005792:	681b      	ldr	r3, [r3, #0]
10005794:	4a4c      	ldr	r2, [pc, #304]	@ (100058c8 <UART_SetConfig+0x30c>)
10005796:	4293      	cmp	r3, r2
10005798:	d12c      	bne.n	100057f4 <UART_SetConfig+0x238>
1000579a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000579e:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
100057a2:	f003 0307 	and.w	r3, r3, #7
100057a6:	2b04      	cmp	r3, #4
100057a8:	d820      	bhi.n	100057ec <UART_SetConfig+0x230>
100057aa:	a201      	add	r2, pc, #4	@ (adr r2, 100057b0 <UART_SetConfig+0x1f4>)
100057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100057b0:	100057c5 	.word	0x100057c5
100057b4:	100057cd 	.word	0x100057cd
100057b8:	100057d5 	.word	0x100057d5
100057bc:	100057dd 	.word	0x100057dd
100057c0:	100057e5 	.word	0x100057e5
100057c4:	2300      	movs	r3, #0
100057c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100057ca:	e0ea      	b.n	100059a2 <UART_SetConfig+0x3e6>
100057cc:	2308      	movs	r3, #8
100057ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100057d2:	e0e6      	b.n	100059a2 <UART_SetConfig+0x3e6>
100057d4:	2310      	movs	r3, #16
100057d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100057da:	e0e2      	b.n	100059a2 <UART_SetConfig+0x3e6>
100057dc:	2320      	movs	r3, #32
100057de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100057e2:	e0de      	b.n	100059a2 <UART_SetConfig+0x3e6>
100057e4:	2340      	movs	r3, #64	@ 0x40
100057e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100057ea:	e0da      	b.n	100059a2 <UART_SetConfig+0x3e6>
100057ec:	2380      	movs	r3, #128	@ 0x80
100057ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100057f2:	e0d6      	b.n	100059a2 <UART_SetConfig+0x3e6>
100057f4:	687b      	ldr	r3, [r7, #4]
100057f6:	681b      	ldr	r3, [r3, #0]
100057f8:	4a34      	ldr	r2, [pc, #208]	@ (100058cc <UART_SetConfig+0x310>)
100057fa:	4293      	cmp	r3, r2
100057fc:	d12c      	bne.n	10005858 <UART_SetConfig+0x29c>
100057fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005802:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10005806:	f003 0307 	and.w	r3, r3, #7
1000580a:	2b04      	cmp	r3, #4
1000580c:	d820      	bhi.n	10005850 <UART_SetConfig+0x294>
1000580e:	a201      	add	r2, pc, #4	@ (adr r2, 10005814 <UART_SetConfig+0x258>)
10005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005814:	10005829 	.word	0x10005829
10005818:	10005831 	.word	0x10005831
1000581c:	10005839 	.word	0x10005839
10005820:	10005841 	.word	0x10005841
10005824:	10005849 	.word	0x10005849
10005828:	2300      	movs	r3, #0
1000582a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000582e:	e0b8      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005830:	2308      	movs	r3, #8
10005832:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005836:	e0b4      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005838:	2310      	movs	r3, #16
1000583a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000583e:	e0b0      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005840:	2320      	movs	r3, #32
10005842:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005846:	e0ac      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005848:	2340      	movs	r3, #64	@ 0x40
1000584a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000584e:	e0a8      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005850:	2380      	movs	r3, #128	@ 0x80
10005852:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005856:	e0a4      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005858:	687b      	ldr	r3, [r7, #4]
1000585a:	681b      	ldr	r3, [r3, #0]
1000585c:	4a1c      	ldr	r2, [pc, #112]	@ (100058d0 <UART_SetConfig+0x314>)
1000585e:	4293      	cmp	r3, r2
10005860:	d138      	bne.n	100058d4 <UART_SetConfig+0x318>
10005862:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005866:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
1000586a:	f003 0307 	and.w	r3, r3, #7
1000586e:	2b04      	cmp	r3, #4
10005870:	d820      	bhi.n	100058b4 <UART_SetConfig+0x2f8>
10005872:	a201      	add	r2, pc, #4	@ (adr r2, 10005878 <UART_SetConfig+0x2bc>)
10005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005878:	1000588d 	.word	0x1000588d
1000587c:	10005895 	.word	0x10005895
10005880:	1000589d 	.word	0x1000589d
10005884:	100058a5 	.word	0x100058a5
10005888:	100058ad 	.word	0x100058ad
1000588c:	2301      	movs	r3, #1
1000588e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005892:	e086      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005894:	2308      	movs	r3, #8
10005896:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000589a:	e082      	b.n	100059a2 <UART_SetConfig+0x3e6>
1000589c:	2310      	movs	r3, #16
1000589e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100058a2:	e07e      	b.n	100059a2 <UART_SetConfig+0x3e6>
100058a4:	2320      	movs	r3, #32
100058a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100058aa:	e07a      	b.n	100059a2 <UART_SetConfig+0x3e6>
100058ac:	2340      	movs	r3, #64	@ 0x40
100058ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100058b2:	e076      	b.n	100059a2 <UART_SetConfig+0x3e6>
100058b4:	2380      	movs	r3, #128	@ 0x80
100058b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100058ba:	e072      	b.n	100059a2 <UART_SetConfig+0x3e6>
100058bc:	cfff69f3 	.word	0xcfff69f3
100058c0:	4000e000 	.word	0x4000e000
100058c4:	4000f000 	.word	0x4000f000
100058c8:	40010000 	.word	0x40010000
100058cc:	40011000 	.word	0x40011000
100058d0:	44003000 	.word	0x44003000
100058d4:	687b      	ldr	r3, [r7, #4]
100058d6:	681b      	ldr	r3, [r3, #0]
100058d8:	4aab      	ldr	r2, [pc, #684]	@ (10005b88 <UART_SetConfig+0x5cc>)
100058da:	4293      	cmp	r3, r2
100058dc:	d12c      	bne.n	10005938 <UART_SetConfig+0x37c>
100058de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058e2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
100058e6:	f003 0307 	and.w	r3, r3, #7
100058ea:	2b04      	cmp	r3, #4
100058ec:	d820      	bhi.n	10005930 <UART_SetConfig+0x374>
100058ee:	a201      	add	r2, pc, #4	@ (adr r2, 100058f4 <UART_SetConfig+0x338>)
100058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100058f4:	10005909 	.word	0x10005909
100058f8:	10005911 	.word	0x10005911
100058fc:	10005919 	.word	0x10005919
10005900:	10005921 	.word	0x10005921
10005904:	10005929 	.word	0x10005929
10005908:	2300      	movs	r3, #0
1000590a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000590e:	e048      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005910:	2308      	movs	r3, #8
10005912:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005916:	e044      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005918:	2310      	movs	r3, #16
1000591a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000591e:	e040      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005920:	2320      	movs	r3, #32
10005922:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005926:	e03c      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005928:	2340      	movs	r3, #64	@ 0x40
1000592a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000592e:	e038      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005930:	2380      	movs	r3, #128	@ 0x80
10005932:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005936:	e034      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005938:	687b      	ldr	r3, [r7, #4]
1000593a:	681b      	ldr	r3, [r3, #0]
1000593c:	4a93      	ldr	r2, [pc, #588]	@ (10005b8c <UART_SetConfig+0x5d0>)
1000593e:	4293      	cmp	r3, r2
10005940:	d12c      	bne.n	1000599c <UART_SetConfig+0x3e0>
10005942:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005946:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
1000594a:	f003 0307 	and.w	r3, r3, #7
1000594e:	2b04      	cmp	r3, #4
10005950:	d820      	bhi.n	10005994 <UART_SetConfig+0x3d8>
10005952:	a201      	add	r2, pc, #4	@ (adr r2, 10005958 <UART_SetConfig+0x39c>)
10005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005958:	1000596d 	.word	0x1000596d
1000595c:	10005975 	.word	0x10005975
10005960:	1000597d 	.word	0x1000597d
10005964:	10005985 	.word	0x10005985
10005968:	1000598d 	.word	0x1000598d
1000596c:	2300      	movs	r3, #0
1000596e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005972:	e016      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005974:	2308      	movs	r3, #8
10005976:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000597a:	e012      	b.n	100059a2 <UART_SetConfig+0x3e6>
1000597c:	2310      	movs	r3, #16
1000597e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005982:	e00e      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005984:	2320      	movs	r3, #32
10005986:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000598a:	e00a      	b.n	100059a2 <UART_SetConfig+0x3e6>
1000598c:	2340      	movs	r3, #64	@ 0x40
1000598e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10005992:	e006      	b.n	100059a2 <UART_SetConfig+0x3e6>
10005994:	2380      	movs	r3, #128	@ 0x80
10005996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000599a:	e002      	b.n	100059a2 <UART_SetConfig+0x3e6>
1000599c:	2380      	movs	r3, #128	@ 0x80
1000599e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
100059a2:	687b      	ldr	r3, [r7, #4]
100059a4:	69db      	ldr	r3, [r3, #28]
100059a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
100059aa:	f040 8354 	bne.w	10006056 <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
100059ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
100059b2:	2b20      	cmp	r3, #32
100059b4:	dc4a      	bgt.n	10005a4c <UART_SetConfig+0x490>
100059b6:	2b00      	cmp	r3, #0
100059b8:	f2c0 832b 	blt.w	10006012 <UART_SetConfig+0xa56>
100059bc:	2b20      	cmp	r3, #32
100059be:	f200 8328 	bhi.w	10006012 <UART_SetConfig+0xa56>
100059c2:	a201      	add	r2, pc, #4	@ (adr r2, 100059c8 <UART_SetConfig+0x40c>)
100059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100059c8:	10005a55 	.word	0x10005a55
100059cc:	10005b0d 	.word	0x10005b0d
100059d0:	10005bcd 	.word	0x10005bcd
100059d4:	10006013 	.word	0x10006013
100059d8:	10005c85 	.word	0x10005c85
100059dc:	10006013 	.word	0x10006013
100059e0:	10006013 	.word	0x10006013
100059e4:	10006013 	.word	0x10006013
100059e8:	10005d41 	.word	0x10005d41
100059ec:	10006013 	.word	0x10006013
100059f0:	10006013 	.word	0x10006013
100059f4:	10006013 	.word	0x10006013
100059f8:	10006013 	.word	0x10006013
100059fc:	10006013 	.word	0x10006013
10005a00:	10006013 	.word	0x10006013
10005a04:	10006013 	.word	0x10006013
10005a08:	10005dfd 	.word	0x10005dfd
10005a0c:	10006013 	.word	0x10006013
10005a10:	10006013 	.word	0x10006013
10005a14:	10006013 	.word	0x10006013
10005a18:	10006013 	.word	0x10006013
10005a1c:	10006013 	.word	0x10006013
10005a20:	10006013 	.word	0x10006013
10005a24:	10006013 	.word	0x10006013
10005a28:	10006013 	.word	0x10006013
10005a2c:	10006013 	.word	0x10006013
10005a30:	10006013 	.word	0x10006013
10005a34:	10006013 	.word	0x10006013
10005a38:	10006013 	.word	0x10006013
10005a3c:	10006013 	.word	0x10006013
10005a40:	10006013 	.word	0x10006013
10005a44:	10006013 	.word	0x10006013
10005a48:	10005eaf 	.word	0x10005eaf
10005a4c:	2b40      	cmp	r3, #64	@ 0x40
10005a4e:	f000 8287 	beq.w	10005f60 <UART_SetConfig+0x9a4>
10005a52:	e2de      	b.n	10006012 <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10005a54:	f7fd f95e 	bl	10002d14 <HAL_RCC_GetPCLK1Freq>
10005a58:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005a5a:	687b      	ldr	r3, [r7, #4]
10005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a5e:	2b00      	cmp	r3, #0
10005a60:	d044      	beq.n	10005aec <UART_SetConfig+0x530>
10005a62:	687b      	ldr	r3, [r7, #4]
10005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a66:	2b01      	cmp	r3, #1
10005a68:	d03e      	beq.n	10005ae8 <UART_SetConfig+0x52c>
10005a6a:	687b      	ldr	r3, [r7, #4]
10005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a6e:	2b02      	cmp	r3, #2
10005a70:	d038      	beq.n	10005ae4 <UART_SetConfig+0x528>
10005a72:	687b      	ldr	r3, [r7, #4]
10005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a76:	2b03      	cmp	r3, #3
10005a78:	d032      	beq.n	10005ae0 <UART_SetConfig+0x524>
10005a7a:	687b      	ldr	r3, [r7, #4]
10005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a7e:	2b04      	cmp	r3, #4
10005a80:	d02c      	beq.n	10005adc <UART_SetConfig+0x520>
10005a82:	687b      	ldr	r3, [r7, #4]
10005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a86:	2b05      	cmp	r3, #5
10005a88:	d026      	beq.n	10005ad8 <UART_SetConfig+0x51c>
10005a8a:	687b      	ldr	r3, [r7, #4]
10005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a8e:	2b06      	cmp	r3, #6
10005a90:	d020      	beq.n	10005ad4 <UART_SetConfig+0x518>
10005a92:	687b      	ldr	r3, [r7, #4]
10005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a96:	2b07      	cmp	r3, #7
10005a98:	d01a      	beq.n	10005ad0 <UART_SetConfig+0x514>
10005a9a:	687b      	ldr	r3, [r7, #4]
10005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005a9e:	2b08      	cmp	r3, #8
10005aa0:	d014      	beq.n	10005acc <UART_SetConfig+0x510>
10005aa2:	687b      	ldr	r3, [r7, #4]
10005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005aa6:	2b09      	cmp	r3, #9
10005aa8:	d00e      	beq.n	10005ac8 <UART_SetConfig+0x50c>
10005aaa:	687b      	ldr	r3, [r7, #4]
10005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005aae:	2b0a      	cmp	r3, #10
10005ab0:	d008      	beq.n	10005ac4 <UART_SetConfig+0x508>
10005ab2:	687b      	ldr	r3, [r7, #4]
10005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ab6:	2b0b      	cmp	r3, #11
10005ab8:	d102      	bne.n	10005ac0 <UART_SetConfig+0x504>
10005aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005abe:	e016      	b.n	10005aee <UART_SetConfig+0x532>
10005ac0:	2301      	movs	r3, #1
10005ac2:	e014      	b.n	10005aee <UART_SetConfig+0x532>
10005ac4:	2380      	movs	r3, #128	@ 0x80
10005ac6:	e012      	b.n	10005aee <UART_SetConfig+0x532>
10005ac8:	2340      	movs	r3, #64	@ 0x40
10005aca:	e010      	b.n	10005aee <UART_SetConfig+0x532>
10005acc:	2320      	movs	r3, #32
10005ace:	e00e      	b.n	10005aee <UART_SetConfig+0x532>
10005ad0:	2310      	movs	r3, #16
10005ad2:	e00c      	b.n	10005aee <UART_SetConfig+0x532>
10005ad4:	230c      	movs	r3, #12
10005ad6:	e00a      	b.n	10005aee <UART_SetConfig+0x532>
10005ad8:	230a      	movs	r3, #10
10005ada:	e008      	b.n	10005aee <UART_SetConfig+0x532>
10005adc:	2308      	movs	r3, #8
10005ade:	e006      	b.n	10005aee <UART_SetConfig+0x532>
10005ae0:	2306      	movs	r3, #6
10005ae2:	e004      	b.n	10005aee <UART_SetConfig+0x532>
10005ae4:	2304      	movs	r3, #4
10005ae6:	e002      	b.n	10005aee <UART_SetConfig+0x532>
10005ae8:	2302      	movs	r3, #2
10005aea:	e000      	b.n	10005aee <UART_SetConfig+0x532>
10005aec:	2301      	movs	r3, #1
10005aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10005af0:	fbb2 f3f3 	udiv	r3, r2, r3
10005af4:	005a      	lsls	r2, r3, #1
10005af6:	687b      	ldr	r3, [r7, #4]
10005af8:	685b      	ldr	r3, [r3, #4]
10005afa:	085b      	lsrs	r3, r3, #1
10005afc:	441a      	add	r2, r3
10005afe:	687b      	ldr	r3, [r7, #4]
10005b00:	685b      	ldr	r3, [r3, #4]
10005b02:	fbb2 f3f3 	udiv	r3, r2, r3
10005b06:	b29b      	uxth	r3, r3
10005b08:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005b0a:	e286      	b.n	1000601a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10005b0c:	f7fd f91d 	bl	10002d4a <HAL_RCC_GetPCLK2Freq>
10005b10:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005b12:	687b      	ldr	r3, [r7, #4]
10005b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b16:	2b00      	cmp	r3, #0
10005b18:	d048      	beq.n	10005bac <UART_SetConfig+0x5f0>
10005b1a:	687b      	ldr	r3, [r7, #4]
10005b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b1e:	2b01      	cmp	r3, #1
10005b20:	d042      	beq.n	10005ba8 <UART_SetConfig+0x5ec>
10005b22:	687b      	ldr	r3, [r7, #4]
10005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b26:	2b02      	cmp	r3, #2
10005b28:	d03c      	beq.n	10005ba4 <UART_SetConfig+0x5e8>
10005b2a:	687b      	ldr	r3, [r7, #4]
10005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b2e:	2b03      	cmp	r3, #3
10005b30:	d036      	beq.n	10005ba0 <UART_SetConfig+0x5e4>
10005b32:	687b      	ldr	r3, [r7, #4]
10005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b36:	2b04      	cmp	r3, #4
10005b38:	d030      	beq.n	10005b9c <UART_SetConfig+0x5e0>
10005b3a:	687b      	ldr	r3, [r7, #4]
10005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b3e:	2b05      	cmp	r3, #5
10005b40:	d02a      	beq.n	10005b98 <UART_SetConfig+0x5dc>
10005b42:	687b      	ldr	r3, [r7, #4]
10005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b46:	2b06      	cmp	r3, #6
10005b48:	d024      	beq.n	10005b94 <UART_SetConfig+0x5d8>
10005b4a:	687b      	ldr	r3, [r7, #4]
10005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b4e:	2b07      	cmp	r3, #7
10005b50:	d01e      	beq.n	10005b90 <UART_SetConfig+0x5d4>
10005b52:	687b      	ldr	r3, [r7, #4]
10005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b56:	2b08      	cmp	r3, #8
10005b58:	d014      	beq.n	10005b84 <UART_SetConfig+0x5c8>
10005b5a:	687b      	ldr	r3, [r7, #4]
10005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b5e:	2b09      	cmp	r3, #9
10005b60:	d00e      	beq.n	10005b80 <UART_SetConfig+0x5c4>
10005b62:	687b      	ldr	r3, [r7, #4]
10005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b66:	2b0a      	cmp	r3, #10
10005b68:	d008      	beq.n	10005b7c <UART_SetConfig+0x5c0>
10005b6a:	687b      	ldr	r3, [r7, #4]
10005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b6e:	2b0b      	cmp	r3, #11
10005b70:	d102      	bne.n	10005b78 <UART_SetConfig+0x5bc>
10005b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005b76:	e01a      	b.n	10005bae <UART_SetConfig+0x5f2>
10005b78:	2301      	movs	r3, #1
10005b7a:	e018      	b.n	10005bae <UART_SetConfig+0x5f2>
10005b7c:	2380      	movs	r3, #128	@ 0x80
10005b7e:	e016      	b.n	10005bae <UART_SetConfig+0x5f2>
10005b80:	2340      	movs	r3, #64	@ 0x40
10005b82:	e014      	b.n	10005bae <UART_SetConfig+0x5f2>
10005b84:	2320      	movs	r3, #32
10005b86:	e012      	b.n	10005bae <UART_SetConfig+0x5f2>
10005b88:	40018000 	.word	0x40018000
10005b8c:	40019000 	.word	0x40019000
10005b90:	2310      	movs	r3, #16
10005b92:	e00c      	b.n	10005bae <UART_SetConfig+0x5f2>
10005b94:	230c      	movs	r3, #12
10005b96:	e00a      	b.n	10005bae <UART_SetConfig+0x5f2>
10005b98:	230a      	movs	r3, #10
10005b9a:	e008      	b.n	10005bae <UART_SetConfig+0x5f2>
10005b9c:	2308      	movs	r3, #8
10005b9e:	e006      	b.n	10005bae <UART_SetConfig+0x5f2>
10005ba0:	2306      	movs	r3, #6
10005ba2:	e004      	b.n	10005bae <UART_SetConfig+0x5f2>
10005ba4:	2304      	movs	r3, #4
10005ba6:	e002      	b.n	10005bae <UART_SetConfig+0x5f2>
10005ba8:	2302      	movs	r3, #2
10005baa:	e000      	b.n	10005bae <UART_SetConfig+0x5f2>
10005bac:	2301      	movs	r3, #1
10005bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
10005bb4:	005a      	lsls	r2, r3, #1
10005bb6:	687b      	ldr	r3, [r7, #4]
10005bb8:	685b      	ldr	r3, [r3, #4]
10005bba:	085b      	lsrs	r3, r3, #1
10005bbc:	441a      	add	r2, r3
10005bbe:	687b      	ldr	r3, [r7, #4]
10005bc0:	685b      	ldr	r3, [r3, #4]
10005bc2:	fbb2 f3f3 	udiv	r3, r2, r3
10005bc6:	b29b      	uxth	r3, r3
10005bc8:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005bca:	e226      	b.n	1000601a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10005bcc:	f7fd f8d8 	bl	10002d80 <HAL_RCC_GetPCLK5Freq>
10005bd0:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005bd2:	687b      	ldr	r3, [r7, #4]
10005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005bd6:	2b00      	cmp	r3, #0
10005bd8:	d044      	beq.n	10005c64 <UART_SetConfig+0x6a8>
10005bda:	687b      	ldr	r3, [r7, #4]
10005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005bde:	2b01      	cmp	r3, #1
10005be0:	d03e      	beq.n	10005c60 <UART_SetConfig+0x6a4>
10005be2:	687b      	ldr	r3, [r7, #4]
10005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005be6:	2b02      	cmp	r3, #2
10005be8:	d038      	beq.n	10005c5c <UART_SetConfig+0x6a0>
10005bea:	687b      	ldr	r3, [r7, #4]
10005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005bee:	2b03      	cmp	r3, #3
10005bf0:	d032      	beq.n	10005c58 <UART_SetConfig+0x69c>
10005bf2:	687b      	ldr	r3, [r7, #4]
10005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005bf6:	2b04      	cmp	r3, #4
10005bf8:	d02c      	beq.n	10005c54 <UART_SetConfig+0x698>
10005bfa:	687b      	ldr	r3, [r7, #4]
10005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005bfe:	2b05      	cmp	r3, #5
10005c00:	d026      	beq.n	10005c50 <UART_SetConfig+0x694>
10005c02:	687b      	ldr	r3, [r7, #4]
10005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c06:	2b06      	cmp	r3, #6
10005c08:	d020      	beq.n	10005c4c <UART_SetConfig+0x690>
10005c0a:	687b      	ldr	r3, [r7, #4]
10005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c0e:	2b07      	cmp	r3, #7
10005c10:	d01a      	beq.n	10005c48 <UART_SetConfig+0x68c>
10005c12:	687b      	ldr	r3, [r7, #4]
10005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c16:	2b08      	cmp	r3, #8
10005c18:	d014      	beq.n	10005c44 <UART_SetConfig+0x688>
10005c1a:	687b      	ldr	r3, [r7, #4]
10005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c1e:	2b09      	cmp	r3, #9
10005c20:	d00e      	beq.n	10005c40 <UART_SetConfig+0x684>
10005c22:	687b      	ldr	r3, [r7, #4]
10005c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c26:	2b0a      	cmp	r3, #10
10005c28:	d008      	beq.n	10005c3c <UART_SetConfig+0x680>
10005c2a:	687b      	ldr	r3, [r7, #4]
10005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c2e:	2b0b      	cmp	r3, #11
10005c30:	d102      	bne.n	10005c38 <UART_SetConfig+0x67c>
10005c32:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005c36:	e016      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c38:	2301      	movs	r3, #1
10005c3a:	e014      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c3c:	2380      	movs	r3, #128	@ 0x80
10005c3e:	e012      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c40:	2340      	movs	r3, #64	@ 0x40
10005c42:	e010      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c44:	2320      	movs	r3, #32
10005c46:	e00e      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c48:	2310      	movs	r3, #16
10005c4a:	e00c      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c4c:	230c      	movs	r3, #12
10005c4e:	e00a      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c50:	230a      	movs	r3, #10
10005c52:	e008      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c54:	2308      	movs	r3, #8
10005c56:	e006      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c58:	2306      	movs	r3, #6
10005c5a:	e004      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c5c:	2304      	movs	r3, #4
10005c5e:	e002      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c60:	2302      	movs	r3, #2
10005c62:	e000      	b.n	10005c66 <UART_SetConfig+0x6aa>
10005c64:	2301      	movs	r3, #1
10005c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10005c68:	fbb2 f3f3 	udiv	r3, r2, r3
10005c6c:	005a      	lsls	r2, r3, #1
10005c6e:	687b      	ldr	r3, [r7, #4]
10005c70:	685b      	ldr	r3, [r3, #4]
10005c72:	085b      	lsrs	r3, r3, #1
10005c74:	441a      	add	r2, r3
10005c76:	687b      	ldr	r3, [r7, #4]
10005c78:	685b      	ldr	r3, [r3, #4]
10005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
10005c7e:	b29b      	uxth	r3, r3
10005c80:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005c82:	e1ca      	b.n	1000601a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005c84:	f107 0314 	add.w	r3, r7, #20
10005c88:	4618      	mov	r0, r3
10005c8a:	f7fc fe41 	bl	10002910 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005c8e:	69ba      	ldr	r2, [r7, #24]
10005c90:	687b      	ldr	r3, [r7, #4]
10005c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c94:	2b00      	cmp	r3, #0
10005c96:	d044      	beq.n	10005d22 <UART_SetConfig+0x766>
10005c98:	687b      	ldr	r3, [r7, #4]
10005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c9c:	2b01      	cmp	r3, #1
10005c9e:	d03e      	beq.n	10005d1e <UART_SetConfig+0x762>
10005ca0:	687b      	ldr	r3, [r7, #4]
10005ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ca4:	2b02      	cmp	r3, #2
10005ca6:	d038      	beq.n	10005d1a <UART_SetConfig+0x75e>
10005ca8:	687b      	ldr	r3, [r7, #4]
10005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005cac:	2b03      	cmp	r3, #3
10005cae:	d032      	beq.n	10005d16 <UART_SetConfig+0x75a>
10005cb0:	687b      	ldr	r3, [r7, #4]
10005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005cb4:	2b04      	cmp	r3, #4
10005cb6:	d02c      	beq.n	10005d12 <UART_SetConfig+0x756>
10005cb8:	687b      	ldr	r3, [r7, #4]
10005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005cbc:	2b05      	cmp	r3, #5
10005cbe:	d026      	beq.n	10005d0e <UART_SetConfig+0x752>
10005cc0:	687b      	ldr	r3, [r7, #4]
10005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005cc4:	2b06      	cmp	r3, #6
10005cc6:	d020      	beq.n	10005d0a <UART_SetConfig+0x74e>
10005cc8:	687b      	ldr	r3, [r7, #4]
10005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ccc:	2b07      	cmp	r3, #7
10005cce:	d01a      	beq.n	10005d06 <UART_SetConfig+0x74a>
10005cd0:	687b      	ldr	r3, [r7, #4]
10005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005cd4:	2b08      	cmp	r3, #8
10005cd6:	d014      	beq.n	10005d02 <UART_SetConfig+0x746>
10005cd8:	687b      	ldr	r3, [r7, #4]
10005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005cdc:	2b09      	cmp	r3, #9
10005cde:	d00e      	beq.n	10005cfe <UART_SetConfig+0x742>
10005ce0:	687b      	ldr	r3, [r7, #4]
10005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ce4:	2b0a      	cmp	r3, #10
10005ce6:	d008      	beq.n	10005cfa <UART_SetConfig+0x73e>
10005ce8:	687b      	ldr	r3, [r7, #4]
10005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005cec:	2b0b      	cmp	r3, #11
10005cee:	d102      	bne.n	10005cf6 <UART_SetConfig+0x73a>
10005cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005cf4:	e016      	b.n	10005d24 <UART_SetConfig+0x768>
10005cf6:	2301      	movs	r3, #1
10005cf8:	e014      	b.n	10005d24 <UART_SetConfig+0x768>
10005cfa:	2380      	movs	r3, #128	@ 0x80
10005cfc:	e012      	b.n	10005d24 <UART_SetConfig+0x768>
10005cfe:	2340      	movs	r3, #64	@ 0x40
10005d00:	e010      	b.n	10005d24 <UART_SetConfig+0x768>
10005d02:	2320      	movs	r3, #32
10005d04:	e00e      	b.n	10005d24 <UART_SetConfig+0x768>
10005d06:	2310      	movs	r3, #16
10005d08:	e00c      	b.n	10005d24 <UART_SetConfig+0x768>
10005d0a:	230c      	movs	r3, #12
10005d0c:	e00a      	b.n	10005d24 <UART_SetConfig+0x768>
10005d0e:	230a      	movs	r3, #10
10005d10:	e008      	b.n	10005d24 <UART_SetConfig+0x768>
10005d12:	2308      	movs	r3, #8
10005d14:	e006      	b.n	10005d24 <UART_SetConfig+0x768>
10005d16:	2306      	movs	r3, #6
10005d18:	e004      	b.n	10005d24 <UART_SetConfig+0x768>
10005d1a:	2304      	movs	r3, #4
10005d1c:	e002      	b.n	10005d24 <UART_SetConfig+0x768>
10005d1e:	2302      	movs	r3, #2
10005d20:	e000      	b.n	10005d24 <UART_SetConfig+0x768>
10005d22:	2301      	movs	r3, #1
10005d24:	fbb2 f3f3 	udiv	r3, r2, r3
10005d28:	005a      	lsls	r2, r3, #1
10005d2a:	687b      	ldr	r3, [r7, #4]
10005d2c:	685b      	ldr	r3, [r3, #4]
10005d2e:	085b      	lsrs	r3, r3, #1
10005d30:	441a      	add	r2, r3
10005d32:	687b      	ldr	r3, [r7, #4]
10005d34:	685b      	ldr	r3, [r3, #4]
10005d36:	fbb2 f3f3 	udiv	r3, r2, r3
10005d3a:	b29b      	uxth	r3, r3
10005d3c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005d3e:	e16c      	b.n	1000601a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10005d40:	f107 0308 	add.w	r3, r7, #8
10005d44:	4618      	mov	r0, r3
10005d46:	f7fc fedd 	bl	10002b04 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005d4a:	68fa      	ldr	r2, [r7, #12]
10005d4c:	687b      	ldr	r3, [r7, #4]
10005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d50:	2b00      	cmp	r3, #0
10005d52:	d044      	beq.n	10005dde <UART_SetConfig+0x822>
10005d54:	687b      	ldr	r3, [r7, #4]
10005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d58:	2b01      	cmp	r3, #1
10005d5a:	d03e      	beq.n	10005dda <UART_SetConfig+0x81e>
10005d5c:	687b      	ldr	r3, [r7, #4]
10005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d60:	2b02      	cmp	r3, #2
10005d62:	d038      	beq.n	10005dd6 <UART_SetConfig+0x81a>
10005d64:	687b      	ldr	r3, [r7, #4]
10005d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d68:	2b03      	cmp	r3, #3
10005d6a:	d032      	beq.n	10005dd2 <UART_SetConfig+0x816>
10005d6c:	687b      	ldr	r3, [r7, #4]
10005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d70:	2b04      	cmp	r3, #4
10005d72:	d02c      	beq.n	10005dce <UART_SetConfig+0x812>
10005d74:	687b      	ldr	r3, [r7, #4]
10005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d78:	2b05      	cmp	r3, #5
10005d7a:	d026      	beq.n	10005dca <UART_SetConfig+0x80e>
10005d7c:	687b      	ldr	r3, [r7, #4]
10005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d80:	2b06      	cmp	r3, #6
10005d82:	d020      	beq.n	10005dc6 <UART_SetConfig+0x80a>
10005d84:	687b      	ldr	r3, [r7, #4]
10005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d88:	2b07      	cmp	r3, #7
10005d8a:	d01a      	beq.n	10005dc2 <UART_SetConfig+0x806>
10005d8c:	687b      	ldr	r3, [r7, #4]
10005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d90:	2b08      	cmp	r3, #8
10005d92:	d014      	beq.n	10005dbe <UART_SetConfig+0x802>
10005d94:	687b      	ldr	r3, [r7, #4]
10005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d98:	2b09      	cmp	r3, #9
10005d9a:	d00e      	beq.n	10005dba <UART_SetConfig+0x7fe>
10005d9c:	687b      	ldr	r3, [r7, #4]
10005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005da0:	2b0a      	cmp	r3, #10
10005da2:	d008      	beq.n	10005db6 <UART_SetConfig+0x7fa>
10005da4:	687b      	ldr	r3, [r7, #4]
10005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005da8:	2b0b      	cmp	r3, #11
10005daa:	d102      	bne.n	10005db2 <UART_SetConfig+0x7f6>
10005dac:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005db0:	e016      	b.n	10005de0 <UART_SetConfig+0x824>
10005db2:	2301      	movs	r3, #1
10005db4:	e014      	b.n	10005de0 <UART_SetConfig+0x824>
10005db6:	2380      	movs	r3, #128	@ 0x80
10005db8:	e012      	b.n	10005de0 <UART_SetConfig+0x824>
10005dba:	2340      	movs	r3, #64	@ 0x40
10005dbc:	e010      	b.n	10005de0 <UART_SetConfig+0x824>
10005dbe:	2320      	movs	r3, #32
10005dc0:	e00e      	b.n	10005de0 <UART_SetConfig+0x824>
10005dc2:	2310      	movs	r3, #16
10005dc4:	e00c      	b.n	10005de0 <UART_SetConfig+0x824>
10005dc6:	230c      	movs	r3, #12
10005dc8:	e00a      	b.n	10005de0 <UART_SetConfig+0x824>
10005dca:	230a      	movs	r3, #10
10005dcc:	e008      	b.n	10005de0 <UART_SetConfig+0x824>
10005dce:	2308      	movs	r3, #8
10005dd0:	e006      	b.n	10005de0 <UART_SetConfig+0x824>
10005dd2:	2306      	movs	r3, #6
10005dd4:	e004      	b.n	10005de0 <UART_SetConfig+0x824>
10005dd6:	2304      	movs	r3, #4
10005dd8:	e002      	b.n	10005de0 <UART_SetConfig+0x824>
10005dda:	2302      	movs	r3, #2
10005ddc:	e000      	b.n	10005de0 <UART_SetConfig+0x824>
10005dde:	2301      	movs	r3, #1
10005de0:	fbb2 f3f3 	udiv	r3, r2, r3
10005de4:	005a      	lsls	r2, r3, #1
10005de6:	687b      	ldr	r3, [r7, #4]
10005de8:	685b      	ldr	r3, [r3, #4]
10005dea:	085b      	lsrs	r3, r3, #1
10005dec:	441a      	add	r2, r3
10005dee:	687b      	ldr	r3, [r7, #4]
10005df0:	685b      	ldr	r3, [r3, #4]
10005df2:	fbb2 f3f3 	udiv	r3, r2, r3
10005df6:	b29b      	uxth	r3, r3
10005df8:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005dfa:	e10e      	b.n	1000601a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005dfc:	687b      	ldr	r3, [r7, #4]
10005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e00:	2b00      	cmp	r3, #0
10005e02:	d044      	beq.n	10005e8e <UART_SetConfig+0x8d2>
10005e04:	687b      	ldr	r3, [r7, #4]
10005e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e08:	2b01      	cmp	r3, #1
10005e0a:	d03e      	beq.n	10005e8a <UART_SetConfig+0x8ce>
10005e0c:	687b      	ldr	r3, [r7, #4]
10005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e10:	2b02      	cmp	r3, #2
10005e12:	d038      	beq.n	10005e86 <UART_SetConfig+0x8ca>
10005e14:	687b      	ldr	r3, [r7, #4]
10005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e18:	2b03      	cmp	r3, #3
10005e1a:	d032      	beq.n	10005e82 <UART_SetConfig+0x8c6>
10005e1c:	687b      	ldr	r3, [r7, #4]
10005e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e20:	2b04      	cmp	r3, #4
10005e22:	d02c      	beq.n	10005e7e <UART_SetConfig+0x8c2>
10005e24:	687b      	ldr	r3, [r7, #4]
10005e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e28:	2b05      	cmp	r3, #5
10005e2a:	d026      	beq.n	10005e7a <UART_SetConfig+0x8be>
10005e2c:	687b      	ldr	r3, [r7, #4]
10005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e30:	2b06      	cmp	r3, #6
10005e32:	d020      	beq.n	10005e76 <UART_SetConfig+0x8ba>
10005e34:	687b      	ldr	r3, [r7, #4]
10005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e38:	2b07      	cmp	r3, #7
10005e3a:	d01a      	beq.n	10005e72 <UART_SetConfig+0x8b6>
10005e3c:	687b      	ldr	r3, [r7, #4]
10005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e40:	2b08      	cmp	r3, #8
10005e42:	d014      	beq.n	10005e6e <UART_SetConfig+0x8b2>
10005e44:	687b      	ldr	r3, [r7, #4]
10005e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e48:	2b09      	cmp	r3, #9
10005e4a:	d00e      	beq.n	10005e6a <UART_SetConfig+0x8ae>
10005e4c:	687b      	ldr	r3, [r7, #4]
10005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e50:	2b0a      	cmp	r3, #10
10005e52:	d008      	beq.n	10005e66 <UART_SetConfig+0x8aa>
10005e54:	687b      	ldr	r3, [r7, #4]
10005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e58:	2b0b      	cmp	r3, #11
10005e5a:	d102      	bne.n	10005e62 <UART_SetConfig+0x8a6>
10005e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005e60:	e016      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e62:	2301      	movs	r3, #1
10005e64:	e014      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e66:	2380      	movs	r3, #128	@ 0x80
10005e68:	e012      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e6a:	2340      	movs	r3, #64	@ 0x40
10005e6c:	e010      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e6e:	2320      	movs	r3, #32
10005e70:	e00e      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e72:	2310      	movs	r3, #16
10005e74:	e00c      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e76:	230c      	movs	r3, #12
10005e78:	e00a      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e7a:	230a      	movs	r3, #10
10005e7c:	e008      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e7e:	2308      	movs	r3, #8
10005e80:	e006      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e82:	2306      	movs	r3, #6
10005e84:	e004      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e86:	2304      	movs	r3, #4
10005e88:	e002      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e8a:	2302      	movs	r3, #2
10005e8c:	e000      	b.n	10005e90 <UART_SetConfig+0x8d4>
10005e8e:	2301      	movs	r3, #1
10005e90:	4a9a      	ldr	r2, [pc, #616]	@ (100060fc <UART_SetConfig+0xb40>)
10005e92:	fbb2 f3f3 	udiv	r3, r2, r3
10005e96:	005a      	lsls	r2, r3, #1
10005e98:	687b      	ldr	r3, [r7, #4]
10005e9a:	685b      	ldr	r3, [r3, #4]
10005e9c:	085b      	lsrs	r3, r3, #1
10005e9e:	441a      	add	r2, r3
10005ea0:	687b      	ldr	r3, [r7, #4]
10005ea2:	685b      	ldr	r3, [r3, #4]
10005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
10005ea8:	b29b      	uxth	r3, r3
10005eaa:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005eac:	e0b5      	b.n	1000601a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005eae:	687b      	ldr	r3, [r7, #4]
10005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005eb2:	2b00      	cmp	r3, #0
10005eb4:	d044      	beq.n	10005f40 <UART_SetConfig+0x984>
10005eb6:	687b      	ldr	r3, [r7, #4]
10005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005eba:	2b01      	cmp	r3, #1
10005ebc:	d03e      	beq.n	10005f3c <UART_SetConfig+0x980>
10005ebe:	687b      	ldr	r3, [r7, #4]
10005ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ec2:	2b02      	cmp	r3, #2
10005ec4:	d038      	beq.n	10005f38 <UART_SetConfig+0x97c>
10005ec6:	687b      	ldr	r3, [r7, #4]
10005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005eca:	2b03      	cmp	r3, #3
10005ecc:	d032      	beq.n	10005f34 <UART_SetConfig+0x978>
10005ece:	687b      	ldr	r3, [r7, #4]
10005ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ed2:	2b04      	cmp	r3, #4
10005ed4:	d02c      	beq.n	10005f30 <UART_SetConfig+0x974>
10005ed6:	687b      	ldr	r3, [r7, #4]
10005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005eda:	2b05      	cmp	r3, #5
10005edc:	d026      	beq.n	10005f2c <UART_SetConfig+0x970>
10005ede:	687b      	ldr	r3, [r7, #4]
10005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ee2:	2b06      	cmp	r3, #6
10005ee4:	d020      	beq.n	10005f28 <UART_SetConfig+0x96c>
10005ee6:	687b      	ldr	r3, [r7, #4]
10005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005eea:	2b07      	cmp	r3, #7
10005eec:	d01a      	beq.n	10005f24 <UART_SetConfig+0x968>
10005eee:	687b      	ldr	r3, [r7, #4]
10005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ef2:	2b08      	cmp	r3, #8
10005ef4:	d014      	beq.n	10005f20 <UART_SetConfig+0x964>
10005ef6:	687b      	ldr	r3, [r7, #4]
10005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005efa:	2b09      	cmp	r3, #9
10005efc:	d00e      	beq.n	10005f1c <UART_SetConfig+0x960>
10005efe:	687b      	ldr	r3, [r7, #4]
10005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f02:	2b0a      	cmp	r3, #10
10005f04:	d008      	beq.n	10005f18 <UART_SetConfig+0x95c>
10005f06:	687b      	ldr	r3, [r7, #4]
10005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f0a:	2b0b      	cmp	r3, #11
10005f0c:	d102      	bne.n	10005f14 <UART_SetConfig+0x958>
10005f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005f12:	e016      	b.n	10005f42 <UART_SetConfig+0x986>
10005f14:	2301      	movs	r3, #1
10005f16:	e014      	b.n	10005f42 <UART_SetConfig+0x986>
10005f18:	2380      	movs	r3, #128	@ 0x80
10005f1a:	e012      	b.n	10005f42 <UART_SetConfig+0x986>
10005f1c:	2340      	movs	r3, #64	@ 0x40
10005f1e:	e010      	b.n	10005f42 <UART_SetConfig+0x986>
10005f20:	2320      	movs	r3, #32
10005f22:	e00e      	b.n	10005f42 <UART_SetConfig+0x986>
10005f24:	2310      	movs	r3, #16
10005f26:	e00c      	b.n	10005f42 <UART_SetConfig+0x986>
10005f28:	230c      	movs	r3, #12
10005f2a:	e00a      	b.n	10005f42 <UART_SetConfig+0x986>
10005f2c:	230a      	movs	r3, #10
10005f2e:	e008      	b.n	10005f42 <UART_SetConfig+0x986>
10005f30:	2308      	movs	r3, #8
10005f32:	e006      	b.n	10005f42 <UART_SetConfig+0x986>
10005f34:	2306      	movs	r3, #6
10005f36:	e004      	b.n	10005f42 <UART_SetConfig+0x986>
10005f38:	2304      	movs	r3, #4
10005f3a:	e002      	b.n	10005f42 <UART_SetConfig+0x986>
10005f3c:	2302      	movs	r3, #2
10005f3e:	e000      	b.n	10005f42 <UART_SetConfig+0x986>
10005f40:	2301      	movs	r3, #1
10005f42:	4a6f      	ldr	r2, [pc, #444]	@ (10006100 <UART_SetConfig+0xb44>)
10005f44:	fbb2 f3f3 	udiv	r3, r2, r3
10005f48:	005a      	lsls	r2, r3, #1
10005f4a:	687b      	ldr	r3, [r7, #4]
10005f4c:	685b      	ldr	r3, [r3, #4]
10005f4e:	085b      	lsrs	r3, r3, #1
10005f50:	441a      	add	r2, r3
10005f52:	687b      	ldr	r3, [r7, #4]
10005f54:	685b      	ldr	r3, [r3, #4]
10005f56:	fbb2 f3f3 	udiv	r3, r2, r3
10005f5a:	b29b      	uxth	r3, r3
10005f5c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10005f5e:	e05c      	b.n	1000601a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005f60:	687b      	ldr	r3, [r7, #4]
10005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f64:	2b00      	cmp	r3, #0
10005f66:	d044      	beq.n	10005ff2 <UART_SetConfig+0xa36>
10005f68:	687b      	ldr	r3, [r7, #4]
10005f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f6c:	2b01      	cmp	r3, #1
10005f6e:	d03e      	beq.n	10005fee <UART_SetConfig+0xa32>
10005f70:	687b      	ldr	r3, [r7, #4]
10005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f74:	2b02      	cmp	r3, #2
10005f76:	d038      	beq.n	10005fea <UART_SetConfig+0xa2e>
10005f78:	687b      	ldr	r3, [r7, #4]
10005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f7c:	2b03      	cmp	r3, #3
10005f7e:	d032      	beq.n	10005fe6 <UART_SetConfig+0xa2a>
10005f80:	687b      	ldr	r3, [r7, #4]
10005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f84:	2b04      	cmp	r3, #4
10005f86:	d02c      	beq.n	10005fe2 <UART_SetConfig+0xa26>
10005f88:	687b      	ldr	r3, [r7, #4]
10005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f8c:	2b05      	cmp	r3, #5
10005f8e:	d026      	beq.n	10005fde <UART_SetConfig+0xa22>
10005f90:	687b      	ldr	r3, [r7, #4]
10005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f94:	2b06      	cmp	r3, #6
10005f96:	d020      	beq.n	10005fda <UART_SetConfig+0xa1e>
10005f98:	687b      	ldr	r3, [r7, #4]
10005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f9c:	2b07      	cmp	r3, #7
10005f9e:	d01a      	beq.n	10005fd6 <UART_SetConfig+0xa1a>
10005fa0:	687b      	ldr	r3, [r7, #4]
10005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005fa4:	2b08      	cmp	r3, #8
10005fa6:	d014      	beq.n	10005fd2 <UART_SetConfig+0xa16>
10005fa8:	687b      	ldr	r3, [r7, #4]
10005faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005fac:	2b09      	cmp	r3, #9
10005fae:	d00e      	beq.n	10005fce <UART_SetConfig+0xa12>
10005fb0:	687b      	ldr	r3, [r7, #4]
10005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005fb4:	2b0a      	cmp	r3, #10
10005fb6:	d008      	beq.n	10005fca <UART_SetConfig+0xa0e>
10005fb8:	687b      	ldr	r3, [r7, #4]
10005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005fbc:	2b0b      	cmp	r3, #11
10005fbe:	d102      	bne.n	10005fc6 <UART_SetConfig+0xa0a>
10005fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
10005fc4:	e016      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fc6:	2301      	movs	r3, #1
10005fc8:	e014      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fca:	2380      	movs	r3, #128	@ 0x80
10005fcc:	e012      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fce:	2340      	movs	r3, #64	@ 0x40
10005fd0:	e010      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fd2:	2320      	movs	r3, #32
10005fd4:	e00e      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fd6:	2310      	movs	r3, #16
10005fd8:	e00c      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fda:	230c      	movs	r3, #12
10005fdc:	e00a      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fde:	230a      	movs	r3, #10
10005fe0:	e008      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fe2:	2308      	movs	r3, #8
10005fe4:	e006      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fe6:	2306      	movs	r3, #6
10005fe8:	e004      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fea:	2304      	movs	r3, #4
10005fec:	e002      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005fee:	2302      	movs	r3, #2
10005ff0:	e000      	b.n	10005ff4 <UART_SetConfig+0xa38>
10005ff2:	2301      	movs	r3, #1
10005ff4:	4a43      	ldr	r2, [pc, #268]	@ (10006104 <UART_SetConfig+0xb48>)
10005ff6:	fbb2 f3f3 	udiv	r3, r2, r3
10005ffa:	005a      	lsls	r2, r3, #1
10005ffc:	687b      	ldr	r3, [r7, #4]
10005ffe:	685b      	ldr	r3, [r3, #4]
10006000:	085b      	lsrs	r3, r3, #1
10006002:	441a      	add	r2, r3
10006004:	687b      	ldr	r3, [r7, #4]
10006006:	685b      	ldr	r3, [r3, #4]
10006008:	fbb2 f3f3 	udiv	r3, r2, r3
1000600c:	b29b      	uxth	r3, r3
1000600e:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10006010:	e003      	b.n	1000601a <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
10006012:	2301      	movs	r3, #1
10006014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        break;
10006018:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000601c:	2b0f      	cmp	r3, #15
1000601e:	d916      	bls.n	1000604e <UART_SetConfig+0xa92>
10006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
10006026:	d212      	bcs.n	1000604e <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000602a:	b29b      	uxth	r3, r3
1000602c:	f023 030f 	bic.w	r3, r3, #15
10006030:	847b      	strh	r3, [r7, #34]	@ 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006034:	085b      	lsrs	r3, r3, #1
10006036:	b29b      	uxth	r3, r3
10006038:	f003 0307 	and.w	r3, r3, #7
1000603c:	b29a      	uxth	r2, r3
1000603e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
10006040:	4313      	orrs	r3, r2
10006042:	847b      	strh	r3, [r7, #34]	@ 0x22
      huart->Instance->BRR = brrtemp;
10006044:	687b      	ldr	r3, [r7, #4]
10006046:	681b      	ldr	r3, [r3, #0]
10006048:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
1000604a:	60da      	str	r2, [r3, #12]
1000604c:	e342      	b.n	100066d4 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000604e:	2301      	movs	r3, #1
10006050:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
10006054:	e33e      	b.n	100066d4 <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
10006056:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
1000605a:	2b20      	cmp	r3, #32
1000605c:	dc4a      	bgt.n	100060f4 <UART_SetConfig+0xb38>
1000605e:	2b00      	cmp	r3, #0
10006060:	f2c0 8325 	blt.w	100066ae <UART_SetConfig+0x10f2>
10006064:	2b20      	cmp	r3, #32
10006066:	f200 8322 	bhi.w	100066ae <UART_SetConfig+0x10f2>
1000606a:	a201      	add	r2, pc, #4	@ (adr r2, 10006070 <UART_SetConfig+0xab4>)
1000606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10006070:	10006109 	.word	0x10006109
10006074:	100061bf 	.word	0x100061bf
10006078:	10006275 	.word	0x10006275
1000607c:	100066af 	.word	0x100066af
10006080:	1000632b 	.word	0x1000632b
10006084:	100066af 	.word	0x100066af
10006088:	100066af 	.word	0x100066af
1000608c:	100066af 	.word	0x100066af
10006090:	100063e5 	.word	0x100063e5
10006094:	100066af 	.word	0x100066af
10006098:	100066af 	.word	0x100066af
1000609c:	100066af 	.word	0x100066af
100060a0:	100066af 	.word	0x100066af
100060a4:	100066af 	.word	0x100066af
100060a8:	100066af 	.word	0x100066af
100060ac:	100066af 	.word	0x100066af
100060b0:	1000649f 	.word	0x1000649f
100060b4:	100066af 	.word	0x100066af
100060b8:	100066af 	.word	0x100066af
100060bc:	100066af 	.word	0x100066af
100060c0:	100066af 	.word	0x100066af
100060c4:	100066af 	.word	0x100066af
100060c8:	100066af 	.word	0x100066af
100060cc:	100066af 	.word	0x100066af
100060d0:	100066af 	.word	0x100066af
100060d4:	100066af 	.word	0x100066af
100060d8:	100066af 	.word	0x100066af
100060dc:	100066af 	.word	0x100066af
100060e0:	100066af 	.word	0x100066af
100060e4:	100066af 	.word	0x100066af
100060e8:	100066af 	.word	0x100066af
100060ec:	100066af 	.word	0x100066af
100060f0:	1000654f 	.word	0x1000654f
100060f4:	2b40      	cmp	r3, #64	@ 0x40
100060f6:	f000 8282 	beq.w	100065fe <UART_SetConfig+0x1042>
100060fa:	e2d8      	b.n	100066ae <UART_SetConfig+0x10f2>
100060fc:	03d09000 	.word	0x03d09000
10006100:	003d0900 	.word	0x003d0900
10006104:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10006108:	f7fc fe04 	bl	10002d14 <HAL_RCC_GetPCLK1Freq>
1000610c:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000610e:	687b      	ldr	r3, [r7, #4]
10006110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006112:	2b00      	cmp	r3, #0
10006114:	d044      	beq.n	100061a0 <UART_SetConfig+0xbe4>
10006116:	687b      	ldr	r3, [r7, #4]
10006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000611a:	2b01      	cmp	r3, #1
1000611c:	d03e      	beq.n	1000619c <UART_SetConfig+0xbe0>
1000611e:	687b      	ldr	r3, [r7, #4]
10006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006122:	2b02      	cmp	r3, #2
10006124:	d038      	beq.n	10006198 <UART_SetConfig+0xbdc>
10006126:	687b      	ldr	r3, [r7, #4]
10006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000612a:	2b03      	cmp	r3, #3
1000612c:	d032      	beq.n	10006194 <UART_SetConfig+0xbd8>
1000612e:	687b      	ldr	r3, [r7, #4]
10006130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006132:	2b04      	cmp	r3, #4
10006134:	d02c      	beq.n	10006190 <UART_SetConfig+0xbd4>
10006136:	687b      	ldr	r3, [r7, #4]
10006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000613a:	2b05      	cmp	r3, #5
1000613c:	d026      	beq.n	1000618c <UART_SetConfig+0xbd0>
1000613e:	687b      	ldr	r3, [r7, #4]
10006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006142:	2b06      	cmp	r3, #6
10006144:	d020      	beq.n	10006188 <UART_SetConfig+0xbcc>
10006146:	687b      	ldr	r3, [r7, #4]
10006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000614a:	2b07      	cmp	r3, #7
1000614c:	d01a      	beq.n	10006184 <UART_SetConfig+0xbc8>
1000614e:	687b      	ldr	r3, [r7, #4]
10006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006152:	2b08      	cmp	r3, #8
10006154:	d014      	beq.n	10006180 <UART_SetConfig+0xbc4>
10006156:	687b      	ldr	r3, [r7, #4]
10006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000615a:	2b09      	cmp	r3, #9
1000615c:	d00e      	beq.n	1000617c <UART_SetConfig+0xbc0>
1000615e:	687b      	ldr	r3, [r7, #4]
10006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006162:	2b0a      	cmp	r3, #10
10006164:	d008      	beq.n	10006178 <UART_SetConfig+0xbbc>
10006166:	687b      	ldr	r3, [r7, #4]
10006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000616a:	2b0b      	cmp	r3, #11
1000616c:	d102      	bne.n	10006174 <UART_SetConfig+0xbb8>
1000616e:	f44f 7380 	mov.w	r3, #256	@ 0x100
10006172:	e016      	b.n	100061a2 <UART_SetConfig+0xbe6>
10006174:	2301      	movs	r3, #1
10006176:	e014      	b.n	100061a2 <UART_SetConfig+0xbe6>
10006178:	2380      	movs	r3, #128	@ 0x80
1000617a:	e012      	b.n	100061a2 <UART_SetConfig+0xbe6>
1000617c:	2340      	movs	r3, #64	@ 0x40
1000617e:	e010      	b.n	100061a2 <UART_SetConfig+0xbe6>
10006180:	2320      	movs	r3, #32
10006182:	e00e      	b.n	100061a2 <UART_SetConfig+0xbe6>
10006184:	2310      	movs	r3, #16
10006186:	e00c      	b.n	100061a2 <UART_SetConfig+0xbe6>
10006188:	230c      	movs	r3, #12
1000618a:	e00a      	b.n	100061a2 <UART_SetConfig+0xbe6>
1000618c:	230a      	movs	r3, #10
1000618e:	e008      	b.n	100061a2 <UART_SetConfig+0xbe6>
10006190:	2308      	movs	r3, #8
10006192:	e006      	b.n	100061a2 <UART_SetConfig+0xbe6>
10006194:	2306      	movs	r3, #6
10006196:	e004      	b.n	100061a2 <UART_SetConfig+0xbe6>
10006198:	2304      	movs	r3, #4
1000619a:	e002      	b.n	100061a2 <UART_SetConfig+0xbe6>
1000619c:	2302      	movs	r3, #2
1000619e:	e000      	b.n	100061a2 <UART_SetConfig+0xbe6>
100061a0:	2301      	movs	r3, #1
100061a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100061a4:	fbb2 f2f3 	udiv	r2, r2, r3
100061a8:	687b      	ldr	r3, [r7, #4]
100061aa:	685b      	ldr	r3, [r3, #4]
100061ac:	085b      	lsrs	r3, r3, #1
100061ae:	441a      	add	r2, r3
100061b0:	687b      	ldr	r3, [r7, #4]
100061b2:	685b      	ldr	r3, [r3, #4]
100061b4:	fbb2 f3f3 	udiv	r3, r2, r3
100061b8:	b29b      	uxth	r3, r3
100061ba:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100061bc:	e27b      	b.n	100066b6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
100061be:	f7fc fdc4 	bl	10002d4a <HAL_RCC_GetPCLK2Freq>
100061c2:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100061c4:	687b      	ldr	r3, [r7, #4]
100061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100061c8:	2b00      	cmp	r3, #0
100061ca:	d044      	beq.n	10006256 <UART_SetConfig+0xc9a>
100061cc:	687b      	ldr	r3, [r7, #4]
100061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100061d0:	2b01      	cmp	r3, #1
100061d2:	d03e      	beq.n	10006252 <UART_SetConfig+0xc96>
100061d4:	687b      	ldr	r3, [r7, #4]
100061d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100061d8:	2b02      	cmp	r3, #2
100061da:	d038      	beq.n	1000624e <UART_SetConfig+0xc92>
100061dc:	687b      	ldr	r3, [r7, #4]
100061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100061e0:	2b03      	cmp	r3, #3
100061e2:	d032      	beq.n	1000624a <UART_SetConfig+0xc8e>
100061e4:	687b      	ldr	r3, [r7, #4]
100061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100061e8:	2b04      	cmp	r3, #4
100061ea:	d02c      	beq.n	10006246 <UART_SetConfig+0xc8a>
100061ec:	687b      	ldr	r3, [r7, #4]
100061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100061f0:	2b05      	cmp	r3, #5
100061f2:	d026      	beq.n	10006242 <UART_SetConfig+0xc86>
100061f4:	687b      	ldr	r3, [r7, #4]
100061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100061f8:	2b06      	cmp	r3, #6
100061fa:	d020      	beq.n	1000623e <UART_SetConfig+0xc82>
100061fc:	687b      	ldr	r3, [r7, #4]
100061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006200:	2b07      	cmp	r3, #7
10006202:	d01a      	beq.n	1000623a <UART_SetConfig+0xc7e>
10006204:	687b      	ldr	r3, [r7, #4]
10006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006208:	2b08      	cmp	r3, #8
1000620a:	d014      	beq.n	10006236 <UART_SetConfig+0xc7a>
1000620c:	687b      	ldr	r3, [r7, #4]
1000620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006210:	2b09      	cmp	r3, #9
10006212:	d00e      	beq.n	10006232 <UART_SetConfig+0xc76>
10006214:	687b      	ldr	r3, [r7, #4]
10006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006218:	2b0a      	cmp	r3, #10
1000621a:	d008      	beq.n	1000622e <UART_SetConfig+0xc72>
1000621c:	687b      	ldr	r3, [r7, #4]
1000621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006220:	2b0b      	cmp	r3, #11
10006222:	d102      	bne.n	1000622a <UART_SetConfig+0xc6e>
10006224:	f44f 7380 	mov.w	r3, #256	@ 0x100
10006228:	e016      	b.n	10006258 <UART_SetConfig+0xc9c>
1000622a:	2301      	movs	r3, #1
1000622c:	e014      	b.n	10006258 <UART_SetConfig+0xc9c>
1000622e:	2380      	movs	r3, #128	@ 0x80
10006230:	e012      	b.n	10006258 <UART_SetConfig+0xc9c>
10006232:	2340      	movs	r3, #64	@ 0x40
10006234:	e010      	b.n	10006258 <UART_SetConfig+0xc9c>
10006236:	2320      	movs	r3, #32
10006238:	e00e      	b.n	10006258 <UART_SetConfig+0xc9c>
1000623a:	2310      	movs	r3, #16
1000623c:	e00c      	b.n	10006258 <UART_SetConfig+0xc9c>
1000623e:	230c      	movs	r3, #12
10006240:	e00a      	b.n	10006258 <UART_SetConfig+0xc9c>
10006242:	230a      	movs	r3, #10
10006244:	e008      	b.n	10006258 <UART_SetConfig+0xc9c>
10006246:	2308      	movs	r3, #8
10006248:	e006      	b.n	10006258 <UART_SetConfig+0xc9c>
1000624a:	2306      	movs	r3, #6
1000624c:	e004      	b.n	10006258 <UART_SetConfig+0xc9c>
1000624e:	2304      	movs	r3, #4
10006250:	e002      	b.n	10006258 <UART_SetConfig+0xc9c>
10006252:	2302      	movs	r3, #2
10006254:	e000      	b.n	10006258 <UART_SetConfig+0xc9c>
10006256:	2301      	movs	r3, #1
10006258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000625a:	fbb2 f2f3 	udiv	r2, r2, r3
1000625e:	687b      	ldr	r3, [r7, #4]
10006260:	685b      	ldr	r3, [r3, #4]
10006262:	085b      	lsrs	r3, r3, #1
10006264:	441a      	add	r2, r3
10006266:	687b      	ldr	r3, [r7, #4]
10006268:	685b      	ldr	r3, [r3, #4]
1000626a:	fbb2 f3f3 	udiv	r3, r2, r3
1000626e:	b29b      	uxth	r3, r3
10006270:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10006272:	e220      	b.n	100066b6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10006274:	f7fc fd84 	bl	10002d80 <HAL_RCC_GetPCLK5Freq>
10006278:	6278      	str	r0, [r7, #36]	@ 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000627a:	687b      	ldr	r3, [r7, #4]
1000627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000627e:	2b00      	cmp	r3, #0
10006280:	d044      	beq.n	1000630c <UART_SetConfig+0xd50>
10006282:	687b      	ldr	r3, [r7, #4]
10006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006286:	2b01      	cmp	r3, #1
10006288:	d03e      	beq.n	10006308 <UART_SetConfig+0xd4c>
1000628a:	687b      	ldr	r3, [r7, #4]
1000628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000628e:	2b02      	cmp	r3, #2
10006290:	d038      	beq.n	10006304 <UART_SetConfig+0xd48>
10006292:	687b      	ldr	r3, [r7, #4]
10006294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006296:	2b03      	cmp	r3, #3
10006298:	d032      	beq.n	10006300 <UART_SetConfig+0xd44>
1000629a:	687b      	ldr	r3, [r7, #4]
1000629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000629e:	2b04      	cmp	r3, #4
100062a0:	d02c      	beq.n	100062fc <UART_SetConfig+0xd40>
100062a2:	687b      	ldr	r3, [r7, #4]
100062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100062a6:	2b05      	cmp	r3, #5
100062a8:	d026      	beq.n	100062f8 <UART_SetConfig+0xd3c>
100062aa:	687b      	ldr	r3, [r7, #4]
100062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100062ae:	2b06      	cmp	r3, #6
100062b0:	d020      	beq.n	100062f4 <UART_SetConfig+0xd38>
100062b2:	687b      	ldr	r3, [r7, #4]
100062b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100062b6:	2b07      	cmp	r3, #7
100062b8:	d01a      	beq.n	100062f0 <UART_SetConfig+0xd34>
100062ba:	687b      	ldr	r3, [r7, #4]
100062bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100062be:	2b08      	cmp	r3, #8
100062c0:	d014      	beq.n	100062ec <UART_SetConfig+0xd30>
100062c2:	687b      	ldr	r3, [r7, #4]
100062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100062c6:	2b09      	cmp	r3, #9
100062c8:	d00e      	beq.n	100062e8 <UART_SetConfig+0xd2c>
100062ca:	687b      	ldr	r3, [r7, #4]
100062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100062ce:	2b0a      	cmp	r3, #10
100062d0:	d008      	beq.n	100062e4 <UART_SetConfig+0xd28>
100062d2:	687b      	ldr	r3, [r7, #4]
100062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100062d6:	2b0b      	cmp	r3, #11
100062d8:	d102      	bne.n	100062e0 <UART_SetConfig+0xd24>
100062da:	f44f 7380 	mov.w	r3, #256	@ 0x100
100062de:	e016      	b.n	1000630e <UART_SetConfig+0xd52>
100062e0:	2301      	movs	r3, #1
100062e2:	e014      	b.n	1000630e <UART_SetConfig+0xd52>
100062e4:	2380      	movs	r3, #128	@ 0x80
100062e6:	e012      	b.n	1000630e <UART_SetConfig+0xd52>
100062e8:	2340      	movs	r3, #64	@ 0x40
100062ea:	e010      	b.n	1000630e <UART_SetConfig+0xd52>
100062ec:	2320      	movs	r3, #32
100062ee:	e00e      	b.n	1000630e <UART_SetConfig+0xd52>
100062f0:	2310      	movs	r3, #16
100062f2:	e00c      	b.n	1000630e <UART_SetConfig+0xd52>
100062f4:	230c      	movs	r3, #12
100062f6:	e00a      	b.n	1000630e <UART_SetConfig+0xd52>
100062f8:	230a      	movs	r3, #10
100062fa:	e008      	b.n	1000630e <UART_SetConfig+0xd52>
100062fc:	2308      	movs	r3, #8
100062fe:	e006      	b.n	1000630e <UART_SetConfig+0xd52>
10006300:	2306      	movs	r3, #6
10006302:	e004      	b.n	1000630e <UART_SetConfig+0xd52>
10006304:	2304      	movs	r3, #4
10006306:	e002      	b.n	1000630e <UART_SetConfig+0xd52>
10006308:	2302      	movs	r3, #2
1000630a:	e000      	b.n	1000630e <UART_SetConfig+0xd52>
1000630c:	2301      	movs	r3, #1
1000630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10006310:	fbb2 f2f3 	udiv	r2, r2, r3
10006314:	687b      	ldr	r3, [r7, #4]
10006316:	685b      	ldr	r3, [r3, #4]
10006318:	085b      	lsrs	r3, r3, #1
1000631a:	441a      	add	r2, r3
1000631c:	687b      	ldr	r3, [r7, #4]
1000631e:	685b      	ldr	r3, [r3, #4]
10006320:	fbb2 f3f3 	udiv	r3, r2, r3
10006324:	b29b      	uxth	r3, r3
10006326:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10006328:	e1c5      	b.n	100066b6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000632a:	f107 0314 	add.w	r3, r7, #20
1000632e:	4618      	mov	r0, r3
10006330:	f7fc faee 	bl	10002910 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006334:	69ba      	ldr	r2, [r7, #24]
10006336:	687b      	ldr	r3, [r7, #4]
10006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000633a:	2b00      	cmp	r3, #0
1000633c:	d044      	beq.n	100063c8 <UART_SetConfig+0xe0c>
1000633e:	687b      	ldr	r3, [r7, #4]
10006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006342:	2b01      	cmp	r3, #1
10006344:	d03e      	beq.n	100063c4 <UART_SetConfig+0xe08>
10006346:	687b      	ldr	r3, [r7, #4]
10006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000634a:	2b02      	cmp	r3, #2
1000634c:	d038      	beq.n	100063c0 <UART_SetConfig+0xe04>
1000634e:	687b      	ldr	r3, [r7, #4]
10006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006352:	2b03      	cmp	r3, #3
10006354:	d032      	beq.n	100063bc <UART_SetConfig+0xe00>
10006356:	687b      	ldr	r3, [r7, #4]
10006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000635a:	2b04      	cmp	r3, #4
1000635c:	d02c      	beq.n	100063b8 <UART_SetConfig+0xdfc>
1000635e:	687b      	ldr	r3, [r7, #4]
10006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006362:	2b05      	cmp	r3, #5
10006364:	d026      	beq.n	100063b4 <UART_SetConfig+0xdf8>
10006366:	687b      	ldr	r3, [r7, #4]
10006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000636a:	2b06      	cmp	r3, #6
1000636c:	d020      	beq.n	100063b0 <UART_SetConfig+0xdf4>
1000636e:	687b      	ldr	r3, [r7, #4]
10006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006372:	2b07      	cmp	r3, #7
10006374:	d01a      	beq.n	100063ac <UART_SetConfig+0xdf0>
10006376:	687b      	ldr	r3, [r7, #4]
10006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000637a:	2b08      	cmp	r3, #8
1000637c:	d014      	beq.n	100063a8 <UART_SetConfig+0xdec>
1000637e:	687b      	ldr	r3, [r7, #4]
10006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006382:	2b09      	cmp	r3, #9
10006384:	d00e      	beq.n	100063a4 <UART_SetConfig+0xde8>
10006386:	687b      	ldr	r3, [r7, #4]
10006388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000638a:	2b0a      	cmp	r3, #10
1000638c:	d008      	beq.n	100063a0 <UART_SetConfig+0xde4>
1000638e:	687b      	ldr	r3, [r7, #4]
10006390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006392:	2b0b      	cmp	r3, #11
10006394:	d102      	bne.n	1000639c <UART_SetConfig+0xde0>
10006396:	f44f 7380 	mov.w	r3, #256	@ 0x100
1000639a:	e016      	b.n	100063ca <UART_SetConfig+0xe0e>
1000639c:	2301      	movs	r3, #1
1000639e:	e014      	b.n	100063ca <UART_SetConfig+0xe0e>
100063a0:	2380      	movs	r3, #128	@ 0x80
100063a2:	e012      	b.n	100063ca <UART_SetConfig+0xe0e>
100063a4:	2340      	movs	r3, #64	@ 0x40
100063a6:	e010      	b.n	100063ca <UART_SetConfig+0xe0e>
100063a8:	2320      	movs	r3, #32
100063aa:	e00e      	b.n	100063ca <UART_SetConfig+0xe0e>
100063ac:	2310      	movs	r3, #16
100063ae:	e00c      	b.n	100063ca <UART_SetConfig+0xe0e>
100063b0:	230c      	movs	r3, #12
100063b2:	e00a      	b.n	100063ca <UART_SetConfig+0xe0e>
100063b4:	230a      	movs	r3, #10
100063b6:	e008      	b.n	100063ca <UART_SetConfig+0xe0e>
100063b8:	2308      	movs	r3, #8
100063ba:	e006      	b.n	100063ca <UART_SetConfig+0xe0e>
100063bc:	2306      	movs	r3, #6
100063be:	e004      	b.n	100063ca <UART_SetConfig+0xe0e>
100063c0:	2304      	movs	r3, #4
100063c2:	e002      	b.n	100063ca <UART_SetConfig+0xe0e>
100063c4:	2302      	movs	r3, #2
100063c6:	e000      	b.n	100063ca <UART_SetConfig+0xe0e>
100063c8:	2301      	movs	r3, #1
100063ca:	fbb2 f2f3 	udiv	r2, r2, r3
100063ce:	687b      	ldr	r3, [r7, #4]
100063d0:	685b      	ldr	r3, [r3, #4]
100063d2:	085b      	lsrs	r3, r3, #1
100063d4:	441a      	add	r2, r3
100063d6:	687b      	ldr	r3, [r7, #4]
100063d8:	685b      	ldr	r3, [r3, #4]
100063da:	fbb2 f3f3 	udiv	r3, r2, r3
100063de:	b29b      	uxth	r3, r3
100063e0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100063e2:	e168      	b.n	100066b6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100063e4:	f107 0308 	add.w	r3, r7, #8
100063e8:	4618      	mov	r0, r3
100063ea:	f7fc fb8b 	bl	10002b04 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100063ee:	68fa      	ldr	r2, [r7, #12]
100063f0:	687b      	ldr	r3, [r7, #4]
100063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100063f4:	2b00      	cmp	r3, #0
100063f6:	d044      	beq.n	10006482 <UART_SetConfig+0xec6>
100063f8:	687b      	ldr	r3, [r7, #4]
100063fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100063fc:	2b01      	cmp	r3, #1
100063fe:	d03e      	beq.n	1000647e <UART_SetConfig+0xec2>
10006400:	687b      	ldr	r3, [r7, #4]
10006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006404:	2b02      	cmp	r3, #2
10006406:	d038      	beq.n	1000647a <UART_SetConfig+0xebe>
10006408:	687b      	ldr	r3, [r7, #4]
1000640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000640c:	2b03      	cmp	r3, #3
1000640e:	d032      	beq.n	10006476 <UART_SetConfig+0xeba>
10006410:	687b      	ldr	r3, [r7, #4]
10006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006414:	2b04      	cmp	r3, #4
10006416:	d02c      	beq.n	10006472 <UART_SetConfig+0xeb6>
10006418:	687b      	ldr	r3, [r7, #4]
1000641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000641c:	2b05      	cmp	r3, #5
1000641e:	d026      	beq.n	1000646e <UART_SetConfig+0xeb2>
10006420:	687b      	ldr	r3, [r7, #4]
10006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006424:	2b06      	cmp	r3, #6
10006426:	d020      	beq.n	1000646a <UART_SetConfig+0xeae>
10006428:	687b      	ldr	r3, [r7, #4]
1000642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000642c:	2b07      	cmp	r3, #7
1000642e:	d01a      	beq.n	10006466 <UART_SetConfig+0xeaa>
10006430:	687b      	ldr	r3, [r7, #4]
10006432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006434:	2b08      	cmp	r3, #8
10006436:	d014      	beq.n	10006462 <UART_SetConfig+0xea6>
10006438:	687b      	ldr	r3, [r7, #4]
1000643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000643c:	2b09      	cmp	r3, #9
1000643e:	d00e      	beq.n	1000645e <UART_SetConfig+0xea2>
10006440:	687b      	ldr	r3, [r7, #4]
10006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006444:	2b0a      	cmp	r3, #10
10006446:	d008      	beq.n	1000645a <UART_SetConfig+0xe9e>
10006448:	687b      	ldr	r3, [r7, #4]
1000644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000644c:	2b0b      	cmp	r3, #11
1000644e:	d102      	bne.n	10006456 <UART_SetConfig+0xe9a>
10006450:	f44f 7380 	mov.w	r3, #256	@ 0x100
10006454:	e016      	b.n	10006484 <UART_SetConfig+0xec8>
10006456:	2301      	movs	r3, #1
10006458:	e014      	b.n	10006484 <UART_SetConfig+0xec8>
1000645a:	2380      	movs	r3, #128	@ 0x80
1000645c:	e012      	b.n	10006484 <UART_SetConfig+0xec8>
1000645e:	2340      	movs	r3, #64	@ 0x40
10006460:	e010      	b.n	10006484 <UART_SetConfig+0xec8>
10006462:	2320      	movs	r3, #32
10006464:	e00e      	b.n	10006484 <UART_SetConfig+0xec8>
10006466:	2310      	movs	r3, #16
10006468:	e00c      	b.n	10006484 <UART_SetConfig+0xec8>
1000646a:	230c      	movs	r3, #12
1000646c:	e00a      	b.n	10006484 <UART_SetConfig+0xec8>
1000646e:	230a      	movs	r3, #10
10006470:	e008      	b.n	10006484 <UART_SetConfig+0xec8>
10006472:	2308      	movs	r3, #8
10006474:	e006      	b.n	10006484 <UART_SetConfig+0xec8>
10006476:	2306      	movs	r3, #6
10006478:	e004      	b.n	10006484 <UART_SetConfig+0xec8>
1000647a:	2304      	movs	r3, #4
1000647c:	e002      	b.n	10006484 <UART_SetConfig+0xec8>
1000647e:	2302      	movs	r3, #2
10006480:	e000      	b.n	10006484 <UART_SetConfig+0xec8>
10006482:	2301      	movs	r3, #1
10006484:	fbb2 f2f3 	udiv	r2, r2, r3
10006488:	687b      	ldr	r3, [r7, #4]
1000648a:	685b      	ldr	r3, [r3, #4]
1000648c:	085b      	lsrs	r3, r3, #1
1000648e:	441a      	add	r2, r3
10006490:	687b      	ldr	r3, [r7, #4]
10006492:	685b      	ldr	r3, [r3, #4]
10006494:	fbb2 f3f3 	udiv	r3, r2, r3
10006498:	b29b      	uxth	r3, r3
1000649a:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
1000649c:	e10b      	b.n	100066b6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000649e:	687b      	ldr	r3, [r7, #4]
100064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064a2:	2b00      	cmp	r3, #0
100064a4:	d044      	beq.n	10006530 <UART_SetConfig+0xf74>
100064a6:	687b      	ldr	r3, [r7, #4]
100064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064aa:	2b01      	cmp	r3, #1
100064ac:	d03e      	beq.n	1000652c <UART_SetConfig+0xf70>
100064ae:	687b      	ldr	r3, [r7, #4]
100064b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064b2:	2b02      	cmp	r3, #2
100064b4:	d038      	beq.n	10006528 <UART_SetConfig+0xf6c>
100064b6:	687b      	ldr	r3, [r7, #4]
100064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064ba:	2b03      	cmp	r3, #3
100064bc:	d032      	beq.n	10006524 <UART_SetConfig+0xf68>
100064be:	687b      	ldr	r3, [r7, #4]
100064c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064c2:	2b04      	cmp	r3, #4
100064c4:	d02c      	beq.n	10006520 <UART_SetConfig+0xf64>
100064c6:	687b      	ldr	r3, [r7, #4]
100064c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064ca:	2b05      	cmp	r3, #5
100064cc:	d026      	beq.n	1000651c <UART_SetConfig+0xf60>
100064ce:	687b      	ldr	r3, [r7, #4]
100064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064d2:	2b06      	cmp	r3, #6
100064d4:	d020      	beq.n	10006518 <UART_SetConfig+0xf5c>
100064d6:	687b      	ldr	r3, [r7, #4]
100064d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064da:	2b07      	cmp	r3, #7
100064dc:	d01a      	beq.n	10006514 <UART_SetConfig+0xf58>
100064de:	687b      	ldr	r3, [r7, #4]
100064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064e2:	2b08      	cmp	r3, #8
100064e4:	d014      	beq.n	10006510 <UART_SetConfig+0xf54>
100064e6:	687b      	ldr	r3, [r7, #4]
100064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064ea:	2b09      	cmp	r3, #9
100064ec:	d00e      	beq.n	1000650c <UART_SetConfig+0xf50>
100064ee:	687b      	ldr	r3, [r7, #4]
100064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064f2:	2b0a      	cmp	r3, #10
100064f4:	d008      	beq.n	10006508 <UART_SetConfig+0xf4c>
100064f6:	687b      	ldr	r3, [r7, #4]
100064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100064fa:	2b0b      	cmp	r3, #11
100064fc:	d102      	bne.n	10006504 <UART_SetConfig+0xf48>
100064fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
10006502:	e016      	b.n	10006532 <UART_SetConfig+0xf76>
10006504:	2301      	movs	r3, #1
10006506:	e014      	b.n	10006532 <UART_SetConfig+0xf76>
10006508:	2380      	movs	r3, #128	@ 0x80
1000650a:	e012      	b.n	10006532 <UART_SetConfig+0xf76>
1000650c:	2340      	movs	r3, #64	@ 0x40
1000650e:	e010      	b.n	10006532 <UART_SetConfig+0xf76>
10006510:	2320      	movs	r3, #32
10006512:	e00e      	b.n	10006532 <UART_SetConfig+0xf76>
10006514:	2310      	movs	r3, #16
10006516:	e00c      	b.n	10006532 <UART_SetConfig+0xf76>
10006518:	230c      	movs	r3, #12
1000651a:	e00a      	b.n	10006532 <UART_SetConfig+0xf76>
1000651c:	230a      	movs	r3, #10
1000651e:	e008      	b.n	10006532 <UART_SetConfig+0xf76>
10006520:	2308      	movs	r3, #8
10006522:	e006      	b.n	10006532 <UART_SetConfig+0xf76>
10006524:	2306      	movs	r3, #6
10006526:	e004      	b.n	10006532 <UART_SetConfig+0xf76>
10006528:	2304      	movs	r3, #4
1000652a:	e002      	b.n	10006532 <UART_SetConfig+0xf76>
1000652c:	2302      	movs	r3, #2
1000652e:	e000      	b.n	10006532 <UART_SetConfig+0xf76>
10006530:	2301      	movs	r3, #1
10006532:	4a72      	ldr	r2, [pc, #456]	@ (100066fc <UART_SetConfig+0x1140>)
10006534:	fbb2 f2f3 	udiv	r2, r2, r3
10006538:	687b      	ldr	r3, [r7, #4]
1000653a:	685b      	ldr	r3, [r3, #4]
1000653c:	085b      	lsrs	r3, r3, #1
1000653e:	441a      	add	r2, r3
10006540:	687b      	ldr	r3, [r7, #4]
10006542:	685b      	ldr	r3, [r3, #4]
10006544:	fbb2 f3f3 	udiv	r3, r2, r3
10006548:	b29b      	uxth	r3, r3
1000654a:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
1000654c:	e0b3      	b.n	100066b6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000654e:	687b      	ldr	r3, [r7, #4]
10006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006552:	2b00      	cmp	r3, #0
10006554:	d044      	beq.n	100065e0 <UART_SetConfig+0x1024>
10006556:	687b      	ldr	r3, [r7, #4]
10006558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000655a:	2b01      	cmp	r3, #1
1000655c:	d03e      	beq.n	100065dc <UART_SetConfig+0x1020>
1000655e:	687b      	ldr	r3, [r7, #4]
10006560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006562:	2b02      	cmp	r3, #2
10006564:	d038      	beq.n	100065d8 <UART_SetConfig+0x101c>
10006566:	687b      	ldr	r3, [r7, #4]
10006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000656a:	2b03      	cmp	r3, #3
1000656c:	d032      	beq.n	100065d4 <UART_SetConfig+0x1018>
1000656e:	687b      	ldr	r3, [r7, #4]
10006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006572:	2b04      	cmp	r3, #4
10006574:	d02c      	beq.n	100065d0 <UART_SetConfig+0x1014>
10006576:	687b      	ldr	r3, [r7, #4]
10006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000657a:	2b05      	cmp	r3, #5
1000657c:	d026      	beq.n	100065cc <UART_SetConfig+0x1010>
1000657e:	687b      	ldr	r3, [r7, #4]
10006580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006582:	2b06      	cmp	r3, #6
10006584:	d020      	beq.n	100065c8 <UART_SetConfig+0x100c>
10006586:	687b      	ldr	r3, [r7, #4]
10006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000658a:	2b07      	cmp	r3, #7
1000658c:	d01a      	beq.n	100065c4 <UART_SetConfig+0x1008>
1000658e:	687b      	ldr	r3, [r7, #4]
10006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006592:	2b08      	cmp	r3, #8
10006594:	d014      	beq.n	100065c0 <UART_SetConfig+0x1004>
10006596:	687b      	ldr	r3, [r7, #4]
10006598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000659a:	2b09      	cmp	r3, #9
1000659c:	d00e      	beq.n	100065bc <UART_SetConfig+0x1000>
1000659e:	687b      	ldr	r3, [r7, #4]
100065a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100065a2:	2b0a      	cmp	r3, #10
100065a4:	d008      	beq.n	100065b8 <UART_SetConfig+0xffc>
100065a6:	687b      	ldr	r3, [r7, #4]
100065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100065aa:	2b0b      	cmp	r3, #11
100065ac:	d102      	bne.n	100065b4 <UART_SetConfig+0xff8>
100065ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
100065b2:	e016      	b.n	100065e2 <UART_SetConfig+0x1026>
100065b4:	2301      	movs	r3, #1
100065b6:	e014      	b.n	100065e2 <UART_SetConfig+0x1026>
100065b8:	2380      	movs	r3, #128	@ 0x80
100065ba:	e012      	b.n	100065e2 <UART_SetConfig+0x1026>
100065bc:	2340      	movs	r3, #64	@ 0x40
100065be:	e010      	b.n	100065e2 <UART_SetConfig+0x1026>
100065c0:	2320      	movs	r3, #32
100065c2:	e00e      	b.n	100065e2 <UART_SetConfig+0x1026>
100065c4:	2310      	movs	r3, #16
100065c6:	e00c      	b.n	100065e2 <UART_SetConfig+0x1026>
100065c8:	230c      	movs	r3, #12
100065ca:	e00a      	b.n	100065e2 <UART_SetConfig+0x1026>
100065cc:	230a      	movs	r3, #10
100065ce:	e008      	b.n	100065e2 <UART_SetConfig+0x1026>
100065d0:	2308      	movs	r3, #8
100065d2:	e006      	b.n	100065e2 <UART_SetConfig+0x1026>
100065d4:	2306      	movs	r3, #6
100065d6:	e004      	b.n	100065e2 <UART_SetConfig+0x1026>
100065d8:	2304      	movs	r3, #4
100065da:	e002      	b.n	100065e2 <UART_SetConfig+0x1026>
100065dc:	2302      	movs	r3, #2
100065de:	e000      	b.n	100065e2 <UART_SetConfig+0x1026>
100065e0:	2301      	movs	r3, #1
100065e2:	4a47      	ldr	r2, [pc, #284]	@ (10006700 <UART_SetConfig+0x1144>)
100065e4:	fbb2 f2f3 	udiv	r2, r2, r3
100065e8:	687b      	ldr	r3, [r7, #4]
100065ea:	685b      	ldr	r3, [r3, #4]
100065ec:	085b      	lsrs	r3, r3, #1
100065ee:	441a      	add	r2, r3
100065f0:	687b      	ldr	r3, [r7, #4]
100065f2:	685b      	ldr	r3, [r3, #4]
100065f4:	fbb2 f3f3 	udiv	r3, r2, r3
100065f8:	b29b      	uxth	r3, r3
100065fa:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100065fc:	e05b      	b.n	100066b6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100065fe:	687b      	ldr	r3, [r7, #4]
10006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006602:	2b00      	cmp	r3, #0
10006604:	d044      	beq.n	10006690 <UART_SetConfig+0x10d4>
10006606:	687b      	ldr	r3, [r7, #4]
10006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000660a:	2b01      	cmp	r3, #1
1000660c:	d03e      	beq.n	1000668c <UART_SetConfig+0x10d0>
1000660e:	687b      	ldr	r3, [r7, #4]
10006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006612:	2b02      	cmp	r3, #2
10006614:	d038      	beq.n	10006688 <UART_SetConfig+0x10cc>
10006616:	687b      	ldr	r3, [r7, #4]
10006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000661a:	2b03      	cmp	r3, #3
1000661c:	d032      	beq.n	10006684 <UART_SetConfig+0x10c8>
1000661e:	687b      	ldr	r3, [r7, #4]
10006620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006622:	2b04      	cmp	r3, #4
10006624:	d02c      	beq.n	10006680 <UART_SetConfig+0x10c4>
10006626:	687b      	ldr	r3, [r7, #4]
10006628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000662a:	2b05      	cmp	r3, #5
1000662c:	d026      	beq.n	1000667c <UART_SetConfig+0x10c0>
1000662e:	687b      	ldr	r3, [r7, #4]
10006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006632:	2b06      	cmp	r3, #6
10006634:	d020      	beq.n	10006678 <UART_SetConfig+0x10bc>
10006636:	687b      	ldr	r3, [r7, #4]
10006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000663a:	2b07      	cmp	r3, #7
1000663c:	d01a      	beq.n	10006674 <UART_SetConfig+0x10b8>
1000663e:	687b      	ldr	r3, [r7, #4]
10006640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006642:	2b08      	cmp	r3, #8
10006644:	d014      	beq.n	10006670 <UART_SetConfig+0x10b4>
10006646:	687b      	ldr	r3, [r7, #4]
10006648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000664a:	2b09      	cmp	r3, #9
1000664c:	d00e      	beq.n	1000666c <UART_SetConfig+0x10b0>
1000664e:	687b      	ldr	r3, [r7, #4]
10006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006652:	2b0a      	cmp	r3, #10
10006654:	d008      	beq.n	10006668 <UART_SetConfig+0x10ac>
10006656:	687b      	ldr	r3, [r7, #4]
10006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000665a:	2b0b      	cmp	r3, #11
1000665c:	d102      	bne.n	10006664 <UART_SetConfig+0x10a8>
1000665e:	f44f 7380 	mov.w	r3, #256	@ 0x100
10006662:	e016      	b.n	10006692 <UART_SetConfig+0x10d6>
10006664:	2301      	movs	r3, #1
10006666:	e014      	b.n	10006692 <UART_SetConfig+0x10d6>
10006668:	2380      	movs	r3, #128	@ 0x80
1000666a:	e012      	b.n	10006692 <UART_SetConfig+0x10d6>
1000666c:	2340      	movs	r3, #64	@ 0x40
1000666e:	e010      	b.n	10006692 <UART_SetConfig+0x10d6>
10006670:	2320      	movs	r3, #32
10006672:	e00e      	b.n	10006692 <UART_SetConfig+0x10d6>
10006674:	2310      	movs	r3, #16
10006676:	e00c      	b.n	10006692 <UART_SetConfig+0x10d6>
10006678:	230c      	movs	r3, #12
1000667a:	e00a      	b.n	10006692 <UART_SetConfig+0x10d6>
1000667c:	230a      	movs	r3, #10
1000667e:	e008      	b.n	10006692 <UART_SetConfig+0x10d6>
10006680:	2308      	movs	r3, #8
10006682:	e006      	b.n	10006692 <UART_SetConfig+0x10d6>
10006684:	2306      	movs	r3, #6
10006686:	e004      	b.n	10006692 <UART_SetConfig+0x10d6>
10006688:	2304      	movs	r3, #4
1000668a:	e002      	b.n	10006692 <UART_SetConfig+0x10d6>
1000668c:	2302      	movs	r3, #2
1000668e:	e000      	b.n	10006692 <UART_SetConfig+0x10d6>
10006690:	2301      	movs	r3, #1
10006692:	4a1c      	ldr	r2, [pc, #112]	@ (10006704 <UART_SetConfig+0x1148>)
10006694:	fbb2 f2f3 	udiv	r2, r2, r3
10006698:	687b      	ldr	r3, [r7, #4]
1000669a:	685b      	ldr	r3, [r3, #4]
1000669c:	085b      	lsrs	r3, r3, #1
1000669e:	441a      	add	r2, r3
100066a0:	687b      	ldr	r3, [r7, #4]
100066a2:	685b      	ldr	r3, [r3, #4]
100066a4:	fbb2 f3f3 	udiv	r3, r2, r3
100066a8:	b29b      	uxth	r3, r3
100066aa:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100066ac:	e003      	b.n	100066b6 <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
100066ae:	2301      	movs	r3, #1
100066b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        break;
100066b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
100066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100066b8:	2b0f      	cmp	r3, #15
100066ba:	d908      	bls.n	100066ce <UART_SetConfig+0x1112>
100066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100066be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
100066c2:	d204      	bcs.n	100066ce <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
100066c4:	687b      	ldr	r3, [r7, #4]
100066c6:	681b      	ldr	r3, [r3, #0]
100066c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100066ca:	60da      	str	r2, [r3, #12]
100066cc:	e002      	b.n	100066d4 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
100066ce:	2301      	movs	r3, #1
100066d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
100066d4:	687b      	ldr	r3, [r7, #4]
100066d6:	2201      	movs	r2, #1
100066d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
100066dc:	687b      	ldr	r3, [r7, #4]
100066de:	2201      	movs	r2, #1
100066e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
100066e4:	687b      	ldr	r3, [r7, #4]
100066e6:	2200      	movs	r2, #0
100066e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->TxISR = NULL;
100066ea:	687b      	ldr	r3, [r7, #4]
100066ec:	2200      	movs	r2, #0
100066ee:	671a      	str	r2, [r3, #112]	@ 0x70

  return ret;
100066f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
100066f4:	4618      	mov	r0, r3
100066f6:	3738      	adds	r7, #56	@ 0x38
100066f8:	46bd      	mov	sp, r7
100066fa:	bd80      	pop	{r7, pc}
100066fc:	03d09000 	.word	0x03d09000
10006700:	003d0900 	.word	0x003d0900
10006704:	016e3600 	.word	0x016e3600

10006708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10006708:	b480      	push	{r7}
1000670a:	b083      	sub	sp, #12
1000670c:	af00      	add	r7, sp, #0
1000670e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10006710:	687b      	ldr	r3, [r7, #4]
10006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006714:	f003 0301 	and.w	r3, r3, #1
10006718:	2b00      	cmp	r3, #0
1000671a:	d00a      	beq.n	10006732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1000671c:	687b      	ldr	r3, [r7, #4]
1000671e:	681b      	ldr	r3, [r3, #0]
10006720:	685b      	ldr	r3, [r3, #4]
10006722:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
10006726:	687b      	ldr	r3, [r7, #4]
10006728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1000672a:	687b      	ldr	r3, [r7, #4]
1000672c:	681b      	ldr	r3, [r3, #0]
1000672e:	430a      	orrs	r2, r1
10006730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10006732:	687b      	ldr	r3, [r7, #4]
10006734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006736:	f003 0302 	and.w	r3, r3, #2
1000673a:	2b00      	cmp	r3, #0
1000673c:	d00a      	beq.n	10006754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1000673e:	687b      	ldr	r3, [r7, #4]
10006740:	681b      	ldr	r3, [r3, #0]
10006742:	685b      	ldr	r3, [r3, #4]
10006744:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
10006748:	687b      	ldr	r3, [r7, #4]
1000674a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1000674c:	687b      	ldr	r3, [r7, #4]
1000674e:	681b      	ldr	r3, [r3, #0]
10006750:	430a      	orrs	r2, r1
10006752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10006754:	687b      	ldr	r3, [r7, #4]
10006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006758:	f003 0304 	and.w	r3, r3, #4
1000675c:	2b00      	cmp	r3, #0
1000675e:	d00a      	beq.n	10006776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10006760:	687b      	ldr	r3, [r7, #4]
10006762:	681b      	ldr	r3, [r3, #0]
10006764:	685b      	ldr	r3, [r3, #4]
10006766:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
1000676a:	687b      	ldr	r3, [r7, #4]
1000676c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1000676e:	687b      	ldr	r3, [r7, #4]
10006770:	681b      	ldr	r3, [r3, #0]
10006772:	430a      	orrs	r2, r1
10006774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10006776:	687b      	ldr	r3, [r7, #4]
10006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000677a:	f003 0308 	and.w	r3, r3, #8
1000677e:	2b00      	cmp	r3, #0
10006780:	d00a      	beq.n	10006798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10006782:	687b      	ldr	r3, [r7, #4]
10006784:	681b      	ldr	r3, [r3, #0]
10006786:	685b      	ldr	r3, [r3, #4]
10006788:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
1000678c:	687b      	ldr	r3, [r7, #4]
1000678e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10006790:	687b      	ldr	r3, [r7, #4]
10006792:	681b      	ldr	r3, [r3, #0]
10006794:	430a      	orrs	r2, r1
10006796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10006798:	687b      	ldr	r3, [r7, #4]
1000679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000679c:	f003 0310 	and.w	r3, r3, #16
100067a0:	2b00      	cmp	r3, #0
100067a2:	d00a      	beq.n	100067ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
100067a4:	687b      	ldr	r3, [r7, #4]
100067a6:	681b      	ldr	r3, [r3, #0]
100067a8:	689b      	ldr	r3, [r3, #8]
100067aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
100067ae:	687b      	ldr	r3, [r7, #4]
100067b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
100067b2:	687b      	ldr	r3, [r7, #4]
100067b4:	681b      	ldr	r3, [r3, #0]
100067b6:	430a      	orrs	r2, r1
100067b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
100067ba:	687b      	ldr	r3, [r7, #4]
100067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100067be:	f003 0320 	and.w	r3, r3, #32
100067c2:	2b00      	cmp	r3, #0
100067c4:	d00a      	beq.n	100067dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
100067c6:	687b      	ldr	r3, [r7, #4]
100067c8:	681b      	ldr	r3, [r3, #0]
100067ca:	689b      	ldr	r3, [r3, #8]
100067cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
100067d0:	687b      	ldr	r3, [r7, #4]
100067d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100067d4:	687b      	ldr	r3, [r7, #4]
100067d6:	681b      	ldr	r3, [r3, #0]
100067d8:	430a      	orrs	r2, r1
100067da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
100067dc:	687b      	ldr	r3, [r7, #4]
100067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100067e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100067e4:	2b00      	cmp	r3, #0
100067e6:	d01a      	beq.n	1000681e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
100067e8:	687b      	ldr	r3, [r7, #4]
100067ea:	681b      	ldr	r3, [r3, #0]
100067ec:	685b      	ldr	r3, [r3, #4]
100067ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
100067f2:	687b      	ldr	r3, [r7, #4]
100067f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100067f6:	687b      	ldr	r3, [r7, #4]
100067f8:	681b      	ldr	r3, [r3, #0]
100067fa:	430a      	orrs	r2, r1
100067fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
100067fe:	687b      	ldr	r3, [r7, #4]
10006800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10006802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
10006806:	d10a      	bne.n	1000681e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10006808:	687b      	ldr	r3, [r7, #4]
1000680a:	681b      	ldr	r3, [r3, #0]
1000680c:	685b      	ldr	r3, [r3, #4]
1000680e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
10006812:	687b      	ldr	r3, [r7, #4]
10006814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10006816:	687b      	ldr	r3, [r7, #4]
10006818:	681b      	ldr	r3, [r3, #0]
1000681a:	430a      	orrs	r2, r1
1000681c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1000681e:	687b      	ldr	r3, [r7, #4]
10006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10006826:	2b00      	cmp	r3, #0
10006828:	d00a      	beq.n	10006840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1000682a:	687b      	ldr	r3, [r7, #4]
1000682c:	681b      	ldr	r3, [r3, #0]
1000682e:	685b      	ldr	r3, [r3, #4]
10006830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
10006834:	687b      	ldr	r3, [r7, #4]
10006836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10006838:	687b      	ldr	r3, [r7, #4]
1000683a:	681b      	ldr	r3, [r3, #0]
1000683c:	430a      	orrs	r2, r1
1000683e:	605a      	str	r2, [r3, #4]
  }
}
10006840:	bf00      	nop
10006842:	370c      	adds	r7, #12
10006844:	46bd      	mov	sp, r7
10006846:	f85d 7b04 	ldr.w	r7, [sp], #4
1000684a:	4770      	bx	lr

1000684c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1000684c:	b580      	push	{r7, lr}
1000684e:	b086      	sub	sp, #24
10006850:	af02      	add	r7, sp, #8
10006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10006854:	687b      	ldr	r3, [r7, #4]
10006856:	2200      	movs	r2, #0
10006858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
1000685c:	f7fa fb9e 	bl	10000f9c <HAL_GetTick>
10006860:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10006862:	687b      	ldr	r3, [r7, #4]
10006864:	681b      	ldr	r3, [r3, #0]
10006866:	681b      	ldr	r3, [r3, #0]
10006868:	f003 0308 	and.w	r3, r3, #8
1000686c:	2b08      	cmp	r3, #8
1000686e:	d10e      	bne.n	1000688e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10006870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
10006874:	9300      	str	r3, [sp, #0]
10006876:	68fb      	ldr	r3, [r7, #12]
10006878:	2200      	movs	r2, #0
1000687a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
1000687e:	6878      	ldr	r0, [r7, #4]
10006880:	f000 f82c 	bl	100068dc <UART_WaitOnFlagUntilTimeout>
10006884:	4603      	mov	r3, r0
10006886:	2b00      	cmp	r3, #0
10006888:	d001      	beq.n	1000688e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
1000688a:	2303      	movs	r3, #3
1000688c:	e022      	b.n	100068d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1000688e:	687b      	ldr	r3, [r7, #4]
10006890:	681b      	ldr	r3, [r3, #0]
10006892:	681b      	ldr	r3, [r3, #0]
10006894:	f003 0304 	and.w	r3, r3, #4
10006898:	2b04      	cmp	r3, #4
1000689a:	d10e      	bne.n	100068ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1000689c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
100068a0:	9300      	str	r3, [sp, #0]
100068a2:	68fb      	ldr	r3, [r7, #12]
100068a4:	2200      	movs	r2, #0
100068a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
100068aa:	6878      	ldr	r0, [r7, #4]
100068ac:	f000 f816 	bl	100068dc <UART_WaitOnFlagUntilTimeout>
100068b0:	4603      	mov	r3, r0
100068b2:	2b00      	cmp	r3, #0
100068b4:	d001      	beq.n	100068ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
100068b6:	2303      	movs	r3, #3
100068b8:	e00c      	b.n	100068d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
100068ba:	687b      	ldr	r3, [r7, #4]
100068bc:	2220      	movs	r2, #32
100068be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
100068c2:	687b      	ldr	r3, [r7, #4]
100068c4:	2220      	movs	r2, #32
100068c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_UNLOCK(huart);
100068ca:	687b      	ldr	r3, [r7, #4]
100068cc:	2200      	movs	r2, #0
100068ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
100068d2:	2300      	movs	r3, #0
}
100068d4:	4618      	mov	r0, r3
100068d6:	3710      	adds	r7, #16
100068d8:	46bd      	mov	sp, r7
100068da:	bd80      	pop	{r7, pc}

100068dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
100068dc:	b580      	push	{r7, lr}
100068de:	b084      	sub	sp, #16
100068e0:	af00      	add	r7, sp, #0
100068e2:	60f8      	str	r0, [r7, #12]
100068e4:	60b9      	str	r1, [r7, #8]
100068e6:	603b      	str	r3, [r7, #0]
100068e8:	4613      	mov	r3, r2
100068ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100068ec:	e062      	b.n	100069b4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
100068ee:	69bb      	ldr	r3, [r7, #24]
100068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
100068f4:	d05e      	beq.n	100069b4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
100068f6:	f7fa fb51 	bl	10000f9c <HAL_GetTick>
100068fa:	4602      	mov	r2, r0
100068fc:	683b      	ldr	r3, [r7, #0]
100068fe:	1ad3      	subs	r3, r2, r3
10006900:	69ba      	ldr	r2, [r7, #24]
10006902:	429a      	cmp	r2, r3
10006904:	d302      	bcc.n	1000690c <UART_WaitOnFlagUntilTimeout+0x30>
10006906:	69bb      	ldr	r3, [r7, #24]
10006908:	2b00      	cmp	r3, #0
1000690a:	d11d      	bne.n	10006948 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000690c:	68fb      	ldr	r3, [r7, #12]
1000690e:	681b      	ldr	r3, [r3, #0]
10006910:	681a      	ldr	r2, [r3, #0]
10006912:	68fb      	ldr	r3, [r7, #12]
10006914:	681b      	ldr	r3, [r3, #0]
10006916:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
1000691a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000691c:	68fb      	ldr	r3, [r7, #12]
1000691e:	681b      	ldr	r3, [r3, #0]
10006920:	689a      	ldr	r2, [r3, #8]
10006922:	68fb      	ldr	r3, [r7, #12]
10006924:	681b      	ldr	r3, [r3, #0]
10006926:	f022 0201 	bic.w	r2, r2, #1
1000692a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
1000692c:	68fb      	ldr	r3, [r7, #12]
1000692e:	2220      	movs	r2, #32
10006930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
10006934:	68fb      	ldr	r3, [r7, #12]
10006936:	2220      	movs	r2, #32
10006938:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
1000693c:	68fb      	ldr	r3, [r7, #12]
1000693e:	2200      	movs	r2, #0
10006940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
10006944:	2303      	movs	r3, #3
10006946:	e045      	b.n	100069d4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
10006948:	68fb      	ldr	r3, [r7, #12]
1000694a:	681b      	ldr	r3, [r3, #0]
1000694c:	681b      	ldr	r3, [r3, #0]
1000694e:	f003 0304 	and.w	r3, r3, #4
10006952:	2b00      	cmp	r3, #0
10006954:	d02e      	beq.n	100069b4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10006956:	68fb      	ldr	r3, [r7, #12]
10006958:	681b      	ldr	r3, [r3, #0]
1000695a:	69db      	ldr	r3, [r3, #28]
1000695c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
10006960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
10006964:	d126      	bne.n	100069b4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10006966:	68fb      	ldr	r3, [r7, #12]
10006968:	681b      	ldr	r3, [r3, #0]
1000696a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
1000696e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10006970:	68fb      	ldr	r3, [r7, #12]
10006972:	681b      	ldr	r3, [r3, #0]
10006974:	681a      	ldr	r2, [r3, #0]
10006976:	68fb      	ldr	r3, [r7, #12]
10006978:	681b      	ldr	r3, [r3, #0]
1000697a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
1000697e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10006980:	68fb      	ldr	r3, [r7, #12]
10006982:	681b      	ldr	r3, [r3, #0]
10006984:	689a      	ldr	r2, [r3, #8]
10006986:	68fb      	ldr	r3, [r7, #12]
10006988:	681b      	ldr	r3, [r3, #0]
1000698a:	f022 0201 	bic.w	r2, r2, #1
1000698e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
10006990:	68fb      	ldr	r3, [r7, #12]
10006992:	2220      	movs	r2, #32
10006994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
10006998:	68fb      	ldr	r3, [r7, #12]
1000699a:	2220      	movs	r2, #32
1000699c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
100069a0:	68fb      	ldr	r3, [r7, #12]
100069a2:	2220      	movs	r2, #32
100069a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
100069a8:	68fb      	ldr	r3, [r7, #12]
100069aa:	2200      	movs	r2, #0
100069ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
          
          return HAL_TIMEOUT;
100069b0:	2303      	movs	r3, #3
100069b2:	e00f      	b.n	100069d4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100069b4:	68fb      	ldr	r3, [r7, #12]
100069b6:	681b      	ldr	r3, [r3, #0]
100069b8:	69da      	ldr	r2, [r3, #28]
100069ba:	68bb      	ldr	r3, [r7, #8]
100069bc:	4013      	ands	r3, r2
100069be:	68ba      	ldr	r2, [r7, #8]
100069c0:	429a      	cmp	r2, r3
100069c2:	bf0c      	ite	eq
100069c4:	2301      	moveq	r3, #1
100069c6:	2300      	movne	r3, #0
100069c8:	b2db      	uxtb	r3, r3
100069ca:	461a      	mov	r2, r3
100069cc:	79fb      	ldrb	r3, [r7, #7]
100069ce:	429a      	cmp	r2, r3
100069d0:	d08d      	beq.n	100068ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
100069d2:	2300      	movs	r3, #0
}
100069d4:	4618      	mov	r0, r3
100069d6:	3710      	adds	r7, #16
100069d8:	46bd      	mov	sp, r7
100069da:	bd80      	pop	{r7, pc}

100069dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
100069dc:	b480      	push	{r7}
100069de:	b085      	sub	sp, #20
100069e0:	af00      	add	r7, sp, #0
100069e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
100069e4:	687b      	ldr	r3, [r7, #4]
100069e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
100069ea:	2b01      	cmp	r3, #1
100069ec:	d101      	bne.n	100069f2 <HAL_UARTEx_DisableFifoMode+0x16>
100069ee:	2302      	movs	r3, #2
100069f0:	e027      	b.n	10006a42 <HAL_UARTEx_DisableFifoMode+0x66>
100069f2:	687b      	ldr	r3, [r7, #4]
100069f4:	2201      	movs	r2, #1
100069f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
100069fa:	687b      	ldr	r3, [r7, #4]
100069fc:	2224      	movs	r2, #36	@ 0x24
100069fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10006a02:	687b      	ldr	r3, [r7, #4]
10006a04:	681b      	ldr	r3, [r3, #0]
10006a06:	681b      	ldr	r3, [r3, #0]
10006a08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10006a0a:	687b      	ldr	r3, [r7, #4]
10006a0c:	681b      	ldr	r3, [r3, #0]
10006a0e:	681a      	ldr	r2, [r3, #0]
10006a10:	687b      	ldr	r3, [r7, #4]
10006a12:	681b      	ldr	r3, [r3, #0]
10006a14:	f022 0201 	bic.w	r2, r2, #1
10006a18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
10006a1a:	68fb      	ldr	r3, [r7, #12]
10006a1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
10006a20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
10006a22:	687b      	ldr	r3, [r7, #4]
10006a24:	2200      	movs	r2, #0
10006a26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10006a28:	687b      	ldr	r3, [r7, #4]
10006a2a:	681b      	ldr	r3, [r3, #0]
10006a2c:	68fa      	ldr	r2, [r7, #12]
10006a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10006a30:	687b      	ldr	r3, [r7, #4]
10006a32:	2220      	movs	r2, #32
10006a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10006a38:	687b      	ldr	r3, [r7, #4]
10006a3a:	2200      	movs	r2, #0
10006a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
10006a40:	2300      	movs	r3, #0
}
10006a42:	4618      	mov	r0, r3
10006a44:	3714      	adds	r7, #20
10006a46:	46bd      	mov	sp, r7
10006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
10006a4c:	4770      	bx	lr

10006a4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10006a4e:	b580      	push	{r7, lr}
10006a50:	b084      	sub	sp, #16
10006a52:	af00      	add	r7, sp, #0
10006a54:	6078      	str	r0, [r7, #4]
10006a56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10006a58:	687b      	ldr	r3, [r7, #4]
10006a5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
10006a5e:	2b01      	cmp	r3, #1
10006a60:	d101      	bne.n	10006a66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
10006a62:	2302      	movs	r3, #2
10006a64:	e02d      	b.n	10006ac2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
10006a66:	687b      	ldr	r3, [r7, #4]
10006a68:	2201      	movs	r2, #1
10006a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10006a6e:	687b      	ldr	r3, [r7, #4]
10006a70:	2224      	movs	r2, #36	@ 0x24
10006a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10006a76:	687b      	ldr	r3, [r7, #4]
10006a78:	681b      	ldr	r3, [r3, #0]
10006a7a:	681b      	ldr	r3, [r3, #0]
10006a7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10006a7e:	687b      	ldr	r3, [r7, #4]
10006a80:	681b      	ldr	r3, [r3, #0]
10006a82:	681a      	ldr	r2, [r3, #0]
10006a84:	687b      	ldr	r3, [r7, #4]
10006a86:	681b      	ldr	r3, [r3, #0]
10006a88:	f022 0201 	bic.w	r2, r2, #1
10006a8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10006a8e:	687b      	ldr	r3, [r7, #4]
10006a90:	681b      	ldr	r3, [r3, #0]
10006a92:	689b      	ldr	r3, [r3, #8]
10006a94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
10006a98:	687b      	ldr	r3, [r7, #4]
10006a9a:	681b      	ldr	r3, [r3, #0]
10006a9c:	683a      	ldr	r2, [r7, #0]
10006a9e:	430a      	orrs	r2, r1
10006aa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10006aa2:	6878      	ldr	r0, [r7, #4]
10006aa4:	f000 f850 	bl	10006b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10006aa8:	687b      	ldr	r3, [r7, #4]
10006aaa:	681b      	ldr	r3, [r3, #0]
10006aac:	68fa      	ldr	r2, [r7, #12]
10006aae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10006ab0:	687b      	ldr	r3, [r7, #4]
10006ab2:	2220      	movs	r2, #32
10006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10006ab8:	687b      	ldr	r3, [r7, #4]
10006aba:	2200      	movs	r2, #0
10006abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
10006ac0:	2300      	movs	r3, #0
}
10006ac2:	4618      	mov	r0, r3
10006ac4:	3710      	adds	r7, #16
10006ac6:	46bd      	mov	sp, r7
10006ac8:	bd80      	pop	{r7, pc}

10006aca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10006aca:	b580      	push	{r7, lr}
10006acc:	b084      	sub	sp, #16
10006ace:	af00      	add	r7, sp, #0
10006ad0:	6078      	str	r0, [r7, #4]
10006ad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10006ad4:	687b      	ldr	r3, [r7, #4]
10006ad6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
10006ada:	2b01      	cmp	r3, #1
10006adc:	d101      	bne.n	10006ae2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
10006ade:	2302      	movs	r3, #2
10006ae0:	e02d      	b.n	10006b3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
10006ae2:	687b      	ldr	r3, [r7, #4]
10006ae4:	2201      	movs	r2, #1
10006ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10006aea:	687b      	ldr	r3, [r7, #4]
10006aec:	2224      	movs	r2, #36	@ 0x24
10006aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10006af2:	687b      	ldr	r3, [r7, #4]
10006af4:	681b      	ldr	r3, [r3, #0]
10006af6:	681b      	ldr	r3, [r3, #0]
10006af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10006afa:	687b      	ldr	r3, [r7, #4]
10006afc:	681b      	ldr	r3, [r3, #0]
10006afe:	681a      	ldr	r2, [r3, #0]
10006b00:	687b      	ldr	r3, [r7, #4]
10006b02:	681b      	ldr	r3, [r3, #0]
10006b04:	f022 0201 	bic.w	r2, r2, #1
10006b08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10006b0a:	687b      	ldr	r3, [r7, #4]
10006b0c:	681b      	ldr	r3, [r3, #0]
10006b0e:	689b      	ldr	r3, [r3, #8]
10006b10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
10006b14:	687b      	ldr	r3, [r7, #4]
10006b16:	681b      	ldr	r3, [r3, #0]
10006b18:	683a      	ldr	r2, [r7, #0]
10006b1a:	430a      	orrs	r2, r1
10006b1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10006b1e:	6878      	ldr	r0, [r7, #4]
10006b20:	f000 f812 	bl	10006b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10006b24:	687b      	ldr	r3, [r7, #4]
10006b26:	681b      	ldr	r3, [r3, #0]
10006b28:	68fa      	ldr	r2, [r7, #12]
10006b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10006b2c:	687b      	ldr	r3, [r7, #4]
10006b2e:	2220      	movs	r2, #32
10006b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10006b34:	687b      	ldr	r3, [r7, #4]
10006b36:	2200      	movs	r2, #0
10006b38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
10006b3c:	2300      	movs	r3, #0
}
10006b3e:	4618      	mov	r0, r3
10006b40:	3710      	adds	r7, #16
10006b42:	46bd      	mov	sp, r7
10006b44:	bd80      	pop	{r7, pc}
	...

10006b48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10006b48:	b480      	push	{r7}
10006b4a:	b089      	sub	sp, #36	@ 0x24
10006b4c:	af00      	add	r7, sp, #0
10006b4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
10006b50:	4a2d      	ldr	r2, [pc, #180]	@ (10006c08 <UARTEx_SetNbDataToProcess+0xc0>)
10006b52:	f107 0314 	add.w	r3, r7, #20
10006b56:	e892 0003 	ldmia.w	r2, {r0, r1}
10006b5a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
10006b5e:	4a2b      	ldr	r2, [pc, #172]	@ (10006c0c <UARTEx_SetNbDataToProcess+0xc4>)
10006b60:	f107 030c 	add.w	r3, r7, #12
10006b64:	e892 0003 	ldmia.w	r2, {r0, r1}
10006b68:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
10006b6c:	687b      	ldr	r3, [r7, #4]
10006b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10006b70:	2b00      	cmp	r3, #0
10006b72:	d108      	bne.n	10006b86 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
10006b74:	687b      	ldr	r3, [r7, #4]
10006b76:	2201      	movs	r2, #1
10006b78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
10006b7c:	687b      	ldr	r3, [r7, #4]
10006b7e:	2201      	movs	r2, #1
10006b80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
10006b84:	e039      	b.n	10006bfa <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
10006b86:	2308      	movs	r3, #8
10006b88:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
10006b8a:	2308      	movs	r3, #8
10006b8c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
10006b8e:	687b      	ldr	r3, [r7, #4]
10006b90:	681b      	ldr	r3, [r3, #0]
10006b92:	689b      	ldr	r3, [r3, #8]
10006b94:	0e5b      	lsrs	r3, r3, #25
10006b96:	b2db      	uxtb	r3, r3
10006b98:	f003 0307 	and.w	r3, r3, #7
10006b9c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10006b9e:	687b      	ldr	r3, [r7, #4]
10006ba0:	681b      	ldr	r3, [r3, #0]
10006ba2:	689b      	ldr	r3, [r3, #8]
10006ba4:	0f5b      	lsrs	r3, r3, #29
10006ba6:	b2db      	uxtb	r3, r3
10006ba8:	f003 0307 	and.w	r3, r3, #7
10006bac:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
10006bae:	7fbb      	ldrb	r3, [r7, #30]
10006bb0:	7f3a      	ldrb	r2, [r7, #28]
10006bb2:	3220      	adds	r2, #32
10006bb4:	443a      	add	r2, r7
10006bb6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10006bba:	fb02 f303 	mul.w	r3, r2, r3
10006bbe:	7f3a      	ldrb	r2, [r7, #28]
10006bc0:	3220      	adds	r2, #32
10006bc2:	443a      	add	r2, r7
10006bc4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10006bc8:	fb93 f3f2 	sdiv	r3, r3, r2
10006bcc:	b29a      	uxth	r2, r3
10006bce:	687b      	ldr	r3, [r7, #4]
10006bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
10006bd4:	7ffb      	ldrb	r3, [r7, #31]
10006bd6:	7f7a      	ldrb	r2, [r7, #29]
10006bd8:	3220      	adds	r2, #32
10006bda:	443a      	add	r2, r7
10006bdc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10006be0:	fb02 f303 	mul.w	r3, r2, r3
10006be4:	7f7a      	ldrb	r2, [r7, #29]
10006be6:	3220      	adds	r2, #32
10006be8:	443a      	add	r2, r7
10006bea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10006bee:	fb93 f3f2 	sdiv	r3, r3, r2
10006bf2:	b29a      	uxth	r2, r3
10006bf4:	687b      	ldr	r3, [r7, #4]
10006bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
10006bfa:	bf00      	nop
10006bfc:	3724      	adds	r7, #36	@ 0x24
10006bfe:	46bd      	mov	sp, r7
10006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
10006c04:	4770      	bx	lr
10006c06:	bf00      	nop
10006c08:	1000ab50 	.word	0x1000ab50
10006c0c:	1000ab58 	.word	0x1000ab58

10006c10 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
10006c10:	b480      	push	{r7}
10006c12:	b083      	sub	sp, #12
10006c14:	af00      	add	r7, sp, #0
10006c16:	6078      	str	r0, [r7, #4]
	list->prev = list;
10006c18:	687b      	ldr	r3, [r7, #4]
10006c1a:	687a      	ldr	r2, [r7, #4]
10006c1c:	605a      	str	r2, [r3, #4]
	list->next = list;
10006c1e:	687b      	ldr	r3, [r7, #4]
10006c20:	687a      	ldr	r2, [r7, #4]
10006c22:	601a      	str	r2, [r3, #0]
}
10006c24:	bf00      	nop
10006c26:	370c      	adds	r7, #12
10006c28:	46bd      	mov	sp, r7
10006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
10006c2e:	4770      	bx	lr

10006c30 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
10006c30:	b480      	push	{r7}
10006c32:	b083      	sub	sp, #12
10006c34:	af00      	add	r7, sp, #0
10006c36:	6078      	str	r0, [r7, #4]
10006c38:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10006c3a:	687b      	ldr	r3, [r7, #4]
10006c3c:	685a      	ldr	r2, [r3, #4]
10006c3e:	683b      	ldr	r3, [r7, #0]
10006c40:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10006c42:	683b      	ldr	r3, [r7, #0]
10006c44:	687a      	ldr	r2, [r7, #4]
10006c46:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10006c48:	683b      	ldr	r3, [r7, #0]
10006c4a:	681b      	ldr	r3, [r3, #0]
10006c4c:	683a      	ldr	r2, [r7, #0]
10006c4e:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10006c50:	683b      	ldr	r3, [r7, #0]
10006c52:	685b      	ldr	r3, [r3, #4]
10006c54:	683a      	ldr	r2, [r7, #0]
10006c56:	601a      	str	r2, [r3, #0]
}
10006c58:	bf00      	nop
10006c5a:	370c      	adds	r7, #12
10006c5c:	46bd      	mov	sp, r7
10006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006c62:	4770      	bx	lr

10006c64 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
10006c64:	b580      	push	{r7, lr}
10006c66:	b082      	sub	sp, #8
10006c68:	af00      	add	r7, sp, #0
10006c6a:	6078      	str	r0, [r7, #4]
10006c6c:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10006c6e:	6839      	ldr	r1, [r7, #0]
10006c70:	6878      	ldr	r0, [r7, #4]
10006c72:	f7ff ffdd 	bl	10006c30 <metal_list_add_before>
}
10006c76:	bf00      	nop
10006c78:	3708      	adds	r7, #8
10006c7a:	46bd      	mov	sp, r7
10006c7c:	bd80      	pop	{r7, pc}

10006c7e <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
10006c7e:	b580      	push	{r7, lr}
10006c80:	b082      	sub	sp, #8
10006c82:	af00      	add	r7, sp, #0
10006c84:	6078      	str	r0, [r7, #4]
10006c86:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10006c88:	6839      	ldr	r1, [r7, #0]
10006c8a:	6878      	ldr	r0, [r7, #4]
10006c8c:	f001 fefe 	bl	10008a8c <metal_machine_cache_flush>
}
10006c90:	bf00      	nop
10006c92:	3708      	adds	r7, #8
10006c94:	46bd      	mov	sp, r7
10006c96:	bd80      	pop	{r7, pc}

10006c98 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10006c98:	b580      	push	{r7, lr}
10006c9a:	b082      	sub	sp, #8
10006c9c:	af00      	add	r7, sp, #0
10006c9e:	6078      	str	r0, [r7, #4]
10006ca0:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
10006ca2:	6839      	ldr	r1, [r7, #0]
10006ca4:	6878      	ldr	r0, [r7, #4]
10006ca6:	f001 fefc 	bl	10008aa2 <metal_machine_cache_invalidate>
}
10006caa:	bf00      	nop
10006cac:	3708      	adds	r7, #8
10006cae:	46bd      	mov	sp, r7
10006cb0:	bd80      	pop	{r7, pc}

10006cb2 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
10006cb2:	b580      	push	{r7, lr}
10006cb4:	b082      	sub	sp, #8
10006cb6:	af00      	add	r7, sp, #0
10006cb8:	6078      	str	r0, [r7, #4]
10006cba:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10006cbc:	6839      	ldr	r1, [r7, #0]
10006cbe:	6878      	ldr	r0, [r7, #4]
10006cc0:	f7ff ffdd 	bl	10006c7e <__metal_cache_flush>
}
10006cc4:	bf00      	nop
10006cc6:	3708      	adds	r7, #8
10006cc8:	46bd      	mov	sp, r7
10006cca:	bd80      	pop	{r7, pc}

10006ccc <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10006ccc:	b580      	push	{r7, lr}
10006cce:	b082      	sub	sp, #8
10006cd0:	af00      	add	r7, sp, #0
10006cd2:	6078      	str	r0, [r7, #4]
10006cd4:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10006cd6:	6839      	ldr	r1, [r7, #0]
10006cd8:	6878      	ldr	r0, [r7, #4]
10006cda:	f7ff ffdd 	bl	10006c98 <__metal_cache_invalidate>
}
10006cde:	bf00      	nop
10006ce0:	3708      	adds	r7, #8
10006ce2:	46bd      	mov	sp, r7
10006ce4:	bd80      	pop	{r7, pc}
	...

10006ce8 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10006ce8:	b580      	push	{r7, lr}
10006cea:	b082      	sub	sp, #8
10006cec:	af00      	add	r7, sp, #0
10006cee:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
10006cf0:	687b      	ldr	r3, [r7, #4]
10006cf2:	2b00      	cmp	r3, #0
10006cf4:	d008      	beq.n	10006d08 <metal_bus_register+0x20>
10006cf6:	687b      	ldr	r3, [r7, #4]
10006cf8:	681b      	ldr	r3, [r3, #0]
10006cfa:	2b00      	cmp	r3, #0
10006cfc:	d004      	beq.n	10006d08 <metal_bus_register+0x20>
10006cfe:	687b      	ldr	r3, [r7, #4]
10006d00:	681b      	ldr	r3, [r3, #0]
10006d02:	781b      	ldrb	r3, [r3, #0]
10006d04:	2b00      	cmp	r3, #0
10006d06:	d102      	bne.n	10006d0e <metal_bus_register+0x26>
		return -EINVAL;
10006d08:	f06f 0315 	mvn.w	r3, #21
10006d0c:	e026      	b.n	10006d5c <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
10006d0e:	687b      	ldr	r3, [r7, #4]
10006d10:	681b      	ldr	r3, [r3, #0]
10006d12:	2100      	movs	r1, #0
10006d14:	4618      	mov	r0, r3
10006d16:	f000 f82b 	bl	10006d70 <metal_bus_find>
10006d1a:	4603      	mov	r3, r0
10006d1c:	2b00      	cmp	r3, #0
10006d1e:	d102      	bne.n	10006d26 <metal_bus_register+0x3e>
		return -EEXIST;
10006d20:	f06f 0310 	mvn.w	r3, #16
10006d24:	e01a      	b.n	10006d5c <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
10006d26:	687b      	ldr	r3, [r7, #4]
10006d28:	331c      	adds	r3, #28
10006d2a:	4618      	mov	r0, r3
10006d2c:	f7ff ff70 	bl	10006c10 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
10006d30:	687b      	ldr	r3, [r7, #4]
10006d32:	3324      	adds	r3, #36	@ 0x24
10006d34:	4619      	mov	r1, r3
10006d36:	480b      	ldr	r0, [pc, #44]	@ (10006d64 <metal_bus_register+0x7c>)
10006d38:	f7ff ff94 	bl	10006c64 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10006d3c:	4b0a      	ldr	r3, [pc, #40]	@ (10006d68 <metal_bus_register+0x80>)
10006d3e:	781b      	ldrb	r3, [r3, #0]
10006d40:	2b06      	cmp	r3, #6
10006d42:	d90a      	bls.n	10006d5a <metal_bus_register+0x72>
10006d44:	4b08      	ldr	r3, [pc, #32]	@ (10006d68 <metal_bus_register+0x80>)
10006d46:	685b      	ldr	r3, [r3, #4]
10006d48:	2b00      	cmp	r3, #0
10006d4a:	d006      	beq.n	10006d5a <metal_bus_register+0x72>
10006d4c:	4b06      	ldr	r3, [pc, #24]	@ (10006d68 <metal_bus_register+0x80>)
10006d4e:	685b      	ldr	r3, [r3, #4]
10006d50:	687a      	ldr	r2, [r7, #4]
10006d52:	6812      	ldr	r2, [r2, #0]
10006d54:	4905      	ldr	r1, [pc, #20]	@ (10006d6c <metal_bus_register+0x84>)
10006d56:	2007      	movs	r0, #7
10006d58:	4798      	blx	r3
	return 0;
10006d5a:	2300      	movs	r3, #0
}
10006d5c:	4618      	mov	r0, r3
10006d5e:	3708      	adds	r7, #8
10006d60:	46bd      	mov	sp, r7
10006d62:	bd80      	pop	{r7, pc}
10006d64:	10020484 	.word	0x10020484
10006d68:	1002047c 	.word	0x1002047c
10006d6c:	1000ab60 	.word	0x1000ab60

10006d70 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
10006d70:	b580      	push	{r7, lr}
10006d72:	b084      	sub	sp, #16
10006d74:	af00      	add	r7, sp, #0
10006d76:	6078      	str	r0, [r7, #4]
10006d78:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10006d7a:	4b12      	ldr	r3, [pc, #72]	@ (10006dc4 <metal_bus_find+0x54>)
10006d7c:	689b      	ldr	r3, [r3, #8]
10006d7e:	60fb      	str	r3, [r7, #12]
10006d80:	e016      	b.n	10006db0 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
10006d82:	68fb      	ldr	r3, [r7, #12]
10006d84:	3b24      	subs	r3, #36	@ 0x24
10006d86:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10006d88:	68bb      	ldr	r3, [r7, #8]
10006d8a:	681b      	ldr	r3, [r3, #0]
10006d8c:	6879      	ldr	r1, [r7, #4]
10006d8e:	4618      	mov	r0, r3
10006d90:	f7f9 f956 	bl	10000040 <strcmp>
10006d94:	4603      	mov	r3, r0
10006d96:	2b00      	cmp	r3, #0
10006d98:	d107      	bne.n	10006daa <metal_bus_find+0x3a>
10006d9a:	683b      	ldr	r3, [r7, #0]
10006d9c:	2b00      	cmp	r3, #0
10006d9e:	d004      	beq.n	10006daa <metal_bus_find+0x3a>
			*result = bus;
10006da0:	683b      	ldr	r3, [r7, #0]
10006da2:	68ba      	ldr	r2, [r7, #8]
10006da4:	601a      	str	r2, [r3, #0]
			return 0;
10006da6:	2300      	movs	r3, #0
10006da8:	e008      	b.n	10006dbc <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10006daa:	68fb      	ldr	r3, [r7, #12]
10006dac:	681b      	ldr	r3, [r3, #0]
10006dae:	60fb      	str	r3, [r7, #12]
10006db0:	68fb      	ldr	r3, [r7, #12]
10006db2:	4a05      	ldr	r2, [pc, #20]	@ (10006dc8 <metal_bus_find+0x58>)
10006db4:	4293      	cmp	r3, r2
10006db6:	d1e4      	bne.n	10006d82 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10006db8:	f06f 0301 	mvn.w	r3, #1
}
10006dbc:	4618      	mov	r0, r3
10006dbe:	3710      	adds	r7, #16
10006dc0:	46bd      	mov	sp, r7
10006dc2:	bd80      	pop	{r7, pc}
10006dc4:	1002047c 	.word	0x1002047c
10006dc8:	10020484 	.word	0x10020484

10006dcc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10006dcc:	b580      	push	{r7, lr}
10006dce:	b086      	sub	sp, #24
10006dd0:	af00      	add	r7, sp, #0
10006dd2:	60f8      	str	r0, [r7, #12]
10006dd4:	60b9      	str	r1, [r7, #8]
10006dd6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10006dd8:	68fb      	ldr	r3, [r7, #12]
10006dda:	2b00      	cmp	r3, #0
10006ddc:	d00d      	beq.n	10006dfa <metal_device_open+0x2e>
10006dde:	68fb      	ldr	r3, [r7, #12]
10006de0:	781b      	ldrb	r3, [r3, #0]
10006de2:	2b00      	cmp	r3, #0
10006de4:	d009      	beq.n	10006dfa <metal_device_open+0x2e>
10006de6:	68bb      	ldr	r3, [r7, #8]
10006de8:	2b00      	cmp	r3, #0
10006dea:	d006      	beq.n	10006dfa <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10006dec:	68bb      	ldr	r3, [r7, #8]
10006dee:	781b      	ldrb	r3, [r3, #0]
10006df0:	2b00      	cmp	r3, #0
10006df2:	d002      	beq.n	10006dfa <metal_device_open+0x2e>
10006df4:	687b      	ldr	r3, [r7, #4]
10006df6:	2b00      	cmp	r3, #0
10006df8:	d102      	bne.n	10006e00 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10006dfa:	f06f 0315 	mvn.w	r3, #21
10006dfe:	e01f      	b.n	10006e40 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10006e00:	f107 0310 	add.w	r3, r7, #16
10006e04:	4619      	mov	r1, r3
10006e06:	68f8      	ldr	r0, [r7, #12]
10006e08:	f7ff ffb2 	bl	10006d70 <metal_bus_find>
10006e0c:	6178      	str	r0, [r7, #20]
	if (error)
10006e0e:	697b      	ldr	r3, [r7, #20]
10006e10:	2b00      	cmp	r3, #0
10006e12:	d001      	beq.n	10006e18 <metal_device_open+0x4c>
		return error;
10006e14:	697b      	ldr	r3, [r7, #20]
10006e16:	e013      	b.n	10006e40 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10006e18:	693b      	ldr	r3, [r7, #16]
10006e1a:	689b      	ldr	r3, [r3, #8]
10006e1c:	2b00      	cmp	r3, #0
10006e1e:	d102      	bne.n	10006e26 <metal_device_open+0x5a>
		return -ENODEV;
10006e20:	f06f 0312 	mvn.w	r3, #18
10006e24:	e00c      	b.n	10006e40 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10006e26:	693b      	ldr	r3, [r7, #16]
10006e28:	689b      	ldr	r3, [r3, #8]
10006e2a:	6938      	ldr	r0, [r7, #16]
10006e2c:	687a      	ldr	r2, [r7, #4]
10006e2e:	68b9      	ldr	r1, [r7, #8]
10006e30:	4798      	blx	r3
10006e32:	6178      	str	r0, [r7, #20]
	if (error)
10006e34:	697b      	ldr	r3, [r7, #20]
10006e36:	2b00      	cmp	r3, #0
10006e38:	d001      	beq.n	10006e3e <metal_device_open+0x72>
		return error;
10006e3a:	697b      	ldr	r3, [r7, #20]
10006e3c:	e000      	b.n	10006e40 <metal_device_open+0x74>

	return 0;
10006e3e:	2300      	movs	r3, #0
}
10006e40:	4618      	mov	r0, r3
10006e42:	3718      	adds	r7, #24
10006e44:	46bd      	mov	sp, r7
10006e46:	bd80      	pop	{r7, pc}

10006e48 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
10006e48:	b580      	push	{r7, lr}
10006e4a:	b082      	sub	sp, #8
10006e4c:	af00      	add	r7, sp, #0
10006e4e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
10006e50:	687b      	ldr	r3, [r7, #4]
10006e52:	681b      	ldr	r3, [r3, #0]
10006e54:	2b00      	cmp	r3, #0
10006e56:	d008      	beq.n	10006e6a <metal_register_generic_device+0x22>
10006e58:	687b      	ldr	r3, [r7, #4]
10006e5a:	681b      	ldr	r3, [r3, #0]
10006e5c:	781b      	ldrb	r3, [r3, #0]
10006e5e:	2b00      	cmp	r3, #0
10006e60:	d003      	beq.n	10006e6a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10006e62:	687b      	ldr	r3, [r7, #4]
10006e64:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
10006e66:	2b02      	cmp	r3, #2
10006e68:	d902      	bls.n	10006e70 <metal_register_generic_device+0x28>
		return -EINVAL;
10006e6a:	f06f 0315 	mvn.w	r3, #21
10006e6e:	e009      	b.n	10006e84 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
10006e70:	687b      	ldr	r3, [r7, #4]
10006e72:	4a06      	ldr	r2, [pc, #24]	@ (10006e8c <metal_register_generic_device+0x44>)
10006e74:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10006e76:	687b      	ldr	r3, [r7, #4]
10006e78:	337c      	adds	r3, #124	@ 0x7c
10006e7a:	4619      	mov	r1, r3
10006e7c:	4804      	ldr	r0, [pc, #16]	@ (10006e90 <metal_register_generic_device+0x48>)
10006e7e:	f7ff fef1 	bl	10006c64 <metal_list_add_tail>
			    &device->node);
	return 0;
10006e82:	2300      	movs	r3, #0
}
10006e84:	4618      	mov	r0, r3
10006e86:	3708      	adds	r7, #8
10006e88:	46bd      	mov	sp, r7
10006e8a:	bd80      	pop	{r7, pc}
10006e8c:	1002002c 	.word	0x1002002c
10006e90:	10020494 	.word	0x10020494

10006e94 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10006e94:	b580      	push	{r7, lr}
10006e96:	b086      	sub	sp, #24
10006e98:	af00      	add	r7, sp, #0
10006e9a:	60f8      	str	r0, [r7, #12]
10006e9c:	60b9      	str	r1, [r7, #8]
10006e9e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10006ea0:	4b12      	ldr	r3, [pc, #72]	@ (10006eec <metal_generic_dev_open+0x58>)
10006ea2:	699b      	ldr	r3, [r3, #24]
10006ea4:	617b      	str	r3, [r7, #20]
10006ea6:	e016      	b.n	10006ed6 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10006ea8:	697b      	ldr	r3, [r7, #20]
10006eaa:	3b7c      	subs	r3, #124	@ 0x7c
10006eac:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10006eae:	693b      	ldr	r3, [r7, #16]
10006eb0:	681b      	ldr	r3, [r3, #0]
10006eb2:	68b9      	ldr	r1, [r7, #8]
10006eb4:	4618      	mov	r0, r3
10006eb6:	f7f9 f8c3 	bl	10000040 <strcmp>
10006eba:	4603      	mov	r3, r0
10006ebc:	2b00      	cmp	r3, #0
10006ebe:	d107      	bne.n	10006ed0 <metal_generic_dev_open+0x3c>
			*device = dev;
10006ec0:	687b      	ldr	r3, [r7, #4]
10006ec2:	693a      	ldr	r2, [r7, #16]
10006ec4:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10006ec6:	6938      	ldr	r0, [r7, #16]
10006ec8:	f000 f890 	bl	10006fec <metal_generic_dev_sys_open>
10006ecc:	4603      	mov	r3, r0
10006ece:	e008      	b.n	10006ee2 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10006ed0:	697b      	ldr	r3, [r7, #20]
10006ed2:	681b      	ldr	r3, [r3, #0]
10006ed4:	617b      	str	r3, [r7, #20]
10006ed6:	697b      	ldr	r3, [r7, #20]
10006ed8:	4a05      	ldr	r2, [pc, #20]	@ (10006ef0 <metal_generic_dev_open+0x5c>)
10006eda:	4293      	cmp	r3, r2
10006edc:	d1e4      	bne.n	10006ea8 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10006ede:	f06f 0312 	mvn.w	r3, #18
}
10006ee2:	4618      	mov	r0, r3
10006ee4:	3718      	adds	r7, #24
10006ee6:	46bd      	mov	sp, r7
10006ee8:	bd80      	pop	{r7, pc}
10006eea:	bf00      	nop
10006eec:	1002047c 	.word	0x1002047c
10006ef0:	10020494 	.word	0x10020494

10006ef4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10006ef4:	b580      	push	{r7, lr}
10006ef6:	b086      	sub	sp, #24
10006ef8:	af00      	add	r7, sp, #0
10006efa:	60f8      	str	r0, [r7, #12]
10006efc:	60b9      	str	r1, [r7, #8]
10006efe:	607a      	str	r2, [r7, #4]
10006f00:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10006f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10006f04:	683b      	ldr	r3, [r7, #0]
10006f06:	429a      	cmp	r2, r3
10006f08:	d009      	beq.n	10006f1e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10006f0a:	6a3a      	ldr	r2, [r7, #32]
10006f0c:	4613      	mov	r3, r2
10006f0e:	005b      	lsls	r3, r3, #1
10006f10:	4413      	add	r3, r2
10006f12:	009b      	lsls	r3, r3, #2
10006f14:	461a      	mov	r2, r3
10006f16:	6839      	ldr	r1, [r7, #0]
10006f18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10006f1a:	f002 fed2 	bl	10009cc2 <memcpy>
	for (i = 0; i < nents_in; i++) {
10006f1e:	2300      	movs	r3, #0
10006f20:	617b      	str	r3, [r7, #20]
10006f22:	e02f      	b.n	10006f84 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10006f24:	687b      	ldr	r3, [r7, #4]
10006f26:	2b02      	cmp	r3, #2
10006f28:	d114      	bne.n	10006f54 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10006f2a:	697a      	ldr	r2, [r7, #20]
10006f2c:	4613      	mov	r3, r2
10006f2e:	005b      	lsls	r3, r3, #1
10006f30:	4413      	add	r3, r2
10006f32:	009b      	lsls	r3, r3, #2
10006f34:	461a      	mov	r2, r3
10006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006f38:	4413      	add	r3, r2
10006f3a:	6818      	ldr	r0, [r3, #0]
10006f3c:	697a      	ldr	r2, [r7, #20]
10006f3e:	4613      	mov	r3, r2
10006f40:	005b      	lsls	r3, r3, #1
10006f42:	4413      	add	r3, r2
10006f44:	009b      	lsls	r3, r3, #2
10006f46:	461a      	mov	r2, r3
10006f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006f4a:	4413      	add	r3, r2
10006f4c:	689b      	ldr	r3, [r3, #8]
10006f4e:	4619      	mov	r1, r3
10006f50:	f7ff feaf 	bl	10006cb2 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10006f54:	697a      	ldr	r2, [r7, #20]
10006f56:	4613      	mov	r3, r2
10006f58:	005b      	lsls	r3, r3, #1
10006f5a:	4413      	add	r3, r2
10006f5c:	009b      	lsls	r3, r3, #2
10006f5e:	461a      	mov	r2, r3
10006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006f62:	4413      	add	r3, r2
10006f64:	6818      	ldr	r0, [r3, #0]
10006f66:	697a      	ldr	r2, [r7, #20]
10006f68:	4613      	mov	r3, r2
10006f6a:	005b      	lsls	r3, r3, #1
10006f6c:	4413      	add	r3, r2
10006f6e:	009b      	lsls	r3, r3, #2
10006f70:	461a      	mov	r2, r3
10006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006f74:	4413      	add	r3, r2
10006f76:	689b      	ldr	r3, [r3, #8]
10006f78:	4619      	mov	r1, r3
10006f7a:	f7ff fea7 	bl	10006ccc <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10006f7e:	697b      	ldr	r3, [r7, #20]
10006f80:	3301      	adds	r3, #1
10006f82:	617b      	str	r3, [r7, #20]
10006f84:	697a      	ldr	r2, [r7, #20]
10006f86:	6a3b      	ldr	r3, [r7, #32]
10006f88:	429a      	cmp	r2, r3
10006f8a:	dbcb      	blt.n	10006f24 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10006f8c:	6a3b      	ldr	r3, [r7, #32]
}
10006f8e:	4618      	mov	r0, r3
10006f90:	3718      	adds	r7, #24
10006f92:	46bd      	mov	sp, r7
10006f94:	bd80      	pop	{r7, pc}

10006f96 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10006f96:	b580      	push	{r7, lr}
10006f98:	b086      	sub	sp, #24
10006f9a:	af00      	add	r7, sp, #0
10006f9c:	60f8      	str	r0, [r7, #12]
10006f9e:	60b9      	str	r1, [r7, #8]
10006fa0:	607a      	str	r2, [r7, #4]
10006fa2:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10006fa4:	2300      	movs	r3, #0
10006fa6:	617b      	str	r3, [r7, #20]
10006fa8:	e017      	b.n	10006fda <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10006faa:	697a      	ldr	r2, [r7, #20]
10006fac:	4613      	mov	r3, r2
10006fae:	005b      	lsls	r3, r3, #1
10006fb0:	4413      	add	r3, r2
10006fb2:	009b      	lsls	r3, r3, #2
10006fb4:	461a      	mov	r2, r3
10006fb6:	683b      	ldr	r3, [r7, #0]
10006fb8:	4413      	add	r3, r2
10006fba:	6818      	ldr	r0, [r3, #0]
10006fbc:	697a      	ldr	r2, [r7, #20]
10006fbe:	4613      	mov	r3, r2
10006fc0:	005b      	lsls	r3, r3, #1
10006fc2:	4413      	add	r3, r2
10006fc4:	009b      	lsls	r3, r3, #2
10006fc6:	461a      	mov	r2, r3
10006fc8:	683b      	ldr	r3, [r7, #0]
10006fca:	4413      	add	r3, r2
10006fcc:	689b      	ldr	r3, [r3, #8]
10006fce:	4619      	mov	r1, r3
10006fd0:	f7ff fe7c 	bl	10006ccc <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10006fd4:	697b      	ldr	r3, [r7, #20]
10006fd6:	3301      	adds	r3, #1
10006fd8:	617b      	str	r3, [r7, #20]
10006fda:	697a      	ldr	r2, [r7, #20]
10006fdc:	6a3b      	ldr	r3, [r7, #32]
10006fde:	429a      	cmp	r2, r3
10006fe0:	dbe3      	blt.n	10006faa <metal_generic_dev_dma_unmap+0x14>
	}
}
10006fe2:	bf00      	nop
10006fe4:	bf00      	nop
10006fe6:	3718      	adds	r7, #24
10006fe8:	46bd      	mov	sp, r7
10006fea:	bd80      	pop	{r7, pc}

10006fec <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10006fec:	b580      	push	{r7, lr}
10006fee:	b084      	sub	sp, #16
10006ff0:	af00      	add	r7, sp, #0
10006ff2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
10006ff4:	2300      	movs	r3, #0
10006ff6:	60fb      	str	r3, [r7, #12]
10006ff8:	e013      	b.n	10007022 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
10006ffa:	68fa      	ldr	r2, [r7, #12]
10006ffc:	4613      	mov	r3, r2
10006ffe:	00db      	lsls	r3, r3, #3
10007000:	1a9b      	subs	r3, r3, r2
10007002:	00db      	lsls	r3, r3, #3
10007004:	3308      	adds	r3, #8
10007006:	687a      	ldr	r2, [r7, #4]
10007008:	4413      	add	r3, r2
1000700a:	3304      	adds	r3, #4
1000700c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000700e:	68bb      	ldr	r3, [r7, #8]
10007010:	689b      	ldr	r3, [r3, #8]
10007012:	2b00      	cmp	r3, #0
10007014:	d00b      	beq.n	1000702e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
10007016:	68b8      	ldr	r0, [r7, #8]
10007018:	f000 f81e 	bl	10007058 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000701c:	68fb      	ldr	r3, [r7, #12]
1000701e:	3301      	adds	r3, #1
10007020:	60fb      	str	r3, [r7, #12]
10007022:	687b      	ldr	r3, [r7, #4]
10007024:	689b      	ldr	r3, [r3, #8]
10007026:	68fa      	ldr	r2, [r7, #12]
10007028:	429a      	cmp	r2, r3
1000702a:	d3e6      	bcc.n	10006ffa <metal_generic_dev_sys_open+0xe>
1000702c:	e000      	b.n	10007030 <metal_generic_dev_sys_open+0x44>
			break;
1000702e:	bf00      	nop
	}

	return 0;
10007030:	2300      	movs	r3, #0
}
10007032:	4618      	mov	r0, r3
10007034:	3710      	adds	r7, #16
10007036:	46bd      	mov	sp, r7
10007038:	bd80      	pop	{r7, pc}
	...

1000703c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000703c:	b580      	push	{r7, lr}
1000703e:	b082      	sub	sp, #8
10007040:	af00      	add	r7, sp, #0
10007042:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
10007044:	4803      	ldr	r0, [pc, #12]	@ (10007054 <metal_sys_init+0x18>)
10007046:	f7ff fe4f 	bl	10006ce8 <metal_bus_register>
	return 0;
1000704a:	2300      	movs	r3, #0
}
1000704c:	4618      	mov	r0, r3
1000704e:	3708      	adds	r7, #8
10007050:	46bd      	mov	sp, r7
10007052:	bd80      	pop	{r7, pc}
10007054:	1002002c 	.word	0x1002002c

10007058 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10007058:	b580      	push	{r7, lr}
1000705a:	b086      	sub	sp, #24
1000705c:	af00      	add	r7, sp, #0
1000705e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10007060:	687b      	ldr	r3, [r7, #4]
10007062:	681b      	ldr	r3, [r3, #0]
10007064:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
10007066:	687b      	ldr	r3, [r7, #4]
10007068:	689b      	ldr	r3, [r3, #8]
1000706a:	613b      	str	r3, [r7, #16]
	if (psize) {
1000706c:	693b      	ldr	r3, [r7, #16]
1000706e:	2b00      	cmp	r3, #0
10007070:	d02c      	beq.n	100070cc <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
10007072:	687b      	ldr	r3, [r7, #4]
10007074:	68db      	ldr	r3, [r3, #12]
10007076:	693a      	ldr	r2, [r7, #16]
10007078:	fa22 f303 	lsr.w	r3, r2, r3
1000707c:	2b00      	cmp	r3, #0
1000707e:	d005      	beq.n	1000708c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
10007080:	687b      	ldr	r3, [r7, #4]
10007082:	68db      	ldr	r3, [r3, #12]
10007084:	2201      	movs	r2, #1
10007086:	fa02 f303 	lsl.w	r3, r2, r3
1000708a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000708c:	2300      	movs	r3, #0
1000708e:	617b      	str	r3, [r7, #20]
10007090:	e013      	b.n	100070ba <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
10007092:	687b      	ldr	r3, [r7, #4]
10007094:	685a      	ldr	r2, [r3, #4]
10007096:	697b      	ldr	r3, [r7, #20]
10007098:	009b      	lsls	r3, r3, #2
1000709a:	4413      	add	r3, r2
1000709c:	6819      	ldr	r1, [r3, #0]
1000709e:	687b      	ldr	r3, [r7, #4]
100070a0:	695b      	ldr	r3, [r3, #20]
100070a2:	693a      	ldr	r2, [r7, #16]
100070a4:	68f8      	ldr	r0, [r7, #12]
100070a6:	f001 fd07 	bl	10008ab8 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
100070aa:	693b      	ldr	r3, [r7, #16]
100070ac:	009b      	lsls	r3, r3, #2
100070ae:	68fa      	ldr	r2, [r7, #12]
100070b0:	4413      	add	r3, r2
100070b2:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
100070b4:	697b      	ldr	r3, [r7, #20]
100070b6:	3301      	adds	r3, #1
100070b8:	617b      	str	r3, [r7, #20]
100070ba:	687b      	ldr	r3, [r7, #4]
100070bc:	689a      	ldr	r2, [r3, #8]
100070be:	687b      	ldr	r3, [r7, #4]
100070c0:	68db      	ldr	r3, [r3, #12]
100070c2:	fa22 f303 	lsr.w	r3, r2, r3
100070c6:	697a      	ldr	r2, [r7, #20]
100070c8:	429a      	cmp	r2, r3
100070ca:	d9e2      	bls.n	10007092 <metal_sys_io_mem_map+0x3a>
		}
	}
}
100070cc:	bf00      	nop
100070ce:	3718      	adds	r7, #24
100070d0:	46bd      	mov	sp, r7
100070d2:	bd80      	pop	{r7, pc}

100070d4 <metal_list_init>:
{
100070d4:	b480      	push	{r7}
100070d6:	b083      	sub	sp, #12
100070d8:	af00      	add	r7, sp, #0
100070da:	6078      	str	r0, [r7, #4]
	list->prev = list;
100070dc:	687b      	ldr	r3, [r7, #4]
100070de:	687a      	ldr	r2, [r7, #4]
100070e0:	605a      	str	r2, [r3, #4]
	list->next = list;
100070e2:	687b      	ldr	r3, [r7, #4]
100070e4:	687a      	ldr	r2, [r7, #4]
100070e6:	601a      	str	r2, [r3, #0]
}
100070e8:	bf00      	nop
100070ea:	370c      	adds	r7, #12
100070ec:	46bd      	mov	sp, r7
100070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100070f2:	4770      	bx	lr

100070f4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
100070f4:	b580      	push	{r7, lr}
100070f6:	b084      	sub	sp, #16
100070f8:	af00      	add	r7, sp, #0
100070fa:	6078      	str	r0, [r7, #4]
	int error = 0;
100070fc:	2300      	movs	r3, #0
100070fe:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10007100:	2220      	movs	r2, #32
10007102:	2100      	movs	r1, #0
10007104:	4810      	ldr	r0, [pc, #64]	@ (10007148 <metal_init+0x54>)
10007106:	f002 fd2c 	bl	10009b62 <memset>

	_metal.common.log_handler   = params->log_handler;
1000710a:	687b      	ldr	r3, [r7, #4]
1000710c:	681b      	ldr	r3, [r3, #0]
1000710e:	4a0e      	ldr	r2, [pc, #56]	@ (10007148 <metal_init+0x54>)
10007110:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
10007112:	687b      	ldr	r3, [r7, #4]
10007114:	791a      	ldrb	r2, [r3, #4]
10007116:	4b0c      	ldr	r3, [pc, #48]	@ (10007148 <metal_init+0x54>)
10007118:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000711a:	480c      	ldr	r0, [pc, #48]	@ (1000714c <metal_init+0x58>)
1000711c:	f7ff ffda 	bl	100070d4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
10007120:	480b      	ldr	r0, [pc, #44]	@ (10007150 <metal_init+0x5c>)
10007122:	f7ff ffd7 	bl	100070d4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10007126:	480b      	ldr	r0, [pc, #44]	@ (10007154 <metal_init+0x60>)
10007128:	f7ff ffd4 	bl	100070d4 <metal_list_init>

	error = metal_sys_init(params);
1000712c:	6878      	ldr	r0, [r7, #4]
1000712e:	f7ff ff85 	bl	1000703c <metal_sys_init>
10007132:	60f8      	str	r0, [r7, #12]
	if (error)
10007134:	68fb      	ldr	r3, [r7, #12]
10007136:	2b00      	cmp	r3, #0
10007138:	d001      	beq.n	1000713e <metal_init+0x4a>
		return error;
1000713a:	68fb      	ldr	r3, [r7, #12]
1000713c:	e000      	b.n	10007140 <metal_init+0x4c>

	return error;
1000713e:	68fb      	ldr	r3, [r7, #12]
}
10007140:	4618      	mov	r0, r3
10007142:	3710      	adds	r7, #16
10007144:	46bd      	mov	sp, r7
10007146:	bd80      	pop	{r7, pc}
10007148:	1002047c 	.word	0x1002047c
1000714c:	10020484 	.word	0x10020484
10007150:	1002048c 	.word	0x1002048c
10007154:	10020494 	.word	0x10020494

10007158 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
10007158:	b480      	push	{r7}
1000715a:	b083      	sub	sp, #12
1000715c:	af00      	add	r7, sp, #0
1000715e:	6078      	str	r0, [r7, #4]
10007160:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10007162:	687b      	ldr	r3, [r7, #4]
10007164:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
10007166:	f1b3 3fff 	cmp.w	r3, #4294967295
1000716a:	d00a      	beq.n	10007182 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000716c:	687b      	ldr	r3, [r7, #4]
1000716e:	689b      	ldr	r3, [r3, #8]
10007170:	683a      	ldr	r2, [r7, #0]
10007172:	429a      	cmp	r2, r3
10007174:	d205      	bcs.n	10007182 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10007176:	687b      	ldr	r3, [r7, #4]
10007178:	681b      	ldr	r3, [r3, #0]
1000717a:	461a      	mov	r2, r3
1000717c:	683b      	ldr	r3, [r7, #0]
1000717e:	4413      	add	r3, r2
		: NULL);
10007180:	e000      	b.n	10007184 <metal_io_virt+0x2c>
10007182:	2300      	movs	r3, #0
}
10007184:	4618      	mov	r0, r3
10007186:	370c      	adds	r7, #12
10007188:	46bd      	mov	sp, r7
1000718a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000718e:	4770      	bx	lr

10007190 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
10007190:	b5b0      	push	{r4, r5, r7, lr}
10007192:	b08c      	sub	sp, #48	@ 0x30
10007194:	af00      	add	r7, sp, #0
10007196:	60f8      	str	r0, [r7, #12]
10007198:	60b9      	str	r1, [r7, #8]
1000719a:	607a      	str	r2, [r7, #4]
1000719c:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000719e:	f107 0310 	add.w	r3, r7, #16
100071a2:	2220      	movs	r2, #32
100071a4:	2100      	movs	r1, #0
100071a6:	4618      	mov	r0, r3
100071a8:	f002 fcdb 	bl	10009b62 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
100071ac:	68fb      	ldr	r3, [r7, #12]
100071ae:	68ba      	ldr	r2, [r7, #8]
100071b0:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
100071b2:	68fb      	ldr	r3, [r7, #12]
100071b4:	687a      	ldr	r2, [r7, #4]
100071b6:	605a      	str	r2, [r3, #4]
	io->size = size;
100071b8:	68fb      	ldr	r3, [r7, #12]
100071ba:	683a      	ldr	r2, [r7, #0]
100071bc:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
100071be:	68fb      	ldr	r3, [r7, #12]
100071c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100071c2:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
100071c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100071c6:	2b1f      	cmp	r3, #31
100071c8:	d904      	bls.n	100071d4 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
100071ca:	68fb      	ldr	r3, [r7, #12]
100071cc:	f04f 32ff 	mov.w	r2, #4294967295
100071d0:	611a      	str	r2, [r3, #16]
100071d2:	e006      	b.n	100071e2 <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
100071d4:	2201      	movs	r2, #1
100071d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100071d8:	fa02 f303 	lsl.w	r3, r2, r3
100071dc:	1e5a      	subs	r2, r3, #1
100071de:	68fb      	ldr	r3, [r7, #12]
100071e0:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
100071e2:	68fb      	ldr	r3, [r7, #12]
100071e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
100071e6:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
100071e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100071ea:	2b00      	cmp	r3, #0
100071ec:	d00b      	beq.n	10007206 <metal_io_init+0x76>
100071ee:	68fb      	ldr	r3, [r7, #12]
100071f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
100071f2:	f103 0418 	add.w	r4, r3, #24
100071f6:	4615      	mov	r5, r2
100071f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
100071fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
100071fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10007200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10007204:	e00a      	b.n	1000721c <metal_io_init+0x8c>
10007206:	68fb      	ldr	r3, [r7, #12]
10007208:	f103 0418 	add.w	r4, r3, #24
1000720c:	f107 0510 	add.w	r5, r7, #16
10007210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10007212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10007214:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10007218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000721c:	68f8      	ldr	r0, [r7, #12]
1000721e:	f7ff ff1b 	bl	10007058 <metal_sys_io_mem_map>
}
10007222:	bf00      	nop
10007224:	3730      	adds	r7, #48	@ 0x30
10007226:	46bd      	mov	sp, r7
10007228:	bdb0      	pop	{r4, r5, r7, pc}

1000722a <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000722a:	b590      	push	{r4, r7, lr}
1000722c:	b08b      	sub	sp, #44	@ 0x2c
1000722e:	af02      	add	r7, sp, #8
10007230:	60f8      	str	r0, [r7, #12]
10007232:	60b9      	str	r1, [r7, #8]
10007234:	607a      	str	r2, [r7, #4]
10007236:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10007238:	68b9      	ldr	r1, [r7, #8]
1000723a:	68f8      	ldr	r0, [r7, #12]
1000723c:	f7ff ff8c 	bl	10007158 <metal_io_virt>
10007240:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
10007242:	687b      	ldr	r3, [r7, #4]
10007244:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10007246:	69fb      	ldr	r3, [r7, #28]
10007248:	2b00      	cmp	r3, #0
1000724a:	d102      	bne.n	10007252 <metal_io_block_read+0x28>
		return -ERANGE;
1000724c:	f06f 0321 	mvn.w	r3, #33	@ 0x21
10007250:	e05c      	b.n	1000730c <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
10007252:	683a      	ldr	r2, [r7, #0]
10007254:	68bb      	ldr	r3, [r7, #8]
10007256:	441a      	add	r2, r3
10007258:	68fb      	ldr	r3, [r7, #12]
1000725a:	689b      	ldr	r3, [r3, #8]
1000725c:	429a      	cmp	r2, r3
1000725e:	d904      	bls.n	1000726a <metal_io_block_read+0x40>
		len = io->size - offset;
10007260:	68fb      	ldr	r3, [r7, #12]
10007262:	689a      	ldr	r2, [r3, #8]
10007264:	68bb      	ldr	r3, [r7, #8]
10007266:	1ad3      	subs	r3, r2, r3
10007268:	603b      	str	r3, [r7, #0]
	retlen = len;
1000726a:	683b      	ldr	r3, [r7, #0]
1000726c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000726e:	68fb      	ldr	r3, [r7, #12]
10007270:	6a1b      	ldr	r3, [r3, #32]
10007272:	2b00      	cmp	r3, #0
10007274:	d00a      	beq.n	1000728c <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
10007276:	68fb      	ldr	r3, [r7, #12]
10007278:	6a1c      	ldr	r4, [r3, #32]
1000727a:	683b      	ldr	r3, [r7, #0]
1000727c:	9300      	str	r3, [sp, #0]
1000727e:	2305      	movs	r3, #5
10007280:	687a      	ldr	r2, [r7, #4]
10007282:	68b9      	ldr	r1, [r7, #8]
10007284:	68f8      	ldr	r0, [r7, #12]
10007286:	47a0      	blx	r4
10007288:	6178      	str	r0, [r7, #20]
1000728a:	e03e      	b.n	1000730a <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000728c:	f3bf 8f5b 	dmb	ish
		while ( len && (
10007290:	e00c      	b.n	100072ac <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10007292:	69fb      	ldr	r3, [r7, #28]
10007294:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10007296:	69bb      	ldr	r3, [r7, #24]
10007298:	701a      	strb	r2, [r3, #0]
			dest++;
1000729a:	69bb      	ldr	r3, [r7, #24]
1000729c:	3301      	adds	r3, #1
1000729e:	61bb      	str	r3, [r7, #24]
			ptr++;
100072a0:	69fb      	ldr	r3, [r7, #28]
100072a2:	3301      	adds	r3, #1
100072a4:	61fb      	str	r3, [r7, #28]
			len--;
100072a6:	683b      	ldr	r3, [r7, #0]
100072a8:	3b01      	subs	r3, #1
100072aa:	603b      	str	r3, [r7, #0]
		while ( len && (
100072ac:	683b      	ldr	r3, [r7, #0]
100072ae:	2b00      	cmp	r3, #0
100072b0:	d017      	beq.n	100072e2 <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
100072b2:	69bb      	ldr	r3, [r7, #24]
100072b4:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
100072b8:	2b00      	cmp	r3, #0
100072ba:	d1ea      	bne.n	10007292 <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
100072bc:	69fb      	ldr	r3, [r7, #28]
100072be:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
100072c2:	2b00      	cmp	r3, #0
100072c4:	d1e5      	bne.n	10007292 <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100072c6:	e00c      	b.n	100072e2 <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
100072c8:	69fb      	ldr	r3, [r7, #28]
100072ca:	681a      	ldr	r2, [r3, #0]
100072cc:	69bb      	ldr	r3, [r7, #24]
100072ce:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100072d0:	69bb      	ldr	r3, [r7, #24]
100072d2:	3304      	adds	r3, #4
100072d4:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
100072d6:	69fb      	ldr	r3, [r7, #28]
100072d8:	3304      	adds	r3, #4
100072da:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
100072dc:	683b      	ldr	r3, [r7, #0]
100072de:	3b04      	subs	r3, #4
100072e0:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100072e2:	683b      	ldr	r3, [r7, #0]
100072e4:	2b03      	cmp	r3, #3
100072e6:	dcef      	bgt.n	100072c8 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
100072e8:	e00c      	b.n	10007304 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
100072ea:	69fb      	ldr	r3, [r7, #28]
100072ec:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
100072ee:	69bb      	ldr	r3, [r7, #24]
100072f0:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
100072f2:	69bb      	ldr	r3, [r7, #24]
100072f4:	3301      	adds	r3, #1
100072f6:	61bb      	str	r3, [r7, #24]
100072f8:	69fb      	ldr	r3, [r7, #28]
100072fa:	3301      	adds	r3, #1
100072fc:	61fb      	str	r3, [r7, #28]
100072fe:	683b      	ldr	r3, [r7, #0]
10007300:	3b01      	subs	r3, #1
10007302:	603b      	str	r3, [r7, #0]
10007304:	683b      	ldr	r3, [r7, #0]
10007306:	2b00      	cmp	r3, #0
10007308:	d1ef      	bne.n	100072ea <metal_io_block_read+0xc0>
	}
	return retlen;
1000730a:	697b      	ldr	r3, [r7, #20]
}
1000730c:	4618      	mov	r0, r3
1000730e:	3724      	adds	r7, #36	@ 0x24
10007310:	46bd      	mov	sp, r7
10007312:	bd90      	pop	{r4, r7, pc}

10007314 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
10007314:	b590      	push	{r4, r7, lr}
10007316:	b08b      	sub	sp, #44	@ 0x2c
10007318:	af02      	add	r7, sp, #8
1000731a:	60f8      	str	r0, [r7, #12]
1000731c:	60b9      	str	r1, [r7, #8]
1000731e:	607a      	str	r2, [r7, #4]
10007320:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10007322:	68b9      	ldr	r1, [r7, #8]
10007324:	68f8      	ldr	r0, [r7, #12]
10007326:	f7ff ff17 	bl	10007158 <metal_io_virt>
1000732a:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000732c:	687b      	ldr	r3, [r7, #4]
1000732e:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10007330:	69fb      	ldr	r3, [r7, #28]
10007332:	2b00      	cmp	r3, #0
10007334:	d102      	bne.n	1000733c <metal_io_block_write+0x28>
		return -ERANGE;
10007336:	f06f 0321 	mvn.w	r3, #33	@ 0x21
1000733a:	e05b      	b.n	100073f4 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000733c:	683a      	ldr	r2, [r7, #0]
1000733e:	68bb      	ldr	r3, [r7, #8]
10007340:	441a      	add	r2, r3
10007342:	68fb      	ldr	r3, [r7, #12]
10007344:	689b      	ldr	r3, [r3, #8]
10007346:	429a      	cmp	r2, r3
10007348:	d904      	bls.n	10007354 <metal_io_block_write+0x40>
		len = io->size - offset;
1000734a:	68fb      	ldr	r3, [r7, #12]
1000734c:	689a      	ldr	r2, [r3, #8]
1000734e:	68bb      	ldr	r3, [r7, #8]
10007350:	1ad3      	subs	r3, r2, r3
10007352:	603b      	str	r3, [r7, #0]
	retlen = len;
10007354:	683b      	ldr	r3, [r7, #0]
10007356:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
10007358:	68fb      	ldr	r3, [r7, #12]
1000735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000735c:	2b00      	cmp	r3, #0
1000735e:	d017      	beq.n	10007390 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
10007360:	68fb      	ldr	r3, [r7, #12]
10007362:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
10007364:	683b      	ldr	r3, [r7, #0]
10007366:	9300      	str	r3, [sp, #0]
10007368:	2305      	movs	r3, #5
1000736a:	687a      	ldr	r2, [r7, #4]
1000736c:	68b9      	ldr	r1, [r7, #8]
1000736e:	68f8      	ldr	r0, [r7, #12]
10007370:	47a0      	blx	r4
10007372:	6178      	str	r0, [r7, #20]
10007374:	e03d      	b.n	100073f2 <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
10007376:	69bb      	ldr	r3, [r7, #24]
10007378:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000737a:	69fb      	ldr	r3, [r7, #28]
1000737c:	701a      	strb	r2, [r3, #0]
			ptr++;
1000737e:	69fb      	ldr	r3, [r7, #28]
10007380:	3301      	adds	r3, #1
10007382:	61fb      	str	r3, [r7, #28]
			source++;
10007384:	69bb      	ldr	r3, [r7, #24]
10007386:	3301      	adds	r3, #1
10007388:	61bb      	str	r3, [r7, #24]
			len--;
1000738a:	683b      	ldr	r3, [r7, #0]
1000738c:	3b01      	subs	r3, #1
1000738e:	603b      	str	r3, [r7, #0]
		while ( len && (
10007390:	683b      	ldr	r3, [r7, #0]
10007392:	2b00      	cmp	r3, #0
10007394:	d017      	beq.n	100073c6 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
10007396:	69fb      	ldr	r3, [r7, #28]
10007398:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000739c:	2b00      	cmp	r3, #0
1000739e:	d1ea      	bne.n	10007376 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
100073a0:	69bb      	ldr	r3, [r7, #24]
100073a2:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
100073a6:	2b00      	cmp	r3, #0
100073a8:	d1e5      	bne.n	10007376 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
100073aa:	e00c      	b.n	100073c6 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
100073ac:	69bb      	ldr	r3, [r7, #24]
100073ae:	681a      	ldr	r2, [r3, #0]
100073b0:	69fb      	ldr	r3, [r7, #28]
100073b2:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
100073b4:	69fb      	ldr	r3, [r7, #28]
100073b6:	3304      	adds	r3, #4
100073b8:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
100073ba:	69bb      	ldr	r3, [r7, #24]
100073bc:	3304      	adds	r3, #4
100073be:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
100073c0:	683b      	ldr	r3, [r7, #0]
100073c2:	3b04      	subs	r3, #4
100073c4:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
100073c6:	683b      	ldr	r3, [r7, #0]
100073c8:	2b03      	cmp	r3, #3
100073ca:	dcef      	bgt.n	100073ac <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
100073cc:	e00c      	b.n	100073e8 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
100073ce:	69bb      	ldr	r3, [r7, #24]
100073d0:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
100073d2:	69fb      	ldr	r3, [r7, #28]
100073d4:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
100073d6:	69fb      	ldr	r3, [r7, #28]
100073d8:	3301      	adds	r3, #1
100073da:	61fb      	str	r3, [r7, #28]
100073dc:	69bb      	ldr	r3, [r7, #24]
100073de:	3301      	adds	r3, #1
100073e0:	61bb      	str	r3, [r7, #24]
100073e2:	683b      	ldr	r3, [r7, #0]
100073e4:	3b01      	subs	r3, #1
100073e6:	603b      	str	r3, [r7, #0]
100073e8:	683b      	ldr	r3, [r7, #0]
100073ea:	2b00      	cmp	r3, #0
100073ec:	d1ef      	bne.n	100073ce <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
100073ee:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
100073f2:	697b      	ldr	r3, [r7, #20]
}
100073f4:	4618      	mov	r0, r3
100073f6:	3724      	adds	r7, #36	@ 0x24
100073f8:	46bd      	mov	sp, r7
100073fa:	bd90      	pop	{r4, r7, pc}

100073fc <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
100073fc:	b40e      	push	{r1, r2, r3}
100073fe:	b480      	push	{r7}
10007400:	b082      	sub	sp, #8
10007402:	af00      	add	r7, sp, #0
10007404:	4603      	mov	r3, r0
10007406:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
10007408:	bf00      	nop
1000740a:	3708      	adds	r7, #8
1000740c:	46bd      	mov	sp, r7
1000740e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007412:	b003      	add	sp, #12
10007414:	4770      	bx	lr

10007416 <metal_io_virt>:
{
10007416:	b480      	push	{r7}
10007418:	b083      	sub	sp, #12
1000741a:	af00      	add	r7, sp, #0
1000741c:	6078      	str	r0, [r7, #4]
1000741e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10007420:	687b      	ldr	r3, [r7, #4]
10007422:	681b      	ldr	r3, [r3, #0]
		: NULL);
10007424:	f1b3 3fff 	cmp.w	r3, #4294967295
10007428:	d00a      	beq.n	10007440 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000742a:	687b      	ldr	r3, [r7, #4]
1000742c:	689b      	ldr	r3, [r3, #8]
1000742e:	683a      	ldr	r2, [r7, #0]
10007430:	429a      	cmp	r2, r3
10007432:	d205      	bcs.n	10007440 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10007434:	687b      	ldr	r3, [r7, #4]
10007436:	681b      	ldr	r3, [r3, #0]
10007438:	461a      	mov	r2, r3
1000743a:	683b      	ldr	r3, [r7, #0]
1000743c:	4413      	add	r3, r2
		: NULL);
1000743e:	e000      	b.n	10007442 <metal_io_virt+0x2c>
10007440:	2300      	movs	r3, #0
}
10007442:	4618      	mov	r0, r3
10007444:	370c      	adds	r7, #12
10007446:	46bd      	mov	sp, r7
10007448:	f85d 7b04 	ldr.w	r7, [sp], #4
1000744c:	4770      	bx	lr

1000744e <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000744e:	b480      	push	{r7}
10007450:	b085      	sub	sp, #20
10007452:	af00      	add	r7, sp, #0
10007454:	6078      	str	r0, [r7, #4]
10007456:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10007458:	683b      	ldr	r3, [r7, #0]
1000745a:	687a      	ldr	r2, [r7, #4]
1000745c:	6812      	ldr	r2, [r2, #0]
1000745e:	1a9b      	subs	r3, r3, r2
10007460:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007462:	687b      	ldr	r3, [r7, #4]
10007464:	689b      	ldr	r3, [r3, #8]
10007466:	68fa      	ldr	r2, [r7, #12]
10007468:	429a      	cmp	r2, r3
1000746a:	d201      	bcs.n	10007470 <metal_io_virt_to_offset+0x22>
1000746c:	68fb      	ldr	r3, [r7, #12]
1000746e:	e001      	b.n	10007474 <metal_io_virt_to_offset+0x26>
10007470:	f04f 33ff 	mov.w	r3, #4294967295
}
10007474:	4618      	mov	r0, r3
10007476:	3714      	adds	r7, #20
10007478:	46bd      	mov	sp, r7
1000747a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000747e:	4770      	bx	lr

10007480 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
10007480:	b5b0      	push	{r4, r5, r7, lr}
10007482:	b08c      	sub	sp, #48	@ 0x30
10007484:	af00      	add	r7, sp, #0
10007486:	60f8      	str	r0, [r7, #12]
10007488:	60b9      	str	r1, [r7, #8]
1000748a:	603b      	str	r3, [r7, #0]
1000748c:	4613      	mov	r3, r2
1000748e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
10007490:	68b9      	ldr	r1, [r7, #8]
10007492:	68f8      	ldr	r0, [r7, #12]
10007494:	f7ff ffbf 	bl	10007416 <metal_io_virt>
10007498:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
1000749a:	68fb      	ldr	r3, [r7, #12]
1000749c:	699b      	ldr	r3, [r3, #24]
1000749e:	2b00      	cmp	r3, #0
100074a0:	d009      	beq.n	100074b6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
100074a2:	68fb      	ldr	r3, [r7, #12]
100074a4:	699c      	ldr	r4, [r3, #24]
100074a6:	79fa      	ldrb	r2, [r7, #7]
100074a8:	683b      	ldr	r3, [r7, #0]
100074aa:	68b9      	ldr	r1, [r7, #8]
100074ac:	68f8      	ldr	r0, [r7, #12]
100074ae:	47a0      	blx	r4
100074b0:	4604      	mov	r4, r0
100074b2:	460d      	mov	r5, r1
100074b4:	e059      	b.n	1000756a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
100074b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100074b8:	2b00      	cmp	r3, #0
100074ba:	d012      	beq.n	100074e2 <metal_io_read+0x62>
100074bc:	683b      	ldr	r3, [r7, #0]
100074be:	2b01      	cmp	r3, #1
100074c0:	d10f      	bne.n	100074e2 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
100074c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100074c4:	62bb      	str	r3, [r7, #40]	@ 0x28
100074c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100074c8:	f3bf 8f5b 	dmb	ish
100074cc:	781b      	ldrb	r3, [r3, #0]
100074ce:	f3bf 8f5b 	dmb	ish
100074d2:	b2db      	uxtb	r3, r3
100074d4:	76fb      	strb	r3, [r7, #27]
100074d6:	7efb      	ldrb	r3, [r7, #27]
100074d8:	b2db      	uxtb	r3, r3
100074da:	2200      	movs	r2, #0
100074dc:	461c      	mov	r4, r3
100074de:	4615      	mov	r5, r2
100074e0:	e043      	b.n	1000756a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
100074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100074e4:	2b00      	cmp	r3, #0
100074e6:	d012      	beq.n	1000750e <metal_io_read+0x8e>
100074e8:	683b      	ldr	r3, [r7, #0]
100074ea:	2b02      	cmp	r3, #2
100074ec:	d10f      	bne.n	1000750e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
100074ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100074f0:	627b      	str	r3, [r7, #36]	@ 0x24
100074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100074f4:	f3bf 8f5b 	dmb	ish
100074f8:	881b      	ldrh	r3, [r3, #0]
100074fa:	f3bf 8f5b 	dmb	ish
100074fe:	b29b      	uxth	r3, r3
10007500:	833b      	strh	r3, [r7, #24]
10007502:	8b3b      	ldrh	r3, [r7, #24]
10007504:	b29b      	uxth	r3, r3
10007506:	2200      	movs	r2, #0
10007508:	461c      	mov	r4, r3
1000750a:	4615      	mov	r5, r2
1000750c:	e02d      	b.n	1000756a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000750e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007510:	2b00      	cmp	r3, #0
10007512:	d010      	beq.n	10007536 <metal_io_read+0xb6>
10007514:	683b      	ldr	r3, [r7, #0]
10007516:	2b04      	cmp	r3, #4
10007518:	d10d      	bne.n	10007536 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000751a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000751c:	623b      	str	r3, [r7, #32]
1000751e:	6a3b      	ldr	r3, [r7, #32]
10007520:	f3bf 8f5b 	dmb	ish
10007524:	681b      	ldr	r3, [r3, #0]
10007526:	f3bf 8f5b 	dmb	ish
1000752a:	617b      	str	r3, [r7, #20]
1000752c:	697b      	ldr	r3, [r7, #20]
1000752e:	2200      	movs	r2, #0
10007530:	461c      	mov	r4, r3
10007532:	4615      	mov	r5, r2
10007534:	e019      	b.n	1000756a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
10007536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007538:	2b00      	cmp	r3, #0
1000753a:	d010      	beq.n	1000755e <metal_io_read+0xde>
1000753c:	683b      	ldr	r3, [r7, #0]
1000753e:	2b04      	cmp	r3, #4
10007540:	d10d      	bne.n	1000755e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
10007542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007544:	61fb      	str	r3, [r7, #28]
10007546:	69fb      	ldr	r3, [r7, #28]
10007548:	f3bf 8f5b 	dmb	ish
1000754c:	681b      	ldr	r3, [r3, #0]
1000754e:	f3bf 8f5b 	dmb	ish
10007552:	613b      	str	r3, [r7, #16]
10007554:	693b      	ldr	r3, [r7, #16]
10007556:	2200      	movs	r2, #0
10007558:	461c      	mov	r4, r3
1000755a:	4615      	mov	r5, r2
1000755c:	e005      	b.n	1000756a <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000755e:	4b06      	ldr	r3, [pc, #24]	@ (10007578 <metal_io_read+0xf8>)
10007560:	4a06      	ldr	r2, [pc, #24]	@ (1000757c <metal_io_read+0xfc>)
10007562:	21fe      	movs	r1, #254	@ 0xfe
10007564:	4806      	ldr	r0, [pc, #24]	@ (10007580 <metal_io_read+0x100>)
10007566:	f002 f861 	bl	1000962c <__assert_func>
	return 0; /* quiet compiler */
}
1000756a:	4622      	mov	r2, r4
1000756c:	462b      	mov	r3, r5
1000756e:	4610      	mov	r0, r2
10007570:	4619      	mov	r1, r3
10007572:	3730      	adds	r7, #48	@ 0x30
10007574:	46bd      	mov	sp, r7
10007576:	bdb0      	pop	{r4, r5, r7, pc}
10007578:	1000ac1c 	.word	0x1000ac1c
1000757c:	1000ae54 	.word	0x1000ae54
10007580:	1000ac20 	.word	0x1000ac20

10007584 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
10007584:	b580      	push	{r7, lr}
10007586:	b082      	sub	sp, #8
10007588:	af00      	add	r7, sp, #0
1000758a:	6078      	str	r0, [r7, #4]
	return malloc(size);
1000758c:	6878      	ldr	r0, [r7, #4]
1000758e:	f002 f86f 	bl	10009670 <malloc>
10007592:	4603      	mov	r3, r0
}
10007594:	4618      	mov	r0, r3
10007596:	3708      	adds	r7, #8
10007598:	46bd      	mov	sp, r7
1000759a:	bd80      	pop	{r7, pc}

1000759c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000759c:	b580      	push	{r7, lr}
1000759e:	b082      	sub	sp, #8
100075a0:	af00      	add	r7, sp, #0
100075a2:	6078      	str	r0, [r7, #4]
	free(ptr);
100075a4:	6878      	ldr	r0, [r7, #4]
100075a6:	f002 f86b 	bl	10009680 <free>
}
100075aa:	bf00      	nop
100075ac:	3708      	adds	r7, #8
100075ae:	46bd      	mov	sp, r7
100075b0:	bd80      	pop	{r7, pc}

100075b2 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
100075b2:	b580      	push	{r7, lr}
100075b4:	b084      	sub	sp, #16
100075b6:	af00      	add	r7, sp, #0
100075b8:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
100075ba:	687b      	ldr	r3, [r7, #4]
100075bc:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
100075be:	3334      	adds	r3, #52	@ 0x34
100075c0:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
100075c2:	68f8      	ldr	r0, [r7, #12]
100075c4:	f7ff ffde 	bl	10007584 <metal_allocate_memory>
100075c8:	60b8      	str	r0, [r7, #8]
	if (vqs) {
100075ca:	68bb      	ldr	r3, [r7, #8]
100075cc:	2b00      	cmp	r3, #0
100075ce:	d004      	beq.n	100075da <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
100075d0:	68fa      	ldr	r2, [r7, #12]
100075d2:	2100      	movs	r1, #0
100075d4:	68b8      	ldr	r0, [r7, #8]
100075d6:	f002 fac4 	bl	10009b62 <memset>
	}

	return vqs;
100075da:	68bb      	ldr	r3, [r7, #8]
}
100075dc:	4618      	mov	r0, r3
100075de:	3710      	adds	r7, #16
100075e0:	46bd      	mov	sp, r7
100075e2:	bd80      	pop	{r7, pc}

100075e4 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
100075e4:	b580      	push	{r7, lr}
100075e6:	b086      	sub	sp, #24
100075e8:	af00      	add	r7, sp, #0
100075ea:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
100075ec:	687b      	ldr	r3, [r7, #4]
100075ee:	891b      	ldrh	r3, [r3, #8]
100075f0:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
100075f2:	687b      	ldr	r3, [r7, #4]
100075f4:	681b      	ldr	r3, [r3, #0]
100075f6:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100075f8:	693b      	ldr	r3, [r7, #16]
100075fa:	3b10      	subs	r3, #16
100075fc:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
100075fe:	693b      	ldr	r3, [r7, #16]
10007600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007602:	697a      	ldr	r2, [r7, #20]
10007604:	429a      	cmp	r2, r3
10007606:	d305      	bcc.n	10007614 <rproc_virtio_virtqueue_notify+0x30>
10007608:	4b0d      	ldr	r3, [pc, #52]	@ (10007640 <rproc_virtio_virtqueue_notify+0x5c>)
1000760a:	4a0e      	ldr	r2, [pc, #56]	@ (10007644 <rproc_virtio_virtqueue_notify+0x60>)
1000760c:	211c      	movs	r1, #28
1000760e:	480e      	ldr	r0, [pc, #56]	@ (10007648 <rproc_virtio_virtqueue_notify+0x64>)
10007610:	f002 f80c 	bl	1000962c <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
10007614:	693b      	ldr	r3, [r7, #16]
10007616:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10007618:	697a      	ldr	r2, [r7, #20]
1000761a:	4613      	mov	r3, r2
1000761c:	005b      	lsls	r3, r3, #1
1000761e:	4413      	add	r3, r2
10007620:	00db      	lsls	r3, r3, #3
10007622:	440b      	add	r3, r1
10007624:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
10007626:	68fb      	ldr	r3, [r7, #12]
10007628:	68db      	ldr	r3, [r3, #12]
1000762a:	68fa      	ldr	r2, [r7, #12]
1000762c:	6810      	ldr	r0, [r2, #0]
1000762e:	68ba      	ldr	r2, [r7, #8]
10007630:	6912      	ldr	r2, [r2, #16]
10007632:	4611      	mov	r1, r2
10007634:	4798      	blx	r3
}
10007636:	bf00      	nop
10007638:	3718      	adds	r7, #24
1000763a:	46bd      	mov	sp, r7
1000763c:	bd80      	pop	{r7, pc}
1000763e:	bf00      	nop
10007640:	1000ac68 	.word	0x1000ac68
10007644:	1000ae34 	.word	0x1000ae34
10007648:	1000ac84 	.word	0x1000ac84

1000764c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000764c:	b580      	push	{r7, lr}
1000764e:	b086      	sub	sp, #24
10007650:	af00      	add	r7, sp, #0
10007652:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007654:	687b      	ldr	r3, [r7, #4]
10007656:	3b10      	subs	r3, #16
10007658:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000765a:	697b      	ldr	r3, [r7, #20]
1000765c:	685b      	ldr	r3, [r3, #4]
1000765e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10007660:	697b      	ldr	r3, [r7, #20]
10007662:	689b      	ldr	r3, [r3, #8]
10007664:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
10007666:	693b      	ldr	r3, [r7, #16]
10007668:	3318      	adds	r3, #24
1000766a:	4619      	mov	r1, r3
1000766c:	68f8      	ldr	r0, [r7, #12]
1000766e:	f7ff feee 	bl	1000744e <metal_io_virt_to_offset>
10007672:	4601      	mov	r1, r0
10007674:	2301      	movs	r3, #1
10007676:	2205      	movs	r2, #5
10007678:	68f8      	ldr	r0, [r7, #12]
1000767a:	f7ff ff01 	bl	10007480 <metal_io_read>
1000767e:	4602      	mov	r2, r0
10007680:	460b      	mov	r3, r1
10007682:	4613      	mov	r3, r2
10007684:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
10007686:	7afb      	ldrb	r3, [r7, #11]
}
10007688:	4618      	mov	r0, r3
1000768a:	3718      	adds	r7, #24
1000768c:	46bd      	mov	sp, r7
1000768e:	bd80      	pop	{r7, pc}

10007690 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
10007690:	b580      	push	{r7, lr}
10007692:	b086      	sub	sp, #24
10007694:	af00      	add	r7, sp, #0
10007696:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007698:	687b      	ldr	r3, [r7, #4]
1000769a:	3b10      	subs	r3, #16
1000769c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000769e:	697b      	ldr	r3, [r7, #20]
100076a0:	685b      	ldr	r3, [r3, #4]
100076a2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
100076a4:	697b      	ldr	r3, [r7, #20]
100076a6:	689b      	ldr	r3, [r3, #8]
100076a8:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
100076aa:	693b      	ldr	r3, [r7, #16]
100076ac:	330c      	adds	r3, #12
100076ae:	4619      	mov	r1, r3
100076b0:	68f8      	ldr	r0, [r7, #12]
100076b2:	f7ff fecc 	bl	1000744e <metal_io_virt_to_offset>
100076b6:	4601      	mov	r1, r0
100076b8:	2304      	movs	r3, #4
100076ba:	2205      	movs	r2, #5
100076bc:	68f8      	ldr	r0, [r7, #12]
100076be:	f7ff fedf 	bl	10007480 <metal_io_read>
100076c2:	4602      	mov	r2, r0
100076c4:	460b      	mov	r3, r1
100076c6:	4613      	mov	r3, r2
100076c8:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
100076ca:	68bb      	ldr	r3, [r7, #8]
}
100076cc:	4618      	mov	r0, r3
100076ce:	3718      	adds	r7, #24
100076d0:	46bd      	mov	sp, r7
100076d2:	bd80      	pop	{r7, pc}

100076d4 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
100076d4:	b580      	push	{r7, lr}
100076d6:	b088      	sub	sp, #32
100076d8:	af00      	add	r7, sp, #0
100076da:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100076dc:	687b      	ldr	r3, [r7, #4]
100076de:	3b10      	subs	r3, #16
100076e0:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
100076e2:	69fb      	ldr	r3, [r7, #28]
100076e4:	685b      	ldr	r3, [r3, #4]
100076e6:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
100076e8:	69fb      	ldr	r3, [r7, #28]
100076ea:	689b      	ldr	r3, [r3, #8]
100076ec:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
100076ee:	69bb      	ldr	r3, [r7, #24]
100076f0:	3310      	adds	r3, #16
100076f2:	4619      	mov	r1, r3
100076f4:	6978      	ldr	r0, [r7, #20]
100076f6:	f7ff feaa 	bl	1000744e <metal_io_virt_to_offset>
100076fa:	4601      	mov	r1, r0
100076fc:	2304      	movs	r3, #4
100076fe:	2205      	movs	r2, #5
10007700:	6978      	ldr	r0, [r7, #20]
10007702:	f7ff febd 	bl	10007480 <metal_io_read>
10007706:	4602      	mov	r2, r0
10007708:	460b      	mov	r3, r1
1000770a:	4613      	mov	r3, r2
1000770c:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000770e:	6878      	ldr	r0, [r7, #4]
10007710:	f7ff ffbe 	bl	10007690 <rproc_virtio_get_dfeatures>
10007714:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
10007716:	68fa      	ldr	r2, [r7, #12]
10007718:	693b      	ldr	r3, [r7, #16]
1000771a:	4013      	ands	r3, r2
}
1000771c:	4618      	mov	r0, r3
1000771e:	3720      	adds	r7, #32
10007720:	46bd      	mov	sp, r7
10007722:	bd80      	pop	{r7, pc}

10007724 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
10007724:	b580      	push	{r7, lr}
10007726:	b088      	sub	sp, #32
10007728:	af00      	add	r7, sp, #0
1000772a:	60f8      	str	r0, [r7, #12]
1000772c:	60b9      	str	r1, [r7, #8]
1000772e:	607a      	str	r2, [r7, #4]
10007730:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007732:	68fb      	ldr	r3, [r7, #12]
10007734:	3b10      	subs	r3, #16
10007736:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10007738:	69fb      	ldr	r3, [r7, #28]
1000773a:	685b      	ldr	r3, [r3, #4]
1000773c:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000773e:	68fb      	ldr	r3, [r7, #12]
10007740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10007742:	4613      	mov	r3, r2
10007744:	009b      	lsls	r3, r3, #2
10007746:	4413      	add	r3, r2
10007748:	009b      	lsls	r3, r3, #2
1000774a:	3318      	adds	r3, #24
1000774c:	69ba      	ldr	r2, [r7, #24]
1000774e:	4413      	add	r3, r2
10007750:	3304      	adds	r3, #4
10007752:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
10007754:	69fb      	ldr	r3, [r7, #28]
10007756:	689b      	ldr	r3, [r3, #8]
10007758:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000775a:	683a      	ldr	r2, [r7, #0]
1000775c:	68bb      	ldr	r3, [r7, #8]
1000775e:	441a      	add	r2, r3
10007760:	69bb      	ldr	r3, [r7, #24]
10007762:	695b      	ldr	r3, [r3, #20]
10007764:	429a      	cmp	r2, r3
10007766:	d80c      	bhi.n	10007782 <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10007768:	697a      	ldr	r2, [r7, #20]
1000776a:	68bb      	ldr	r3, [r7, #8]
1000776c:	4413      	add	r3, r2
		metal_io_block_read(io,
1000776e:	4619      	mov	r1, r3
10007770:	6938      	ldr	r0, [r7, #16]
10007772:	f7ff fe6c 	bl	1000744e <metal_io_virt_to_offset>
10007776:	4601      	mov	r1, r0
10007778:	683b      	ldr	r3, [r7, #0]
1000777a:	687a      	ldr	r2, [r7, #4]
1000777c:	6938      	ldr	r0, [r7, #16]
1000777e:	f7ff fd54 	bl	1000722a <metal_io_block_read>
				dst, length);
}
10007782:	bf00      	nop
10007784:	3720      	adds	r7, #32
10007786:	46bd      	mov	sp, r7
10007788:	bd80      	pop	{r7, pc}
	...

1000778c <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000778c:	b580      	push	{r7, lr}
1000778e:	b08e      	sub	sp, #56	@ 0x38
10007790:	af00      	add	r7, sp, #0
10007792:	60f8      	str	r0, [r7, #12]
10007794:	60b9      	str	r1, [r7, #8]
10007796:	607a      	str	r2, [r7, #4]
10007798:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000779a:	687b      	ldr	r3, [r7, #4]
1000779c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000779e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100077a0:	7e5b      	ldrb	r3, [r3, #25]
100077a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
100077a4:	2048      	movs	r0, #72	@ 0x48
100077a6:	f7ff feed 	bl	10007584 <metal_allocate_memory>
100077aa:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
100077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100077ae:	2b00      	cmp	r3, #0
100077b0:	d101      	bne.n	100077b6 <rproc_virtio_create_vdev+0x2a>
		return NULL;
100077b2:	2300      	movs	r3, #0
100077b4:	e092      	b.n	100078dc <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
100077b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100077b8:	4613      	mov	r3, r2
100077ba:	005b      	lsls	r3, r3, #1
100077bc:	4413      	add	r3, r2
100077be:	00db      	lsls	r3, r3, #3
100077c0:	4618      	mov	r0, r3
100077c2:	f7ff fedf 	bl	10007584 <metal_allocate_memory>
100077c6:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
100077c8:	6a3b      	ldr	r3, [r7, #32]
100077ca:	2b00      	cmp	r3, #0
100077cc:	f000 8081 	beq.w	100078d2 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
100077d0:	2248      	movs	r2, #72	@ 0x48
100077d2:	2100      	movs	r1, #0
100077d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100077d6:	f002 f9c4 	bl	10009b62 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
100077da:	2218      	movs	r2, #24
100077dc:	2100      	movs	r1, #0
100077de:	6a38      	ldr	r0, [r7, #32]
100077e0:	f002 f9bf 	bl	10009b62 <memset>
	vdev = &rpvdev->vdev;
100077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100077e6:	3310      	adds	r3, #16
100077e8:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
100077ea:	2300      	movs	r3, #0
100077ec:	637b      	str	r3, [r7, #52]	@ 0x34
100077ee:	e025      	b.n	1000783c <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
100077f0:	2300      	movs	r3, #0
100077f2:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
100077f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100077f6:	4613      	mov	r3, r2
100077f8:	009b      	lsls	r3, r3, #2
100077fa:	4413      	add	r3, r2
100077fc:	009b      	lsls	r3, r3, #2
100077fe:	3318      	adds	r3, #24
10007800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10007802:	4413      	add	r3, r2
10007804:	3304      	adds	r3, #4
10007806:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
10007808:	68fb      	ldr	r3, [r7, #12]
1000780a:	2b00      	cmp	r3, #0
1000780c:	d102      	bne.n	10007814 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000780e:	69bb      	ldr	r3, [r7, #24]
10007810:	689b      	ldr	r3, [r3, #8]
10007812:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
10007814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10007816:	f7ff fecc 	bl	100075b2 <virtqueue_allocate>
1000781a:	6178      	str	r0, [r7, #20]
		if (!vq)
1000781c:	697b      	ldr	r3, [r7, #20]
1000781e:	2b00      	cmp	r3, #0
10007820:	d031      	beq.n	10007886 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
10007822:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007824:	4613      	mov	r3, r2
10007826:	005b      	lsls	r3, r3, #1
10007828:	4413      	add	r3, r2
1000782a:	00db      	lsls	r3, r3, #3
1000782c:	461a      	mov	r2, r3
1000782e:	6a3b      	ldr	r3, [r7, #32]
10007830:	4413      	add	r3, r2
10007832:	697a      	ldr	r2, [r7, #20]
10007834:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
10007836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007838:	3301      	adds	r3, #1
1000783a:	637b      	str	r3, [r7, #52]	@ 0x34
1000783c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000783e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007840:	429a      	cmp	r2, r3
10007842:	d3d5      	bcc.n	100077f0 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
10007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10007848:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000784c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000784e:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
10007850:	69fb      	ldr	r3, [r7, #28]
10007852:	6a3a      	ldr	r2, [r7, #32]
10007854:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
10007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000785a:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000785e:	683a      	ldr	r2, [r7, #0]
10007860:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
10007862:	69fb      	ldr	r3, [r7, #28]
10007864:	68ba      	ldr	r2, [r7, #8]
10007866:	601a      	str	r2, [r3, #0]
	vdev->role = role;
10007868:	69fb      	ldr	r3, [r7, #28]
1000786a:	68fa      	ldr	r2, [r7, #12]
1000786c:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000786e:	69fb      	ldr	r3, [r7, #28]
10007870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10007872:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
10007874:	69fb      	ldr	r3, [r7, #28]
10007876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10007878:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000787a:	69fb      	ldr	r3, [r7, #28]
1000787c:	4a19      	ldr	r2, [pc, #100]	@ (100078e4 <rproc_virtio_create_vdev+0x158>)
1000787e:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
10007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007882:	3310      	adds	r3, #16
10007884:	e02a      	b.n	100078dc <rproc_virtio_create_vdev+0x150>
			goto err1;
10007886:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
10007888:	2300      	movs	r3, #0
1000788a:	637b      	str	r3, [r7, #52]	@ 0x34
1000788c:	e019      	b.n	100078c2 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000788e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007890:	4613      	mov	r3, r2
10007892:	005b      	lsls	r3, r3, #1
10007894:	4413      	add	r3, r2
10007896:	00db      	lsls	r3, r3, #3
10007898:	461a      	mov	r2, r3
1000789a:	6a3b      	ldr	r3, [r7, #32]
1000789c:	4413      	add	r3, r2
1000789e:	681b      	ldr	r3, [r3, #0]
100078a0:	2b00      	cmp	r3, #0
100078a2:	d00b      	beq.n	100078bc <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
100078a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100078a6:	4613      	mov	r3, r2
100078a8:	005b      	lsls	r3, r3, #1
100078aa:	4413      	add	r3, r2
100078ac:	00db      	lsls	r3, r3, #3
100078ae:	461a      	mov	r2, r3
100078b0:	6a3b      	ldr	r3, [r7, #32]
100078b2:	4413      	add	r3, r2
100078b4:	681b      	ldr	r3, [r3, #0]
100078b6:	4618      	mov	r0, r3
100078b8:	f7ff fe70 	bl	1000759c <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
100078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100078be:	3301      	adds	r3, #1
100078c0:	637b      	str	r3, [r7, #52]	@ 0x34
100078c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100078c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100078c6:	429a      	cmp	r2, r3
100078c8:	d3e1      	bcc.n	1000788e <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
100078ca:	6a38      	ldr	r0, [r7, #32]
100078cc:	f7ff fe66 	bl	1000759c <metal_free_memory>
100078d0:	e000      	b.n	100078d4 <rproc_virtio_create_vdev+0x148>
		goto err0;
100078d2:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
100078d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100078d6:	f7ff fe61 	bl	1000759c <metal_free_memory>
	return NULL;
100078da:	2300      	movs	r3, #0
}
100078dc:	4618      	mov	r0, r3
100078de:	3738      	adds	r7, #56	@ 0x38
100078e0:	46bd      	mov	sp, r7
100078e2:	bd80      	pop	{r7, pc}
100078e4:	1000ae10 	.word	0x1000ae10

100078e8 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
100078e8:	b480      	push	{r7}
100078ea:	b087      	sub	sp, #28
100078ec:	af00      	add	r7, sp, #0
100078ee:	60f8      	str	r0, [r7, #12]
100078f0:	60b9      	str	r1, [r7, #8]
100078f2:	607a      	str	r2, [r7, #4]
100078f4:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
100078f6:	68fb      	ldr	r3, [r7, #12]
100078f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100078fa:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
100078fc:	68ba      	ldr	r2, [r7, #8]
100078fe:	697b      	ldr	r3, [r7, #20]
10007900:	429a      	cmp	r2, r3
10007902:	d302      	bcc.n	1000790a <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
10007904:	f06f 0301 	mvn.w	r3, #1
10007908:	e019      	b.n	1000793e <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000790a:	68fb      	ldr	r3, [r7, #12]
1000790c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000790e:	68ba      	ldr	r2, [r7, #8]
10007910:	4613      	mov	r3, r2
10007912:	005b      	lsls	r3, r3, #1
10007914:	4413      	add	r3, r2
10007916:	00db      	lsls	r3, r3, #3
10007918:	440b      	add	r3, r1
1000791a:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000791c:	693b      	ldr	r3, [r7, #16]
1000791e:	6a3a      	ldr	r2, [r7, #32]
10007920:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
10007922:	693b      	ldr	r3, [r7, #16]
10007924:	687a      	ldr	r2, [r7, #4]
10007926:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
10007928:	693b      	ldr	r3, [r7, #16]
1000792a:	683a      	ldr	r2, [r7, #0]
1000792c:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007930:	b29a      	uxth	r2, r3
10007932:	693b      	ldr	r3, [r7, #16]
10007934:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
10007936:	693b      	ldr	r3, [r7, #16]
10007938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000793a:	609a      	str	r2, [r3, #8]

	return 0;
1000793c:	2300      	movs	r3, #0
}
1000793e:	4618      	mov	r0, r3
10007940:	371c      	adds	r7, #28
10007942:	46bd      	mov	sp, r7
10007944:	f85d 7b04 	ldr.w	r7, [sp], #4
10007948:	4770      	bx	lr

1000794a <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
1000794a:	b580      	push	{r7, lr}
1000794c:	b086      	sub	sp, #24
1000794e:	af00      	add	r7, sp, #0
10007950:	6078      	str	r0, [r7, #4]
10007952:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
10007954:	687b      	ldr	r3, [r7, #4]
10007956:	2b00      	cmp	r3, #0
10007958:	d102      	bne.n	10007960 <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
1000795a:	f06f 0301 	mvn.w	r3, #1
1000795e:	e02c      	b.n	100079ba <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
10007960:	687b      	ldr	r3, [r7, #4]
10007962:	681b      	ldr	r3, [r3, #0]
10007964:	683a      	ldr	r2, [r7, #0]
10007966:	429a      	cmp	r2, r3
10007968:	d101      	bne.n	1000796e <rproc_virtio_notified+0x24>
		return 0;
1000796a:	2300      	movs	r3, #0
1000796c:	e025      	b.n	100079ba <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
1000796e:	687b      	ldr	r3, [r7, #4]
10007970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007972:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
10007974:	2300      	movs	r3, #0
10007976:	617b      	str	r3, [r7, #20]
10007978:	e01a      	b.n	100079b0 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
1000797a:	687b      	ldr	r3, [r7, #4]
1000797c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000797e:	697a      	ldr	r2, [r7, #20]
10007980:	4613      	mov	r3, r2
10007982:	005b      	lsls	r3, r3, #1
10007984:	4413      	add	r3, r2
10007986:	00db      	lsls	r3, r3, #3
10007988:	440b      	add	r3, r1
1000798a:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
1000798c:	68fb      	ldr	r3, [r7, #12]
1000798e:	691b      	ldr	r3, [r3, #16]
10007990:	683a      	ldr	r2, [r7, #0]
10007992:	429a      	cmp	r2, r3
10007994:	d003      	beq.n	1000799e <rproc_virtio_notified+0x54>
10007996:	683b      	ldr	r3, [r7, #0]
10007998:	f1b3 3fff 	cmp.w	r3, #4294967295
1000799c:	d105      	bne.n	100079aa <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
1000799e:	68fb      	ldr	r3, [r7, #12]
100079a0:	681b      	ldr	r3, [r3, #0]
100079a2:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
100079a4:	68b8      	ldr	r0, [r7, #8]
100079a6:	f001 fb97 	bl	100090d8 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
100079aa:	697b      	ldr	r3, [r7, #20]
100079ac:	3301      	adds	r3, #1
100079ae:	617b      	str	r3, [r7, #20]
100079b0:	697a      	ldr	r2, [r7, #20]
100079b2:	693b      	ldr	r3, [r7, #16]
100079b4:	429a      	cmp	r2, r3
100079b6:	d3e0      	bcc.n	1000797a <rproc_virtio_notified+0x30>
		}
	}
	return 0;
100079b8:	2300      	movs	r3, #0
}
100079ba:	4618      	mov	r0, r3
100079bc:	3718      	adds	r7, #24
100079be:	46bd      	mov	sp, r7
100079c0:	bd80      	pop	{r7, pc}

100079c2 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
100079c2:	b580      	push	{r7, lr}
100079c4:	b084      	sub	sp, #16
100079c6:	af00      	add	r7, sp, #0
100079c8:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
100079ca:	687b      	ldr	r3, [r7, #4]
100079cc:	699b      	ldr	r3, [r3, #24]
100079ce:	2b00      	cmp	r3, #0
100079d0:	d00a      	beq.n	100079e8 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
100079d2:	6878      	ldr	r0, [r7, #4]
100079d4:	f7ff fe3a 	bl	1000764c <rproc_virtio_get_status>
100079d8:	4603      	mov	r3, r0
100079da:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
100079dc:	7bfb      	ldrb	r3, [r7, #15]
100079de:	f003 0304 	and.w	r3, r3, #4
100079e2:	2b00      	cmp	r3, #0
100079e4:	d102      	bne.n	100079ec <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
100079e6:	e7f4      	b.n	100079d2 <rproc_virtio_wait_remote_ready+0x10>
		return;
100079e8:	bf00      	nop
100079ea:	e000      	b.n	100079ee <rproc_virtio_wait_remote_ready+0x2c>
			return;
100079ec:	bf00      	nop
		metal_cpu_yield();
	}
}
100079ee:	3710      	adds	r7, #16
100079f0:	46bd      	mov	sp, r7
100079f2:	bd80      	pop	{r7, pc}

100079f4 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
100079f4:	b490      	push	{r4, r7}
100079f6:	b086      	sub	sp, #24
100079f8:	af00      	add	r7, sp, #0
100079fa:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
100079fc:	2300      	movs	r3, #0
100079fe:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10007a00:	bf00      	nop
10007a02:	687b      	ldr	r3, [r7, #4]
10007a04:	617b      	str	r3, [r7, #20]
10007a06:	2301      	movs	r3, #1
10007a08:	60fb      	str	r3, [r7, #12]
10007a0a:	68fb      	ldr	r3, [r7, #12]
10007a0c:	461c      	mov	r4, r3
10007a0e:	697a      	ldr	r2, [r7, #20]
10007a10:	f107 0310 	add.w	r3, r7, #16
10007a14:	6818      	ldr	r0, [r3, #0]
10007a16:	f3bf 8f5b 	dmb	ish
10007a1a:	e852 1f00 	ldrex	r1, [r2]
10007a1e:	4281      	cmp	r1, r0
10007a20:	d103      	bne.n	10007a2a <__metal_mutex_acquire+0x36>
10007a22:	e842 4c00 	strex	ip, r4, [r2]
10007a26:	f1bc 0f00 	cmp.w	ip, #0
10007a2a:	f3bf 8f5b 	dmb	ish
10007a2e:	bf0c      	ite	eq
10007a30:	2201      	moveq	r2, #1
10007a32:	2200      	movne	r2, #0
10007a34:	2a00      	cmp	r2, #0
10007a36:	d100      	bne.n	10007a3a <__metal_mutex_acquire+0x46>
10007a38:	6019      	str	r1, [r3, #0]
10007a3a:	4613      	mov	r3, r2
10007a3c:	f083 0301 	eor.w	r3, r3, #1
10007a40:	b2db      	uxtb	r3, r3
10007a42:	2b00      	cmp	r3, #0
10007a44:	d1dd      	bne.n	10007a02 <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
10007a46:	bf00      	nop
10007a48:	bf00      	nop
10007a4a:	3718      	adds	r7, #24
10007a4c:	46bd      	mov	sp, r7
10007a4e:	bc90      	pop	{r4, r7}
10007a50:	4770      	bx	lr

10007a52 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
10007a52:	b480      	push	{r7}
10007a54:	b085      	sub	sp, #20
10007a56:	af00      	add	r7, sp, #0
10007a58:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10007a5a:	687b      	ldr	r3, [r7, #4]
10007a5c:	60fb      	str	r3, [r7, #12]
10007a5e:	2300      	movs	r3, #0
10007a60:	60bb      	str	r3, [r7, #8]
10007a62:	68bb      	ldr	r3, [r7, #8]
10007a64:	461a      	mov	r2, r3
10007a66:	68fb      	ldr	r3, [r7, #12]
10007a68:	f3bf 8f5b 	dmb	ish
10007a6c:	601a      	str	r2, [r3, #0]
10007a6e:	f3bf 8f5b 	dmb	ish
}
10007a72:	bf00      	nop
10007a74:	3714      	adds	r7, #20
10007a76:	46bd      	mov	sp, r7
10007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
10007a7c:	4770      	bx	lr

10007a7e <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
10007a7e:	b580      	push	{r7, lr}
10007a80:	b082      	sub	sp, #8
10007a82:	af00      	add	r7, sp, #0
10007a84:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10007a86:	6878      	ldr	r0, [r7, #4]
10007a88:	f7ff ffb4 	bl	100079f4 <__metal_mutex_acquire>
}
10007a8c:	bf00      	nop
10007a8e:	3708      	adds	r7, #8
10007a90:	46bd      	mov	sp, r7
10007a92:	bd80      	pop	{r7, pc}

10007a94 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
10007a94:	b580      	push	{r7, lr}
10007a96:	b082      	sub	sp, #8
10007a98:	af00      	add	r7, sp, #0
10007a9a:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10007a9c:	6878      	ldr	r0, [r7, #4]
10007a9e:	f7ff ffd8 	bl	10007a52 <__metal_mutex_release>
}
10007aa2:	bf00      	nop
10007aa4:	3708      	adds	r7, #8
10007aa6:	46bd      	mov	sp, r7
10007aa8:	bd80      	pop	{r7, pc}

10007aaa <metal_list_add_before>:
{
10007aaa:	b480      	push	{r7}
10007aac:	b083      	sub	sp, #12
10007aae:	af00      	add	r7, sp, #0
10007ab0:	6078      	str	r0, [r7, #4]
10007ab2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10007ab4:	687b      	ldr	r3, [r7, #4]
10007ab6:	685a      	ldr	r2, [r3, #4]
10007ab8:	683b      	ldr	r3, [r7, #0]
10007aba:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10007abc:	683b      	ldr	r3, [r7, #0]
10007abe:	687a      	ldr	r2, [r7, #4]
10007ac0:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10007ac2:	683b      	ldr	r3, [r7, #0]
10007ac4:	681b      	ldr	r3, [r3, #0]
10007ac6:	683a      	ldr	r2, [r7, #0]
10007ac8:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10007aca:	683b      	ldr	r3, [r7, #0]
10007acc:	685b      	ldr	r3, [r3, #4]
10007ace:	683a      	ldr	r2, [r7, #0]
10007ad0:	601a      	str	r2, [r3, #0]
}
10007ad2:	bf00      	nop
10007ad4:	370c      	adds	r7, #12
10007ad6:	46bd      	mov	sp, r7
10007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
10007adc:	4770      	bx	lr

10007ade <metal_list_add_tail>:
{
10007ade:	b580      	push	{r7, lr}
10007ae0:	b082      	sub	sp, #8
10007ae2:	af00      	add	r7, sp, #0
10007ae4:	6078      	str	r0, [r7, #4]
10007ae6:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10007ae8:	6839      	ldr	r1, [r7, #0]
10007aea:	6878      	ldr	r0, [r7, #4]
10007aec:	f7ff ffdd 	bl	10007aaa <metal_list_add_before>
}
10007af0:	bf00      	nop
10007af2:	3708      	adds	r7, #8
10007af4:	46bd      	mov	sp, r7
10007af6:	bd80      	pop	{r7, pc}

10007af8 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
10007af8:	b480      	push	{r7}
10007afa:	b083      	sub	sp, #12
10007afc:	af00      	add	r7, sp, #0
10007afe:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
10007b00:	687b      	ldr	r3, [r7, #4]
10007b02:	681b      	ldr	r3, [r3, #0]
10007b04:	687a      	ldr	r2, [r7, #4]
10007b06:	6852      	ldr	r2, [r2, #4]
10007b08:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
10007b0a:	687b      	ldr	r3, [r7, #4]
10007b0c:	685b      	ldr	r3, [r3, #4]
10007b0e:	687a      	ldr	r2, [r7, #4]
10007b10:	6812      	ldr	r2, [r2, #0]
10007b12:	601a      	str	r2, [r3, #0]
	node->prev = node;
10007b14:	687b      	ldr	r3, [r7, #4]
10007b16:	687a      	ldr	r2, [r7, #4]
10007b18:	605a      	str	r2, [r3, #4]
	node->next = node;
10007b1a:	687b      	ldr	r3, [r7, #4]
10007b1c:	687a      	ldr	r2, [r7, #4]
10007b1e:	601a      	str	r2, [r3, #0]
}
10007b20:	bf00      	nop
10007b22:	370c      	adds	r7, #12
10007b24:	46bd      	mov	sp, r7
10007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
10007b2a:	4770      	bx	lr

10007b2c <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
10007b2c:	b480      	push	{r7}
10007b2e:	b083      	sub	sp, #12
10007b30:	af00      	add	r7, sp, #0
10007b32:	6078      	str	r0, [r7, #4]
10007b34:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10007b36:	683b      	ldr	r3, [r7, #0]
10007b38:	095b      	lsrs	r3, r3, #5
10007b3a:	009a      	lsls	r2, r3, #2
10007b3c:	6879      	ldr	r1, [r7, #4]
10007b3e:	440a      	add	r2, r1
10007b40:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10007b42:	683a      	ldr	r2, [r7, #0]
10007b44:	f002 021f 	and.w	r2, r2, #31
10007b48:	2001      	movs	r0, #1
10007b4a:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10007b4e:	009b      	lsls	r3, r3, #2
10007b50:	6878      	ldr	r0, [r7, #4]
10007b52:	4403      	add	r3, r0
10007b54:	430a      	orrs	r2, r1
10007b56:	601a      	str	r2, [r3, #0]
}
10007b58:	bf00      	nop
10007b5a:	370c      	adds	r7, #12
10007b5c:	46bd      	mov	sp, r7
10007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007b62:	4770      	bx	lr

10007b64 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
10007b64:	b480      	push	{r7}
10007b66:	b083      	sub	sp, #12
10007b68:	af00      	add	r7, sp, #0
10007b6a:	6078      	str	r0, [r7, #4]
10007b6c:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
10007b6e:	683b      	ldr	r3, [r7, #0]
10007b70:	095b      	lsrs	r3, r3, #5
10007b72:	009b      	lsls	r3, r3, #2
10007b74:	687a      	ldr	r2, [r7, #4]
10007b76:	4413      	add	r3, r2
10007b78:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
10007b7a:	683b      	ldr	r3, [r7, #0]
10007b7c:	f003 031f 	and.w	r3, r3, #31
10007b80:	fa22 f303 	lsr.w	r3, r2, r3
10007b84:	f003 0301 	and.w	r3, r3, #1
10007b88:	2b00      	cmp	r3, #0
10007b8a:	bf14      	ite	ne
10007b8c:	2301      	movne	r3, #1
10007b8e:	2300      	moveq	r3, #0
10007b90:	b2db      	uxtb	r3, r3
}
10007b92:	4618      	mov	r0, r3
10007b94:	370c      	adds	r7, #12
10007b96:	46bd      	mov	sp, r7
10007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
10007b9c:	4770      	bx	lr

10007b9e <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
10007b9e:	b480      	push	{r7}
10007ba0:	b083      	sub	sp, #12
10007ba2:	af00      	add	r7, sp, #0
10007ba4:	6078      	str	r0, [r7, #4]
10007ba6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10007ba8:	683b      	ldr	r3, [r7, #0]
10007baa:	095b      	lsrs	r3, r3, #5
10007bac:	009a      	lsls	r2, r3, #2
10007bae:	6879      	ldr	r1, [r7, #4]
10007bb0:	440a      	add	r2, r1
10007bb2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10007bb4:	683a      	ldr	r2, [r7, #0]
10007bb6:	f002 021f 	and.w	r2, r2, #31
10007bba:	2001      	movs	r0, #1
10007bbc:	fa00 f202 	lsl.w	r2, r0, r2
10007bc0:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10007bc2:	009b      	lsls	r3, r3, #2
10007bc4:	6878      	ldr	r0, [r7, #4]
10007bc6:	4403      	add	r3, r0
10007bc8:	400a      	ands	r2, r1
10007bca:	601a      	str	r2, [r3, #0]
}
10007bcc:	bf00      	nop
10007bce:	370c      	adds	r7, #12
10007bd0:	46bd      	mov	sp, r7
10007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
10007bd6:	4770      	bx	lr

10007bd8 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
10007bd8:	b580      	push	{r7, lr}
10007bda:	b082      	sub	sp, #8
10007bdc:	af00      	add	r7, sp, #0
10007bde:	6078      	str	r0, [r7, #4]
10007be0:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
10007be2:	6839      	ldr	r1, [r7, #0]
10007be4:	6878      	ldr	r0, [r7, #4]
10007be6:	f7ff ffbd 	bl	10007b64 <metal_bitmap_is_bit_set>
10007bea:	4603      	mov	r3, r0
10007bec:	2b00      	cmp	r3, #0
10007bee:	bf0c      	ite	eq
10007bf0:	2301      	moveq	r3, #1
10007bf2:	2300      	movne	r3, #0
10007bf4:	b2db      	uxtb	r3, r3
}
10007bf6:	4618      	mov	r0, r3
10007bf8:	3708      	adds	r7, #8
10007bfa:	46bd      	mov	sp, r7
10007bfc:	bd80      	pop	{r7, pc}

10007bfe <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
10007bfe:	b580      	push	{r7, lr}
10007c00:	b086      	sub	sp, #24
10007c02:	af00      	add	r7, sp, #0
10007c04:	60f8      	str	r0, [r7, #12]
10007c06:	60b9      	str	r1, [r7, #8]
10007c08:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
10007c0a:	68bb      	ldr	r3, [r7, #8]
10007c0c:	617b      	str	r3, [r7, #20]
10007c0e:	e002      	b.n	10007c16 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
10007c10:	697b      	ldr	r3, [r7, #20]
10007c12:	3301      	adds	r3, #1
10007c14:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
10007c16:	697a      	ldr	r2, [r7, #20]
10007c18:	687b      	ldr	r3, [r7, #4]
10007c1a:	429a      	cmp	r2, r3
10007c1c:	d207      	bcs.n	10007c2e <metal_bitmap_next_clear_bit+0x30>
10007c1e:	697b      	ldr	r3, [r7, #20]
10007c20:	4619      	mov	r1, r3
10007c22:	68f8      	ldr	r0, [r7, #12]
10007c24:	f7ff ffd8 	bl	10007bd8 <metal_bitmap_is_bit_clear>
10007c28:	4603      	mov	r3, r0
10007c2a:	2b00      	cmp	r3, #0
10007c2c:	d0f0      	beq.n	10007c10 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
10007c2e:	697b      	ldr	r3, [r7, #20]
}
10007c30:	4618      	mov	r0, r3
10007c32:	3718      	adds	r7, #24
10007c34:	46bd      	mov	sp, r7
10007c36:	bd80      	pop	{r7, pc}

10007c38 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
10007c38:	b580      	push	{r7, lr}
10007c3a:	b084      	sub	sp, #16
10007c3c:	af00      	add	r7, sp, #0
10007c3e:	60f8      	str	r0, [r7, #12]
10007c40:	60b9      	str	r1, [r7, #8]
10007c42:	607a      	str	r2, [r7, #4]
10007c44:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10007c46:	68f8      	ldr	r0, [r7, #12]
10007c48:	68bb      	ldr	r3, [r7, #8]
10007c4a:	2b00      	cmp	r3, #0
10007c4c:	d001      	beq.n	10007c52 <rpmsg_initialize_ept+0x1a>
10007c4e:	68bb      	ldr	r3, [r7, #8]
10007c50:	e000      	b.n	10007c54 <rpmsg_initialize_ept+0x1c>
10007c52:	4b0a      	ldr	r3, [pc, #40]	@ (10007c7c <rpmsg_initialize_ept+0x44>)
10007c54:	2220      	movs	r2, #32
10007c56:	4619      	mov	r1, r3
10007c58:	f001 ff9d 	bl	10009b96 <strncpy>
	ept->addr = src;
10007c5c:	68fb      	ldr	r3, [r7, #12]
10007c5e:	687a      	ldr	r2, [r7, #4]
10007c60:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
10007c62:	68fb      	ldr	r3, [r7, #12]
10007c64:	683a      	ldr	r2, [r7, #0]
10007c66:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
10007c68:	68fb      	ldr	r3, [r7, #12]
10007c6a:	69ba      	ldr	r2, [r7, #24]
10007c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10007c6e:	68fb      	ldr	r3, [r7, #12]
10007c70:	69fa      	ldr	r2, [r7, #28]
10007c72:	631a      	str	r2, [r3, #48]	@ 0x30
}
10007c74:	bf00      	nop
10007c76:	3710      	adds	r7, #16
10007c78:	46bd      	mov	sp, r7
10007c7a:	bd80      	pop	{r7, pc}
10007c7c:	1000ad0c 	.word	0x1000ad0c

10007c80 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
10007c80:	b580      	push	{r7, lr}
10007c82:	b084      	sub	sp, #16
10007c84:	af00      	add	r7, sp, #0
10007c86:	6078      	str	r0, [r7, #4]
10007c88:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
10007c8a:	f04f 33ff 	mov.w	r3, #4294967295
10007c8e:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
10007c90:	683b      	ldr	r3, [r7, #0]
10007c92:	461a      	mov	r2, r3
10007c94:	2100      	movs	r1, #0
10007c96:	6878      	ldr	r0, [r7, #4]
10007c98:	f7ff ffb1 	bl	10007bfe <metal_bitmap_next_clear_bit>
10007c9c:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
10007c9e:	683b      	ldr	r3, [r7, #0]
10007ca0:	68ba      	ldr	r2, [r7, #8]
10007ca2:	429a      	cmp	r2, r3
10007ca4:	d208      	bcs.n	10007cb8 <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
10007ca6:	68bb      	ldr	r3, [r7, #8]
10007ca8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
10007cac:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
10007cae:	68bb      	ldr	r3, [r7, #8]
10007cb0:	4619      	mov	r1, r3
10007cb2:	6878      	ldr	r0, [r7, #4]
10007cb4:	f7ff ff3a 	bl	10007b2c <metal_bitmap_set_bit>
	}

	return addr;
10007cb8:	68fb      	ldr	r3, [r7, #12]
}
10007cba:	4618      	mov	r0, r3
10007cbc:	3710      	adds	r7, #16
10007cbe:	46bd      	mov	sp, r7
10007cc0:	bd80      	pop	{r7, pc}

10007cc2 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
10007cc2:	b580      	push	{r7, lr}
10007cc4:	b084      	sub	sp, #16
10007cc6:	af00      	add	r7, sp, #0
10007cc8:	60f8      	str	r0, [r7, #12]
10007cca:	60b9      	str	r1, [r7, #8]
10007ccc:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007cce:	687b      	ldr	r3, [r7, #4]
10007cd0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007cd4:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10007cd6:	687b      	ldr	r3, [r7, #4]
10007cd8:	2b00      	cmp	r3, #0
10007cda:	db07      	blt.n	10007cec <rpmsg_release_address+0x2a>
10007cdc:	687a      	ldr	r2, [r7, #4]
10007cde:	68bb      	ldr	r3, [r7, #8]
10007ce0:	429a      	cmp	r2, r3
10007ce2:	da03      	bge.n	10007cec <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
10007ce4:	6879      	ldr	r1, [r7, #4]
10007ce6:	68f8      	ldr	r0, [r7, #12]
10007ce8:	f7ff ff59 	bl	10007b9e <metal_bitmap_clear_bit>
}
10007cec:	bf00      	nop
10007cee:	3710      	adds	r7, #16
10007cf0:	46bd      	mov	sp, r7
10007cf2:	bd80      	pop	{r7, pc}

10007cf4 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
10007cf4:	b580      	push	{r7, lr}
10007cf6:	b084      	sub	sp, #16
10007cf8:	af00      	add	r7, sp, #0
10007cfa:	60f8      	str	r0, [r7, #12]
10007cfc:	60b9      	str	r1, [r7, #8]
10007cfe:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007d00:	687b      	ldr	r3, [r7, #4]
10007d02:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007d06:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10007d08:	687b      	ldr	r3, [r7, #4]
10007d0a:	2b00      	cmp	r3, #0
10007d0c:	db09      	blt.n	10007d22 <rpmsg_is_address_set+0x2e>
10007d0e:	687a      	ldr	r2, [r7, #4]
10007d10:	68bb      	ldr	r3, [r7, #8]
10007d12:	429a      	cmp	r2, r3
10007d14:	da05      	bge.n	10007d22 <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
10007d16:	6879      	ldr	r1, [r7, #4]
10007d18:	68f8      	ldr	r0, [r7, #12]
10007d1a:	f7ff ff23 	bl	10007b64 <metal_bitmap_is_bit_set>
10007d1e:	4603      	mov	r3, r0
10007d20:	e000      	b.n	10007d24 <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
10007d22:	4b02      	ldr	r3, [pc, #8]	@ (10007d2c <rpmsg_is_address_set+0x38>)
}
10007d24:	4618      	mov	r0, r3
10007d26:	3710      	adds	r7, #16
10007d28:	46bd      	mov	sp, r7
10007d2a:	bd80      	pop	{r7, pc}
10007d2c:	fffff82d 	.word	0xfffff82d

10007d30 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
10007d30:	b580      	push	{r7, lr}
10007d32:	b084      	sub	sp, #16
10007d34:	af00      	add	r7, sp, #0
10007d36:	60f8      	str	r0, [r7, #12]
10007d38:	60b9      	str	r1, [r7, #8]
10007d3a:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007d3c:	687b      	ldr	r3, [r7, #4]
10007d3e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007d42:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
10007d44:	687b      	ldr	r3, [r7, #4]
10007d46:	2b00      	cmp	r3, #0
10007d48:	db09      	blt.n	10007d5e <rpmsg_set_address+0x2e>
10007d4a:	687a      	ldr	r2, [r7, #4]
10007d4c:	68bb      	ldr	r3, [r7, #8]
10007d4e:	429a      	cmp	r2, r3
10007d50:	da05      	bge.n	10007d5e <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
10007d52:	6879      	ldr	r1, [r7, #4]
10007d54:	68f8      	ldr	r0, [r7, #12]
10007d56:	f7ff fee9 	bl	10007b2c <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
10007d5a:	2300      	movs	r3, #0
10007d5c:	e000      	b.n	10007d60 <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
10007d5e:	4b02      	ldr	r3, [pc, #8]	@ (10007d68 <rpmsg_set_address+0x38>)
	}
}
10007d60:	4618      	mov	r0, r3
10007d62:	3710      	adds	r7, #16
10007d64:	46bd      	mov	sp, r7
10007d66:	bd80      	pop	{r7, pc}
10007d68:	fffff82d 	.word	0xfffff82d

10007d6c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
10007d6c:	b590      	push	{r4, r7, lr}
10007d6e:	b089      	sub	sp, #36	@ 0x24
10007d70:	af02      	add	r7, sp, #8
10007d72:	60f8      	str	r0, [r7, #12]
10007d74:	60b9      	str	r1, [r7, #8]
10007d76:	607a      	str	r2, [r7, #4]
10007d78:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
10007d7a:	68fb      	ldr	r3, [r7, #12]
10007d7c:	2b00      	cmp	r3, #0
10007d7e:	d00a      	beq.n	10007d96 <rpmsg_send_offchannel_raw+0x2a>
10007d80:	68fb      	ldr	r3, [r7, #12]
10007d82:	6a1b      	ldr	r3, [r3, #32]
10007d84:	2b00      	cmp	r3, #0
10007d86:	d006      	beq.n	10007d96 <rpmsg_send_offchannel_raw+0x2a>
10007d88:	683b      	ldr	r3, [r7, #0]
10007d8a:	2b00      	cmp	r3, #0
10007d8c:	d003      	beq.n	10007d96 <rpmsg_send_offchannel_raw+0x2a>
10007d8e:	687b      	ldr	r3, [r7, #4]
10007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d94:	d101      	bne.n	10007d9a <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
10007d96:	4b0d      	ldr	r3, [pc, #52]	@ (10007dcc <rpmsg_send_offchannel_raw+0x60>)
10007d98:	e014      	b.n	10007dc4 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
10007d9a:	68fb      	ldr	r3, [r7, #12]
10007d9c:	6a1b      	ldr	r3, [r3, #32]
10007d9e:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
10007da0:	697b      	ldr	r3, [r7, #20]
10007da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10007da4:	2b00      	cmp	r3, #0
10007da6:	d00c      	beq.n	10007dc2 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
10007da8:	697b      	ldr	r3, [r7, #20]
10007daa:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
10007dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007dae:	9301      	str	r3, [sp, #4]
10007db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007db2:	9300      	str	r3, [sp, #0]
10007db4:	683b      	ldr	r3, [r7, #0]
10007db6:	687a      	ldr	r2, [r7, #4]
10007db8:	68b9      	ldr	r1, [r7, #8]
10007dba:	6978      	ldr	r0, [r7, #20]
10007dbc:	47a0      	blx	r4
10007dbe:	4603      	mov	r3, r0
10007dc0:	e000      	b.n	10007dc4 <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
10007dc2:	4b02      	ldr	r3, [pc, #8]	@ (10007dcc <rpmsg_send_offchannel_raw+0x60>)
}
10007dc4:	4618      	mov	r0, r3
10007dc6:	371c      	adds	r7, #28
10007dc8:	46bd      	mov	sp, r7
10007dca:	bd90      	pop	{r4, r7, pc}
10007dcc:	fffff82d 	.word	0xfffff82d

10007dd0 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
10007dd0:	b580      	push	{r7, lr}
10007dd2:	b090      	sub	sp, #64	@ 0x40
10007dd4:	af02      	add	r7, sp, #8
10007dd6:	6078      	str	r0, [r7, #4]
10007dd8:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
10007dda:	683b      	ldr	r3, [r7, #0]
10007ddc:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
10007dde:	687b      	ldr	r3, [r7, #4]
10007de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
10007de4:	6879      	ldr	r1, [r7, #4]
10007de6:	f107 030c 	add.w	r3, r7, #12
10007dea:	2220      	movs	r2, #32
10007dec:	4618      	mov	r0, r3
10007dee:	f001 fed2 	bl	10009b96 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
10007df2:	687b      	ldr	r3, [r7, #4]
10007df4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10007df6:	f107 030c 	add.w	r3, r7, #12
10007dfa:	2201      	movs	r2, #1
10007dfc:	9201      	str	r2, [sp, #4]
10007dfe:	2228      	movs	r2, #40	@ 0x28
10007e00:	9200      	str	r2, [sp, #0]
10007e02:	2235      	movs	r2, #53	@ 0x35
10007e04:	6878      	ldr	r0, [r7, #4]
10007e06:	f7ff ffb1 	bl	10007d6c <rpmsg_send_offchannel_raw>
10007e0a:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
10007e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007e0e:	2b00      	cmp	r3, #0
10007e10:	da01      	bge.n	10007e16 <rpmsg_send_ns_message+0x46>
		return ret;
10007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007e14:	e000      	b.n	10007e18 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
10007e16:	2300      	movs	r3, #0
}
10007e18:	4618      	mov	r0, r3
10007e1a:	3738      	adds	r7, #56	@ 0x38
10007e1c:	46bd      	mov	sp, r7
10007e1e:	bd80      	pop	{r7, pc}

10007e20 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
10007e20:	b580      	push	{r7, lr}
10007e22:	b088      	sub	sp, #32
10007e24:	af00      	add	r7, sp, #0
10007e26:	60f8      	str	r0, [r7, #12]
10007e28:	60b9      	str	r1, [r7, #8]
10007e2a:	607a      	str	r2, [r7, #4]
10007e2c:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
10007e2e:	68fb      	ldr	r3, [r7, #12]
10007e30:	681b      	ldr	r3, [r3, #0]
10007e32:	61fb      	str	r3, [r7, #28]
10007e34:	e04b      	b.n	10007ece <rpmsg_get_endpoint+0xae>
		int name_match = 0;
10007e36:	2300      	movs	r3, #0
10007e38:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
10007e3a:	69fb      	ldr	r3, [r7, #28]
10007e3c:	3b34      	subs	r3, #52	@ 0x34
10007e3e:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
10007e40:	687b      	ldr	r3, [r7, #4]
10007e42:	f1b3 3fff 	cmp.w	r3, #4294967295
10007e46:	d006      	beq.n	10007e56 <rpmsg_get_endpoint+0x36>
10007e48:	697b      	ldr	r3, [r7, #20]
10007e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007e4c:	687a      	ldr	r2, [r7, #4]
10007e4e:	429a      	cmp	r2, r3
10007e50:	d101      	bne.n	10007e56 <rpmsg_get_endpoint+0x36>
			return ept;
10007e52:	697b      	ldr	r3, [r7, #20]
10007e54:	e040      	b.n	10007ed8 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
10007e56:	697b      	ldr	r3, [r7, #20]
10007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007e5a:	687a      	ldr	r2, [r7, #4]
10007e5c:	429a      	cmp	r2, r3
10007e5e:	d106      	bne.n	10007e6e <rpmsg_get_endpoint+0x4e>
10007e60:	697b      	ldr	r3, [r7, #20]
10007e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007e64:	683a      	ldr	r2, [r7, #0]
10007e66:	429a      	cmp	r2, r3
10007e68:	d101      	bne.n	10007e6e <rpmsg_get_endpoint+0x4e>
			return ept;
10007e6a:	697b      	ldr	r3, [r7, #20]
10007e6c:	e034      	b.n	10007ed8 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
10007e6e:	68bb      	ldr	r3, [r7, #8]
10007e70:	2b00      	cmp	r3, #0
10007e72:	d00c      	beq.n	10007e8e <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
10007e74:	697b      	ldr	r3, [r7, #20]
10007e76:	2220      	movs	r2, #32
10007e78:	68b9      	ldr	r1, [r7, #8]
10007e7a:	4618      	mov	r0, r3
10007e7c:	f001 fe79 	bl	10009b72 <strncmp>
10007e80:	4603      	mov	r3, r0
10007e82:	2b00      	cmp	r3, #0
10007e84:	bf0c      	ite	eq
10007e86:	2301      	moveq	r3, #1
10007e88:	2300      	movne	r3, #0
10007e8a:	b2db      	uxtb	r3, r3
10007e8c:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10007e8e:	68bb      	ldr	r3, [r7, #8]
10007e90:	2b00      	cmp	r3, #0
10007e92:	d018      	beq.n	10007ec6 <rpmsg_get_endpoint+0xa6>
10007e94:	69bb      	ldr	r3, [r7, #24]
10007e96:	2b00      	cmp	r3, #0
10007e98:	d015      	beq.n	10007ec6 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10007e9a:	683b      	ldr	r3, [r7, #0]
10007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
10007ea0:	d006      	beq.n	10007eb0 <rpmsg_get_endpoint+0x90>
10007ea2:	697b      	ldr	r3, [r7, #20]
10007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007ea6:	683a      	ldr	r2, [r7, #0]
10007ea8:	429a      	cmp	r2, r3
10007eaa:	d101      	bne.n	10007eb0 <rpmsg_get_endpoint+0x90>
			return ept;
10007eac:	697b      	ldr	r3, [r7, #20]
10007eae:	e013      	b.n	10007ed8 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10007eb0:	687b      	ldr	r3, [r7, #4]
10007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
10007eb6:	d107      	bne.n	10007ec8 <rpmsg_get_endpoint+0xa8>
10007eb8:	697b      	ldr	r3, [r7, #20]
10007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
10007ec0:	d102      	bne.n	10007ec8 <rpmsg_get_endpoint+0xa8>
			return ept;
10007ec2:	697b      	ldr	r3, [r7, #20]
10007ec4:	e008      	b.n	10007ed8 <rpmsg_get_endpoint+0xb8>
			continue;
10007ec6:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10007ec8:	69fb      	ldr	r3, [r7, #28]
10007eca:	681b      	ldr	r3, [r3, #0]
10007ecc:	61fb      	str	r3, [r7, #28]
10007ece:	68fb      	ldr	r3, [r7, #12]
10007ed0:	69fa      	ldr	r2, [r7, #28]
10007ed2:	429a      	cmp	r2, r3
10007ed4:	d1af      	bne.n	10007e36 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
10007ed6:	2300      	movs	r3, #0
}
10007ed8:	4618      	mov	r0, r3
10007eda:	3720      	adds	r7, #32
10007edc:	46bd      	mov	sp, r7
10007ede:	bd80      	pop	{r7, pc}

10007ee0 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
10007ee0:	b580      	push	{r7, lr}
10007ee2:	b084      	sub	sp, #16
10007ee4:	af00      	add	r7, sp, #0
10007ee6:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
10007ee8:	687b      	ldr	r3, [r7, #4]
10007eea:	6a1b      	ldr	r3, [r3, #32]
10007eec:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
10007eee:	68fb      	ldr	r3, [r7, #12]
10007ef0:	3358      	adds	r3, #88	@ 0x58
10007ef2:	4618      	mov	r0, r3
10007ef4:	f7ff fdc3 	bl	10007a7e <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
10007ef8:	687b      	ldr	r3, [r7, #4]
10007efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
10007f00:	d008      	beq.n	10007f14 <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007f02:	68fb      	ldr	r3, [r7, #12]
10007f04:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
10007f08:	687b      	ldr	r3, [r7, #4]
10007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007f0c:	461a      	mov	r2, r3
10007f0e:	2180      	movs	r1, #128	@ 0x80
10007f10:	f7ff fed7 	bl	10007cc2 <rpmsg_release_address>
	metal_list_del(&ept->node);
10007f14:	687b      	ldr	r3, [r7, #4]
10007f16:	3334      	adds	r3, #52	@ 0x34
10007f18:	4618      	mov	r0, r3
10007f1a:	f7ff fded 	bl	10007af8 <metal_list_del>
	ept->rdev = NULL;
10007f1e:	687b      	ldr	r3, [r7, #4]
10007f20:	2200      	movs	r2, #0
10007f22:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
10007f24:	68fb      	ldr	r3, [r7, #12]
10007f26:	3358      	adds	r3, #88	@ 0x58
10007f28:	4618      	mov	r0, r3
10007f2a:	f7ff fdb3 	bl	10007a94 <metal_mutex_release>
}
10007f2e:	bf00      	nop
10007f30:	3710      	adds	r7, #16
10007f32:	46bd      	mov	sp, r7
10007f34:	bd80      	pop	{r7, pc}

10007f36 <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
10007f36:	b580      	push	{r7, lr}
10007f38:	b082      	sub	sp, #8
10007f3a:	af00      	add	r7, sp, #0
10007f3c:	6078      	str	r0, [r7, #4]
10007f3e:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
10007f40:	683b      	ldr	r3, [r7, #0]
10007f42:	687a      	ldr	r2, [r7, #4]
10007f44:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
10007f46:	687a      	ldr	r2, [r7, #4]
10007f48:	683b      	ldr	r3, [r7, #0]
10007f4a:	3334      	adds	r3, #52	@ 0x34
10007f4c:	4619      	mov	r1, r3
10007f4e:	4610      	mov	r0, r2
10007f50:	f7ff fdc5 	bl	10007ade <metal_list_add_tail>
}
10007f54:	bf00      	nop
10007f56:	3708      	adds	r7, #8
10007f58:	46bd      	mov	sp, r7
10007f5a:	bd80      	pop	{r7, pc}

10007f5c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
10007f5c:	b580      	push	{r7, lr}
10007f5e:	b088      	sub	sp, #32
10007f60:	af02      	add	r7, sp, #8
10007f62:	60f8      	str	r0, [r7, #12]
10007f64:	60b9      	str	r1, [r7, #8]
10007f66:	607a      	str	r2, [r7, #4]
10007f68:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
10007f6a:	2300      	movs	r3, #0
10007f6c:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
10007f6e:	683b      	ldr	r3, [r7, #0]
10007f70:	613b      	str	r3, [r7, #16]

	if (!ept)
10007f72:	68fb      	ldr	r3, [r7, #12]
10007f74:	2b00      	cmp	r3, #0
10007f76:	d101      	bne.n	10007f7c <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
10007f78:	4b37      	ldr	r3, [pc, #220]	@ (10008058 <rpmsg_create_ept+0xfc>)
10007f7a:	e068      	b.n	1000804e <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
10007f7c:	68bb      	ldr	r3, [r7, #8]
10007f7e:	3358      	adds	r3, #88	@ 0x58
10007f80:	4618      	mov	r0, r3
10007f82:	f7ff fd7c 	bl	10007a7e <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
10007f86:	683b      	ldr	r3, [r7, #0]
10007f88:	f1b3 3fff 	cmp.w	r3, #4294967295
10007f8c:	d10d      	bne.n	10007faa <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
10007f8e:	68bb      	ldr	r3, [r7, #8]
10007f90:	3348      	adds	r3, #72	@ 0x48
10007f92:	2180      	movs	r1, #128	@ 0x80
10007f94:	4618      	mov	r0, r3
10007f96:	f7ff fe73 	bl	10007c80 <rpmsg_get_address>
10007f9a:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
10007f9c:	693b      	ldr	r3, [r7, #16]
10007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
10007fa2:	d11f      	bne.n	10007fe4 <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
10007fa4:	4b2d      	ldr	r3, [pc, #180]	@ (1000805c <rpmsg_create_ept+0x100>)
10007fa6:	617b      	str	r3, [r7, #20]
			goto ret_status;
10007fa8:	e04b      	b.n	10008042 <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
10007faa:	683b      	ldr	r3, [r7, #0]
10007fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
10007fb0:	d318      	bcc.n	10007fe4 <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
10007fb2:	68bb      	ldr	r3, [r7, #8]
10007fb4:	3348      	adds	r3, #72	@ 0x48
10007fb6:	683a      	ldr	r2, [r7, #0]
10007fb8:	2180      	movs	r1, #128	@ 0x80
10007fba:	4618      	mov	r0, r3
10007fbc:	f7ff fe9a 	bl	10007cf4 <rpmsg_is_address_set>
10007fc0:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
10007fc2:	697b      	ldr	r3, [r7, #20]
10007fc4:	2b00      	cmp	r3, #0
10007fc6:	d107      	bne.n	10007fd8 <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007fc8:	68bb      	ldr	r3, [r7, #8]
10007fca:	3348      	adds	r3, #72	@ 0x48
10007fcc:	683a      	ldr	r2, [r7, #0]
10007fce:	2180      	movs	r1, #128	@ 0x80
10007fd0:	4618      	mov	r0, r3
10007fd2:	f7ff fead 	bl	10007d30 <rpmsg_set_address>
10007fd6:	e005      	b.n	10007fe4 <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
10007fd8:	697b      	ldr	r3, [r7, #20]
10007fda:	2b00      	cmp	r3, #0
10007fdc:	dd30      	ble.n	10008040 <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
10007fde:	4b1f      	ldr	r3, [pc, #124]	@ (1000805c <rpmsg_create_ept+0x100>)
10007fe0:	617b      	str	r3, [r7, #20]
			goto ret_status;
10007fe2:	e02e      	b.n	10008042 <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
10007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007fe6:	9301      	str	r3, [sp, #4]
10007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007fea:	9300      	str	r3, [sp, #0]
10007fec:	6a3b      	ldr	r3, [r7, #32]
10007fee:	693a      	ldr	r2, [r7, #16]
10007ff0:	6879      	ldr	r1, [r7, #4]
10007ff2:	68f8      	ldr	r0, [r7, #12]
10007ff4:	f7ff fe20 	bl	10007c38 <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
10007ff8:	68f9      	ldr	r1, [r7, #12]
10007ffa:	68b8      	ldr	r0, [r7, #8]
10007ffc:	f7ff ff9b 	bl	10007f36 <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
10008000:	68bb      	ldr	r3, [r7, #8]
10008002:	3358      	adds	r3, #88	@ 0x58
10008004:	4618      	mov	r0, r3
10008006:	f7ff fd45 	bl	10007a94 <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
1000800a:	68fb      	ldr	r3, [r7, #12]
1000800c:	781b      	ldrb	r3, [r3, #0]
1000800e:	2b00      	cmp	r3, #0
10008010:	d00e      	beq.n	10008030 <rpmsg_create_ept+0xd4>
10008012:	68bb      	ldr	r3, [r7, #8]
10008014:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10008018:	2b00      	cmp	r3, #0
1000801a:	d009      	beq.n	10008030 <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
1000801c:	68fb      	ldr	r3, [r7, #12]
1000801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	if (ept->name[0] && rdev->support_ns &&
10008020:	f1b3 3fff 	cmp.w	r3, #4294967295
10008024:	d104      	bne.n	10008030 <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
10008026:	2100      	movs	r1, #0
10008028:	68f8      	ldr	r0, [r7, #12]
1000802a:	f7ff fed1 	bl	10007dd0 <rpmsg_send_ns_message>
1000802e:	6178      	str	r0, [r7, #20]

	if (status)
10008030:	697b      	ldr	r3, [r7, #20]
10008032:	2b00      	cmp	r3, #0
10008034:	d002      	beq.n	1000803c <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
10008036:	68f8      	ldr	r0, [r7, #12]
10008038:	f7ff ff52 	bl	10007ee0 <rpmsg_unregister_endpoint>
	return status;
1000803c:	697b      	ldr	r3, [r7, #20]
1000803e:	e006      	b.n	1000804e <rpmsg_create_ept+0xf2>
			goto ret_status;
10008040:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
10008042:	68bb      	ldr	r3, [r7, #8]
10008044:	3358      	adds	r3, #88	@ 0x58
10008046:	4618      	mov	r0, r3
10008048:	f7ff fd24 	bl	10007a94 <metal_mutex_release>
	return status;
1000804c:	697b      	ldr	r3, [r7, #20]
}
1000804e:	4618      	mov	r0, r3
10008050:	3718      	adds	r7, #24
10008052:	46bd      	mov	sp, r7
10008054:	bd80      	pop	{r7, pc}
10008056:	bf00      	nop
10008058:	fffff82d 	.word	0xfffff82d
1000805c:	fffff829 	.word	0xfffff829

10008060 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
10008060:	b480      	push	{r7}
10008062:	b083      	sub	sp, #12
10008064:	af00      	add	r7, sp, #0
10008066:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
10008068:	2300      	movs	r3, #0
}
1000806a:	4618      	mov	r0, r3
1000806c:	370c      	adds	r7, #12
1000806e:	46bd      	mov	sp, r7
10008070:	f85d 7b04 	ldr.w	r7, [sp], #4
10008074:	4770      	bx	lr

10008076 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
10008076:	b580      	push	{r7, lr}
10008078:	b082      	sub	sp, #8
1000807a:	af00      	add	r7, sp, #0
1000807c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000807e:	6878      	ldr	r0, [r7, #4]
10008080:	f7ff ffee 	bl	10008060 <__metal_sleep_usec>
10008084:	4603      	mov	r3, r0
}
10008086:	4618      	mov	r0, r3
10008088:	3708      	adds	r7, #8
1000808a:	46bd      	mov	sp, r7
1000808c:	bd80      	pop	{r7, pc}

1000808e <metal_list_init>:
{
1000808e:	b480      	push	{r7}
10008090:	b083      	sub	sp, #12
10008092:	af00      	add	r7, sp, #0
10008094:	6078      	str	r0, [r7, #4]
	list->prev = list;
10008096:	687b      	ldr	r3, [r7, #4]
10008098:	687a      	ldr	r2, [r7, #4]
1000809a:	605a      	str	r2, [r3, #4]
	list->next = list;
1000809c:	687b      	ldr	r3, [r7, #4]
1000809e:	687a      	ldr	r2, [r7, #4]
100080a0:	601a      	str	r2, [r3, #0]
}
100080a2:	bf00      	nop
100080a4:	370c      	adds	r7, #12
100080a6:	46bd      	mov	sp, r7
100080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100080ac:	4770      	bx	lr

100080ae <metal_io_virt_to_offset>:
{
100080ae:	b480      	push	{r7}
100080b0:	b085      	sub	sp, #20
100080b2:	af00      	add	r7, sp, #0
100080b4:	6078      	str	r0, [r7, #4]
100080b6:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
100080b8:	683b      	ldr	r3, [r7, #0]
100080ba:	687a      	ldr	r2, [r7, #4]
100080bc:	6812      	ldr	r2, [r2, #0]
100080be:	1a9b      	subs	r3, r3, r2
100080c0:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
100080c2:	687b      	ldr	r3, [r7, #4]
100080c4:	689b      	ldr	r3, [r3, #8]
100080c6:	68fa      	ldr	r2, [r7, #12]
100080c8:	429a      	cmp	r2, r3
100080ca:	d201      	bcs.n	100080d0 <metal_io_virt_to_offset+0x22>
100080cc:	68fb      	ldr	r3, [r7, #12]
100080ce:	e001      	b.n	100080d4 <metal_io_virt_to_offset+0x26>
100080d0:	f04f 33ff 	mov.w	r3, #4294967295
}
100080d4:	4618      	mov	r0, r3
100080d6:	3714      	adds	r7, #20
100080d8:	46bd      	mov	sp, r7
100080da:	f85d 7b04 	ldr.w	r7, [sp], #4
100080de:	4770      	bx	lr

100080e0 <__metal_mutex_init>:
{
100080e0:	b480      	push	{r7}
100080e2:	b085      	sub	sp, #20
100080e4:	af00      	add	r7, sp, #0
100080e6:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100080e8:	687b      	ldr	r3, [r7, #4]
100080ea:	60fb      	str	r3, [r7, #12]
100080ec:	2300      	movs	r3, #0
100080ee:	60bb      	str	r3, [r7, #8]
100080f0:	68bb      	ldr	r3, [r7, #8]
100080f2:	461a      	mov	r2, r3
100080f4:	68fb      	ldr	r3, [r7, #12]
100080f6:	f3bf 8f5b 	dmb	ish
100080fa:	601a      	str	r2, [r3, #0]
100080fc:	f3bf 8f5b 	dmb	ish
}
10008100:	bf00      	nop
10008102:	3714      	adds	r7, #20
10008104:	46bd      	mov	sp, r7
10008106:	f85d 7b04 	ldr.w	r7, [sp], #4
1000810a:	4770      	bx	lr

1000810c <__metal_mutex_acquire>:
{
1000810c:	b490      	push	{r4, r7}
1000810e:	b086      	sub	sp, #24
10008110:	af00      	add	r7, sp, #0
10008112:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10008114:	2300      	movs	r3, #0
10008116:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10008118:	bf00      	nop
1000811a:	687b      	ldr	r3, [r7, #4]
1000811c:	617b      	str	r3, [r7, #20]
1000811e:	2301      	movs	r3, #1
10008120:	60fb      	str	r3, [r7, #12]
10008122:	68fb      	ldr	r3, [r7, #12]
10008124:	461c      	mov	r4, r3
10008126:	697a      	ldr	r2, [r7, #20]
10008128:	f107 0310 	add.w	r3, r7, #16
1000812c:	6818      	ldr	r0, [r3, #0]
1000812e:	f3bf 8f5b 	dmb	ish
10008132:	e852 1f00 	ldrex	r1, [r2]
10008136:	4281      	cmp	r1, r0
10008138:	d103      	bne.n	10008142 <__metal_mutex_acquire+0x36>
1000813a:	e842 4c00 	strex	ip, r4, [r2]
1000813e:	f1bc 0f00 	cmp.w	ip, #0
10008142:	f3bf 8f5b 	dmb	ish
10008146:	bf0c      	ite	eq
10008148:	2201      	moveq	r2, #1
1000814a:	2200      	movne	r2, #0
1000814c:	2a00      	cmp	r2, #0
1000814e:	d100      	bne.n	10008152 <__metal_mutex_acquire+0x46>
10008150:	6019      	str	r1, [r3, #0]
10008152:	4613      	mov	r3, r2
10008154:	f083 0301 	eor.w	r3, r3, #1
10008158:	b2db      	uxtb	r3, r3
1000815a:	2b00      	cmp	r3, #0
1000815c:	d1dd      	bne.n	1000811a <__metal_mutex_acquire+0xe>
}
1000815e:	bf00      	nop
10008160:	bf00      	nop
10008162:	3718      	adds	r7, #24
10008164:	46bd      	mov	sp, r7
10008166:	bc90      	pop	{r4, r7}
10008168:	4770      	bx	lr

1000816a <__metal_mutex_release>:
{
1000816a:	b480      	push	{r7}
1000816c:	b085      	sub	sp, #20
1000816e:	af00      	add	r7, sp, #0
10008170:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10008172:	687b      	ldr	r3, [r7, #4]
10008174:	60fb      	str	r3, [r7, #12]
10008176:	2300      	movs	r3, #0
10008178:	60bb      	str	r3, [r7, #8]
1000817a:	68bb      	ldr	r3, [r7, #8]
1000817c:	461a      	mov	r2, r3
1000817e:	68fb      	ldr	r3, [r7, #12]
10008180:	f3bf 8f5b 	dmb	ish
10008184:	601a      	str	r2, [r3, #0]
10008186:	f3bf 8f5b 	dmb	ish
}
1000818a:	bf00      	nop
1000818c:	3714      	adds	r7, #20
1000818e:	46bd      	mov	sp, r7
10008190:	f85d 7b04 	ldr.w	r7, [sp], #4
10008194:	4770      	bx	lr

10008196 <metal_mutex_init>:
{
10008196:	b580      	push	{r7, lr}
10008198:	b082      	sub	sp, #8
1000819a:	af00      	add	r7, sp, #0
1000819c:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000819e:	6878      	ldr	r0, [r7, #4]
100081a0:	f7ff ff9e 	bl	100080e0 <__metal_mutex_init>
}
100081a4:	bf00      	nop
100081a6:	3708      	adds	r7, #8
100081a8:	46bd      	mov	sp, r7
100081aa:	bd80      	pop	{r7, pc}

100081ac <metal_mutex_acquire>:
{
100081ac:	b580      	push	{r7, lr}
100081ae:	b082      	sub	sp, #8
100081b0:	af00      	add	r7, sp, #0
100081b2:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
100081b4:	6878      	ldr	r0, [r7, #4]
100081b6:	f7ff ffa9 	bl	1000810c <__metal_mutex_acquire>
}
100081ba:	bf00      	nop
100081bc:	3708      	adds	r7, #8
100081be:	46bd      	mov	sp, r7
100081c0:	bd80      	pop	{r7, pc}

100081c2 <metal_mutex_release>:
{
100081c2:	b580      	push	{r7, lr}
100081c4:	b082      	sub	sp, #8
100081c6:	af00      	add	r7, sp, #0
100081c8:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
100081ca:	6878      	ldr	r0, [r7, #4]
100081cc:	f7ff ffcd 	bl	1000816a <__metal_mutex_release>
}
100081d0:	bf00      	nop
100081d2:	3708      	adds	r7, #8
100081d4:	46bd      	mov	sp, r7
100081d6:	bd80      	pop	{r7, pc}

100081d8 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
100081d8:	b480      	push	{r7}
100081da:	b083      	sub	sp, #12
100081dc:	af00      	add	r7, sp, #0
100081de:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
100081e0:	687b      	ldr	r3, [r7, #4]
100081e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100081e4:	699b      	ldr	r3, [r3, #24]
}
100081e6:	4618      	mov	r0, r3
100081e8:	370c      	adds	r7, #12
100081ea:	46bd      	mov	sp, r7
100081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
100081f0:	4770      	bx	lr

100081f2 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
100081f2:	b580      	push	{r7, lr}
100081f4:	b082      	sub	sp, #8
100081f6:	af00      	add	r7, sp, #0
100081f8:	6078      	str	r0, [r7, #4]
100081fa:	460b      	mov	r3, r1
100081fc:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
100081fe:	687b      	ldr	r3, [r7, #4]
10008200:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008202:	6a1b      	ldr	r3, [r3, #32]
10008204:	685b      	ldr	r3, [r3, #4]
10008206:	687a      	ldr	r2, [r7, #4]
10008208:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000820a:	78f9      	ldrb	r1, [r7, #3]
1000820c:	4610      	mov	r0, r2
1000820e:	4798      	blx	r3
}
10008210:	bf00      	nop
10008212:	3708      	adds	r7, #8
10008214:	46bd      	mov	sp, r7
10008216:	bd80      	pop	{r7, pc}

10008218 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
10008218:	b580      	push	{r7, lr}
1000821a:	b082      	sub	sp, #8
1000821c:	af00      	add	r7, sp, #0
1000821e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
10008220:	687b      	ldr	r3, [r7, #4]
10008222:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008224:	6a1b      	ldr	r3, [r3, #32]
10008226:	681b      	ldr	r3, [r3, #0]
10008228:	687a      	ldr	r2, [r7, #4]
1000822a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000822c:	4610      	mov	r0, r2
1000822e:	4798      	blx	r3
10008230:	4603      	mov	r3, r0
}
10008232:	4618      	mov	r0, r3
10008234:	3708      	adds	r7, #8
10008236:	46bd      	mov	sp, r7
10008238:	bd80      	pop	{r7, pc}

1000823a <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000823a:	b580      	push	{r7, lr}
1000823c:	b082      	sub	sp, #8
1000823e:	af00      	add	r7, sp, #0
10008240:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
10008242:	687b      	ldr	r3, [r7, #4]
10008244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008246:	6a1b      	ldr	r3, [r3, #32]
10008248:	689b      	ldr	r3, [r3, #8]
1000824a:	687a      	ldr	r2, [r7, #4]
1000824c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000824e:	4610      	mov	r0, r2
10008250:	4798      	blx	r3
10008252:	4603      	mov	r3, r0
}
10008254:	4618      	mov	r0, r3
10008256:	3708      	adds	r7, #8
10008258:	46bd      	mov	sp, r7
1000825a:	bd80      	pop	{r7, pc}

1000825c <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000825c:	b580      	push	{r7, lr}
1000825e:	b086      	sub	sp, #24
10008260:	af02      	add	r7, sp, #8
10008262:	60f8      	str	r0, [r7, #12]
10008264:	60b9      	str	r1, [r7, #8]
10008266:	607a      	str	r2, [r7, #4]
10008268:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000826a:	68fb      	ldr	r3, [r7, #12]
1000826c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
1000826e:	68b9      	ldr	r1, [r7, #8]
10008270:	69bb      	ldr	r3, [r7, #24]
10008272:	9300      	str	r3, [sp, #0]
10008274:	683b      	ldr	r3, [r7, #0]
10008276:	687a      	ldr	r2, [r7, #4]
10008278:	f000 fcb6 	bl	10008be8 <virtio_create_virtqueues>
1000827c:	4603      	mov	r3, r0
					callbacks);
}
1000827e:	4618      	mov	r0, r3
10008280:	3710      	adds	r7, #16
10008282:	46bd      	mov	sp, r7
10008284:	bd80      	pop	{r7, pc}
	...

10008288 <rpmsg_initialize_ept>:
{
10008288:	b580      	push	{r7, lr}
1000828a:	b084      	sub	sp, #16
1000828c:	af00      	add	r7, sp, #0
1000828e:	60f8      	str	r0, [r7, #12]
10008290:	60b9      	str	r1, [r7, #8]
10008292:	607a      	str	r2, [r7, #4]
10008294:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10008296:	68f8      	ldr	r0, [r7, #12]
10008298:	68bb      	ldr	r3, [r7, #8]
1000829a:	2b00      	cmp	r3, #0
1000829c:	d001      	beq.n	100082a2 <rpmsg_initialize_ept+0x1a>
1000829e:	68bb      	ldr	r3, [r7, #8]
100082a0:	e000      	b.n	100082a4 <rpmsg_initialize_ept+0x1c>
100082a2:	4b0a      	ldr	r3, [pc, #40]	@ (100082cc <rpmsg_initialize_ept+0x44>)
100082a4:	2220      	movs	r2, #32
100082a6:	4619      	mov	r1, r3
100082a8:	f001 fc75 	bl	10009b96 <strncpy>
	ept->addr = src;
100082ac:	68fb      	ldr	r3, [r7, #12]
100082ae:	687a      	ldr	r2, [r7, #4]
100082b0:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
100082b2:	68fb      	ldr	r3, [r7, #12]
100082b4:	683a      	ldr	r2, [r7, #0]
100082b6:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
100082b8:	68fb      	ldr	r3, [r7, #12]
100082ba:	69ba      	ldr	r2, [r7, #24]
100082bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
100082be:	68fb      	ldr	r3, [r7, #12]
100082c0:	69fa      	ldr	r2, [r7, #28]
100082c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
100082c4:	bf00      	nop
100082c6:	3710      	adds	r7, #16
100082c8:	46bd      	mov	sp, r7
100082ca:	bd80      	pop	{r7, pc}
100082cc:	1000ad10 	.word	0x1000ad10

100082d0 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
100082d0:	b580      	push	{r7, lr}
100082d2:	b082      	sub	sp, #8
100082d4:	af00      	add	r7, sp, #0
100082d6:	6078      	str	r0, [r7, #4]
100082d8:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
100082da:	f04f 33ff 	mov.w	r3, #4294967295
100082de:	683a      	ldr	r2, [r7, #0]
100082e0:	2100      	movs	r1, #0
100082e2:	6878      	ldr	r0, [r7, #4]
100082e4:	f7ff fd9c 	bl	10007e20 <rpmsg_get_endpoint>
100082e8:	4603      	mov	r3, r0
}
100082ea:	4618      	mov	r0, r3
100082ec:	3708      	adds	r7, #8
100082ee:	46bd      	mov	sp, r7
100082f0:	bd80      	pop	{r7, pc}

100082f2 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
100082f2:	b480      	push	{r7}
100082f4:	b085      	sub	sp, #20
100082f6:	af00      	add	r7, sp, #0
100082f8:	60f8      	str	r0, [r7, #12]
100082fa:	60b9      	str	r1, [r7, #8]
100082fc:	607a      	str	r2, [r7, #4]
	if (!shpool)
100082fe:	68fb      	ldr	r3, [r7, #12]
10008300:	2b00      	cmp	r3, #0
10008302:	d009      	beq.n	10008318 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
10008304:	68fb      	ldr	r3, [r7, #12]
10008306:	68ba      	ldr	r2, [r7, #8]
10008308:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000830a:	68fb      	ldr	r3, [r7, #12]
1000830c:	687a      	ldr	r2, [r7, #4]
1000830e:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
10008310:	68fb      	ldr	r3, [r7, #12]
10008312:	687a      	ldr	r2, [r7, #4]
10008314:	605a      	str	r2, [r3, #4]
10008316:	e000      	b.n	1000831a <rpmsg_virtio_init_shm_pool+0x28>
		return;
10008318:	bf00      	nop
}
1000831a:	3714      	adds	r7, #20
1000831c:	46bd      	mov	sp, r7
1000831e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008322:	4770      	bx	lr

10008324 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10008324:	b580      	push	{r7, lr}
10008326:	b086      	sub	sp, #24
10008328:	af00      	add	r7, sp, #0
1000832a:	60f8      	str	r0, [r7, #12]
1000832c:	60b9      	str	r1, [r7, #8]
1000832e:	607a      	str	r2, [r7, #4]
10008330:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008332:	68f8      	ldr	r0, [r7, #12]
10008334:	f7ff ff50 	bl	100081d8 <rpmsg_virtio_get_role>
10008338:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000833a:	697b      	ldr	r3, [r7, #20]
1000833c:	2b01      	cmp	r3, #1
1000833e:	d106      	bne.n	1000834e <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
10008340:	68fb      	ldr	r3, [r7, #12]
10008342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008344:	8879      	ldrh	r1, [r7, #2]
10008346:	687a      	ldr	r2, [r7, #4]
10008348:	4618      	mov	r0, r3
1000834a:	f000 fe1f 	bl	10008f8c <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000834e:	bf00      	nop
10008350:	3718      	adds	r7, #24
10008352:	46bd      	mov	sp, r7
10008354:	bd80      	pop	{r7, pc}

10008356 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10008356:	b580      	push	{r7, lr}
10008358:	b086      	sub	sp, #24
1000835a:	af00      	add	r7, sp, #0
1000835c:	60f8      	str	r0, [r7, #12]
1000835e:	60b9      	str	r1, [r7, #8]
10008360:	607a      	str	r2, [r7, #4]
10008362:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008364:	68f8      	ldr	r0, [r7, #12]
10008366:	f7ff ff37 	bl	100081d8 <rpmsg_virtio_get_role>
1000836a:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000836c:	697b      	ldr	r3, [r7, #20]
1000836e:	2b01      	cmp	r3, #1
10008370:	d109      	bne.n	10008386 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
10008372:	68fb      	ldr	r3, [r7, #12]
10008374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008378:	8879      	ldrh	r1, [r7, #2]
1000837a:	687a      	ldr	r2, [r7, #4]
1000837c:	4618      	mov	r0, r3
1000837e:	f000 fe05 	bl	10008f8c <virtqueue_add_consumed_buffer>
10008382:	4603      	mov	r3, r0
10008384:	e000      	b.n	10008388 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
10008386:	2300      	movs	r3, #0
}
10008388:	4618      	mov	r0, r3
1000838a:	3718      	adds	r7, #24
1000838c:	46bd      	mov	sp, r7
1000838e:	bd80      	pop	{r7, pc}

10008390 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10008390:	b580      	push	{r7, lr}
10008392:	b086      	sub	sp, #24
10008394:	af00      	add	r7, sp, #0
10008396:	60f8      	str	r0, [r7, #12]
10008398:	60b9      	str	r1, [r7, #8]
1000839a:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000839c:	68f8      	ldr	r0, [r7, #12]
1000839e:	f7ff ff1b 	bl	100081d8 <rpmsg_virtio_get_role>
100083a2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
100083a4:	2300      	movs	r3, #0
100083a6:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100083a8:	693b      	ldr	r3, [r7, #16]
100083aa:	2b01      	cmp	r3, #1
100083ac:	d108      	bne.n	100083c0 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
100083ae:	68fb      	ldr	r3, [r7, #12]
100083b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100083b4:	68ba      	ldr	r2, [r7, #8]
100083b6:	6879      	ldr	r1, [r7, #4]
100083b8:	4618      	mov	r0, r3
100083ba:	f000 fd9f 	bl	10008efc <virtqueue_get_available_buffer>
100083be:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
100083c0:	697b      	ldr	r3, [r7, #20]
}
100083c2:	4618      	mov	r0, r3
100083c4:	3718      	adds	r7, #24
100083c6:	46bd      	mov	sp, r7
100083c8:	bd80      	pop	{r7, pc}

100083ca <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
100083ca:	b580      	push	{r7, lr}
100083cc:	b086      	sub	sp, #24
100083ce:	af00      	add	r7, sp, #0
100083d0:	60f8      	str	r0, [r7, #12]
100083d2:	60b9      	str	r1, [r7, #8]
100083d4:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100083d6:	68f8      	ldr	r0, [r7, #12]
100083d8:	f7ff fefe 	bl	100081d8 <rpmsg_virtio_get_role>
100083dc:	6138      	str	r0, [r7, #16]
	void *data = NULL;
100083de:	2300      	movs	r3, #0
100083e0:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100083e2:	693b      	ldr	r3, [r7, #16]
100083e4:	2b01      	cmp	r3, #1
100083e6:	d107      	bne.n	100083f8 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
100083e8:	68fb      	ldr	r3, [r7, #12]
100083ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100083ec:	68ba      	ldr	r2, [r7, #8]
100083ee:	6879      	ldr	r1, [r7, #4]
100083f0:	4618      	mov	r0, r3
100083f2:	f000 fd83 	bl	10008efc <virtqueue_get_available_buffer>
100083f6:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
100083f8:	697b      	ldr	r3, [r7, #20]
}
100083fa:	4618      	mov	r0, r3
100083fc:	3718      	adds	r7, #24
100083fe:	46bd      	mov	sp, r7
10008400:	bd80      	pop	{r7, pc}

10008402 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
10008402:	b580      	push	{r7, lr}
10008404:	b084      	sub	sp, #16
10008406:	af00      	add	r7, sp, #0
10008408:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000840a:	6878      	ldr	r0, [r7, #4]
1000840c:	f7ff ff04 	bl	10008218 <rpmsg_virtio_get_status>
10008410:	4603      	mov	r3, r0
10008412:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
10008414:	7bfb      	ldrb	r3, [r7, #15]
10008416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1000841a:	2b00      	cmp	r3, #0
1000841c:	d004      	beq.n	10008428 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000841e:	2100      	movs	r1, #0
10008420:	6878      	ldr	r0, [r7, #4]
10008422:	f7ff fee6 	bl	100081f2 <rpmsg_virtio_set_status>
10008426:	e7f0      	b.n	1000840a <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
10008428:	7bfb      	ldrb	r3, [r7, #15]
1000842a:	f003 0304 	and.w	r3, r3, #4
1000842e:	2b00      	cmp	r3, #0
10008430:	d0eb      	beq.n	1000840a <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
10008432:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
10008434:	4618      	mov	r0, r3
10008436:	3710      	adds	r7, #16
10008438:	46bd      	mov	sp, r7
1000843a:	bd80      	pop	{r7, pc}

1000843c <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000843c:	b480      	push	{r7}
1000843e:	b085      	sub	sp, #20
10008440:	af00      	add	r7, sp, #0
10008442:	6078      	str	r0, [r7, #4]
10008444:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10008446:	683b      	ldr	r3, [r7, #0]
10008448:	3b10      	subs	r3, #16
1000844a:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000844c:	68fb      	ldr	r3, [r7, #12]
1000844e:	689b      	ldr	r3, [r3, #8]
10008450:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
10008454:	68fb      	ldr	r3, [r7, #12]
10008456:	609a      	str	r2, [r3, #8]
}
10008458:	bf00      	nop
1000845a:	3714      	adds	r7, #20
1000845c:	46bd      	mov	sp, r7
1000845e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008462:	4770      	bx	lr

10008464 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
10008464:	b580      	push	{r7, lr}
10008466:	b086      	sub	sp, #24
10008468:	af00      	add	r7, sp, #0
1000846a:	6078      	str	r0, [r7, #4]
1000846c:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000846e:	687b      	ldr	r3, [r7, #4]
10008470:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10008472:	683b      	ldr	r3, [r7, #0]
10008474:	3b10      	subs	r3, #16
10008476:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
10008478:	693b      	ldr	r3, [r7, #16]
1000847a:	689b      	ldr	r3, [r3, #8]
1000847c:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000847e:	687b      	ldr	r3, [r7, #4]
10008480:	3358      	adds	r3, #88	@ 0x58
10008482:	4618      	mov	r0, r3
10008484:	f7ff fe92 	bl	100081ac <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
10008488:	697b      	ldr	r3, [r7, #20]
1000848a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1000848c:	89fa      	ldrh	r2, [r7, #14]
1000848e:	4611      	mov	r1, r2
10008490:	4618      	mov	r0, r3
10008492:	f000 fd21 	bl	10008ed8 <virtqueue_get_buffer_length>
10008496:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10008498:	89fb      	ldrh	r3, [r7, #14]
1000849a:	68ba      	ldr	r2, [r7, #8]
1000849c:	6939      	ldr	r1, [r7, #16]
1000849e:	6978      	ldr	r0, [r7, #20]
100084a0:	f7ff ff40 	bl	10008324 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
100084a4:	687b      	ldr	r3, [r7, #4]
100084a6:	3358      	adds	r3, #88	@ 0x58
100084a8:	4618      	mov	r0, r3
100084aa:	f7ff fe8a 	bl	100081c2 <metal_mutex_release>
}
100084ae:	bf00      	nop
100084b0:	3718      	adds	r7, #24
100084b2:	46bd      	mov	sp, r7
100084b4:	bd80      	pop	{r7, pc}

100084b6 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
100084b6:	b580      	push	{r7, lr}
100084b8:	b08a      	sub	sp, #40	@ 0x28
100084ba:	af00      	add	r7, sp, #0
100084bc:	60f8      	str	r0, [r7, #12]
100084be:	60b9      	str	r1, [r7, #8]
100084c0:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
100084c2:	68fb      	ldr	r3, [r7, #12]
100084c4:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
100084c6:	6a38      	ldr	r0, [r7, #32]
100084c8:	f7ff fea6 	bl	10008218 <rpmsg_virtio_get_status>
100084cc:	4603      	mov	r3, r0
100084ce:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
100084d0:	69fb      	ldr	r3, [r7, #28]
100084d2:	f003 0304 	and.w	r3, r3, #4
100084d6:	2b00      	cmp	r3, #0
100084d8:	d101      	bne.n	100084de <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
100084da:	2300      	movs	r3, #0
100084dc:	e039      	b.n	10008552 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
100084de:	687b      	ldr	r3, [r7, #4]
100084e0:	2b00      	cmp	r3, #0
100084e2:	d003      	beq.n	100084ec <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
100084e4:	f643 2398 	movw	r3, #15000	@ 0x3a98
100084e8:	627b      	str	r3, [r7, #36]	@ 0x24
100084ea:	e001      	b.n	100084f0 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
100084ec:	2300      	movs	r3, #0
100084ee:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
100084f0:	68fb      	ldr	r3, [r7, #12]
100084f2:	3358      	adds	r3, #88	@ 0x58
100084f4:	4618      	mov	r0, r3
100084f6:	f7ff fe59 	bl	100081ac <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
100084fa:	f107 0316 	add.w	r3, r7, #22
100084fe:	461a      	mov	r2, r3
10008500:	68b9      	ldr	r1, [r7, #8]
10008502:	6a38      	ldr	r0, [r7, #32]
10008504:	f7ff ff44 	bl	10008390 <rpmsg_virtio_get_tx_buffer>
10008508:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000850a:	68fb      	ldr	r3, [r7, #12]
1000850c:	3358      	adds	r3, #88	@ 0x58
1000850e:	4618      	mov	r0, r3
10008510:	f7ff fe57 	bl	100081c2 <metal_mutex_release>
		if (rp_hdr || !tick_count)
10008514:	69bb      	ldr	r3, [r7, #24]
10008516:	2b00      	cmp	r3, #0
10008518:	d10a      	bne.n	10008530 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000851c:	2b00      	cmp	r3, #0
1000851e:	d007      	beq.n	10008530 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
10008520:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10008524:	f7ff fda7 	bl	10008076 <metal_sleep_usec>
		tick_count--;
10008528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000852a:	3b01      	subs	r3, #1
1000852c:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
1000852e:	e7df      	b.n	100084f0 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
10008530:	69bb      	ldr	r3, [r7, #24]
10008532:	2b00      	cmp	r3, #0
10008534:	d101      	bne.n	1000853a <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
10008536:	2300      	movs	r3, #0
10008538:	e00b      	b.n	10008552 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000853a:	8afb      	ldrh	r3, [r7, #22]
1000853c:	461a      	mov	r2, r3
1000853e:	69bb      	ldr	r3, [r7, #24]
10008540:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
10008542:	68bb      	ldr	r3, [r7, #8]
10008544:	681b      	ldr	r3, [r3, #0]
10008546:	f1a3 0210 	sub.w	r2, r3, #16
1000854a:	68bb      	ldr	r3, [r7, #8]
1000854c:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000854e:	69bb      	ldr	r3, [r7, #24]
10008550:	3310      	adds	r3, #16
}
10008552:	4618      	mov	r0, r3
10008554:	3728      	adds	r7, #40	@ 0x28
10008556:	46bd      	mov	sp, r7
10008558:	bd80      	pop	{r7, pc}
	...

1000855c <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000855c:	b580      	push	{r7, lr}
1000855e:	b08e      	sub	sp, #56	@ 0x38
10008560:	af00      	add	r7, sp, #0
10008562:	60f8      	str	r0, [r7, #12]
10008564:	60b9      	str	r1, [r7, #8]
10008566:	607a      	str	r2, [r7, #4]
10008568:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000856a:	68fb      	ldr	r3, [r7, #12]
1000856c:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000856e:	683b      	ldr	r3, [r7, #0]
10008570:	3b10      	subs	r3, #16
10008572:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
10008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008576:	689b      	ldr	r3, [r3, #8]
10008578:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000857a:	687b      	ldr	r3, [r7, #4]
1000857c:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000857e:	68bb      	ldr	r3, [r7, #8]
10008580:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
10008582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10008584:	b29b      	uxth	r3, r3
10008586:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
10008588:	2300      	movs	r3, #0
1000858a:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
1000858c:	2300      	movs	r3, #0
1000858e:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
10008590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10008596:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
10008598:	6b39      	ldr	r1, [r7, #48]	@ 0x30
1000859a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000859c:	f7ff fd87 	bl	100080ae <metal_io_virt_to_offset>
100085a0:	4601      	mov	r1, r0
100085a2:	f107 0210 	add.w	r2, r7, #16
100085a6:	2310      	movs	r3, #16
100085a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
100085aa:	f7fe feb3 	bl	10007314 <metal_io_block_write>
100085ae:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
100085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100085b2:	2b10      	cmp	r3, #16
100085b4:	d006      	beq.n	100085c4 <rpmsg_virtio_send_offchannel_nocopy+0x68>
100085b6:	4b1b      	ldr	r3, [pc, #108]	@ (10008624 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
100085b8:	4a1b      	ldr	r2, [pc, #108]	@ (10008628 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
100085ba:	f240 117d 	movw	r1, #381	@ 0x17d
100085be:	481b      	ldr	r0, [pc, #108]	@ (1000862c <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
100085c0:	f001 f834 	bl	1000962c <__assert_func>

	metal_mutex_acquire(&rdev->lock);
100085c4:	68fb      	ldr	r3, [r7, #12]
100085c6:	3358      	adds	r3, #88	@ 0x58
100085c8:	4618      	mov	r0, r3
100085ca:	f7ff fdef 	bl	100081ac <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
100085ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100085d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100085d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
100085d6:	4611      	mov	r1, r2
100085d8:	4618      	mov	r0, r3
100085da:	f000 fc7d 	bl	10008ed8 <virtqueue_get_buffer_length>
100085de:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
100085e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
100085e2:	6a3a      	ldr	r2, [r7, #32]
100085e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
100085e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
100085e8:	f7ff feb5 	bl	10008356 <rpmsg_virtio_enqueue_buffer>
100085ec:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
100085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100085f0:	2b00      	cmp	r3, #0
100085f2:	d006      	beq.n	10008602 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
100085f4:	4b0e      	ldr	r3, [pc, #56]	@ (10008630 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
100085f6:	4a0c      	ldr	r2, [pc, #48]	@ (10008628 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
100085f8:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
100085fc:	480b      	ldr	r0, [pc, #44]	@ (1000862c <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
100085fe:	f001 f815 	bl	1000962c <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
10008602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008608:	4618      	mov	r0, r3
1000860a:	f000 fd39 	bl	10009080 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000860e:	68fb      	ldr	r3, [r7, #12]
10008610:	3358      	adds	r3, #88	@ 0x58
10008612:	4618      	mov	r0, r3
10008614:	f7ff fdd5 	bl	100081c2 <metal_mutex_release>

	return len;
10008618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
1000861a:	4618      	mov	r0, r3
1000861c:	3738      	adds	r7, #56	@ 0x38
1000861e:	46bd      	mov	sp, r7
10008620:	bd80      	pop	{r7, pc}
10008622:	bf00      	nop
10008624:	1000ad14 	.word	0x1000ad14
10008628:	1000ae64 	.word	0x1000ae64
1000862c:	1000ad30 	.word	0x1000ad30
10008630:	1000adac 	.word	0x1000adac

10008634 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
10008634:	b580      	push	{r7, lr}
10008636:	b08c      	sub	sp, #48	@ 0x30
10008638:	af02      	add	r7, sp, #8
1000863a:	60f8      	str	r0, [r7, #12]
1000863c:	60b9      	str	r1, [r7, #8]
1000863e:	607a      	str	r2, [r7, #4]
10008640:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008642:	68fb      	ldr	r3, [r7, #12]
10008644:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
10008646:	f107 0314 	add.w	r3, r7, #20
1000864a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000864c:	4619      	mov	r1, r3
1000864e:	68f8      	ldr	r0, [r7, #12]
10008650:	f7ff ff31 	bl	100084b6 <rpmsg_virtio_get_tx_payload_buffer>
10008654:	6238      	str	r0, [r7, #32]
	if (!buffer)
10008656:	6a3b      	ldr	r3, [r7, #32]
10008658:	2b00      	cmp	r3, #0
1000865a:	d101      	bne.n	10008660 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000865c:	4b17      	ldr	r3, [pc, #92]	@ (100086bc <rpmsg_virtio_send_offchannel_raw+0x88>)
1000865e:	e029      	b.n	100086b4 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
10008660:	697b      	ldr	r3, [r7, #20]
10008662:	461a      	mov	r2, r3
10008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008666:	4293      	cmp	r3, r2
10008668:	dd01      	ble.n	1000866e <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000866a:	697b      	ldr	r3, [r7, #20]
1000866c:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
1000866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10008674:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
10008676:	6a39      	ldr	r1, [r7, #32]
10008678:	69f8      	ldr	r0, [r7, #28]
1000867a:	f7ff fd18 	bl	100080ae <metal_io_virt_to_offset>
1000867e:	4601      	mov	r1, r0
10008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008682:	683a      	ldr	r2, [r7, #0]
10008684:	69f8      	ldr	r0, [r7, #28]
10008686:	f7fe fe45 	bl	10007314 <metal_io_block_write>
1000868a:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
1000868c:	69ba      	ldr	r2, [r7, #24]
1000868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008690:	429a      	cmp	r2, r3
10008692:	d006      	beq.n	100086a2 <rpmsg_virtio_send_offchannel_raw+0x6e>
10008694:	4b0a      	ldr	r3, [pc, #40]	@ (100086c0 <rpmsg_virtio_send_offchannel_raw+0x8c>)
10008696:	4a0b      	ldr	r2, [pc, #44]	@ (100086c4 <rpmsg_virtio_send_offchannel_raw+0x90>)
10008698:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
1000869c:	480a      	ldr	r0, [pc, #40]	@ (100086c8 <rpmsg_virtio_send_offchannel_raw+0x94>)
1000869e:	f000 ffc5 	bl	1000962c <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
100086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100086a4:	9300      	str	r3, [sp, #0]
100086a6:	6a3b      	ldr	r3, [r7, #32]
100086a8:	687a      	ldr	r2, [r7, #4]
100086aa:	68b9      	ldr	r1, [r7, #8]
100086ac:	68f8      	ldr	r0, [r7, #12]
100086ae:	f7ff ff55 	bl	1000855c <rpmsg_virtio_send_offchannel_nocopy>
100086b2:	4603      	mov	r3, r0
}
100086b4:	4618      	mov	r0, r3
100086b6:	3728      	adds	r7, #40	@ 0x28
100086b8:	46bd      	mov	sp, r7
100086ba:	bd80      	pop	{r7, pc}
100086bc:	fffff82e 	.word	0xfffff82e
100086c0:	1000adb8 	.word	0x1000adb8
100086c4:	1000ae88 	.word	0x1000ae88
100086c8:	1000ad30 	.word	0x1000ad30

100086cc <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
100086cc:	b480      	push	{r7}
100086ce:	b083      	sub	sp, #12
100086d0:	af00      	add	r7, sp, #0
100086d2:	6078      	str	r0, [r7, #4]
	(void)vq;
}
100086d4:	bf00      	nop
100086d6:	370c      	adds	r7, #12
100086d8:	46bd      	mov	sp, r7
100086da:	f85d 7b04 	ldr.w	r7, [sp], #4
100086de:	4770      	bx	lr

100086e0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
100086e0:	b590      	push	{r4, r7, lr}
100086e2:	b08d      	sub	sp, #52	@ 0x34
100086e4:	af02      	add	r7, sp, #8
100086e6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
100086e8:	687b      	ldr	r3, [r7, #4]
100086ea:	681b      	ldr	r3, [r3, #0]
100086ec:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
100086ee:	6a3b      	ldr	r3, [r7, #32]
100086f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100086f2:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
100086f4:	69fb      	ldr	r3, [r7, #28]
100086f6:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
100086f8:	69bb      	ldr	r3, [r7, #24]
100086fa:	3358      	adds	r3, #88	@ 0x58
100086fc:	4618      	mov	r0, r3
100086fe:	f7ff fd55 	bl	100081ac <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10008702:	f107 020a 	add.w	r2, r7, #10
10008706:	f107 030c 	add.w	r3, r7, #12
1000870a:	4619      	mov	r1, r3
1000870c:	69f8      	ldr	r0, [r7, #28]
1000870e:	f7ff fe5c 	bl	100083ca <rpmsg_virtio_get_rx_buffer>
10008712:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
10008714:	69bb      	ldr	r3, [r7, #24]
10008716:	3358      	adds	r3, #88	@ 0x58
10008718:	4618      	mov	r0, r3
1000871a:	f7ff fd52 	bl	100081c2 <metal_mutex_release>

	while (rp_hdr) {
1000871e:	e062      	b.n	100087e6 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
10008720:	897b      	ldrh	r3, [r7, #10]
10008722:	461a      	mov	r2, r3
10008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008726:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
10008728:	69bb      	ldr	r3, [r7, #24]
1000872a:	3358      	adds	r3, #88	@ 0x58
1000872c:	4618      	mov	r0, r3
1000872e:	f7ff fd3d 	bl	100081ac <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
10008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008734:	685b      	ldr	r3, [r3, #4]
10008736:	4619      	mov	r1, r3
10008738:	69b8      	ldr	r0, [r7, #24]
1000873a:	f7ff fdc9 	bl	100082d0 <rpmsg_get_ept_from_addr>
1000873e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
10008740:	69bb      	ldr	r3, [r7, #24]
10008742:	3358      	adds	r3, #88	@ 0x58
10008744:	4618      	mov	r0, r3
10008746:	f7ff fd3c 	bl	100081c2 <metal_mutex_release>

		if (ept) {
1000874a:	697b      	ldr	r3, [r7, #20]
1000874c:	2b00      	cmp	r3, #0
1000874e:	d025      	beq.n	1000879c <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10008750:	697b      	ldr	r3, [r7, #20]
10008752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008754:	f1b3 3fff 	cmp.w	r3, #4294967295
10008758:	d103      	bne.n	10008762 <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000875c:	681a      	ldr	r2, [r3, #0]
1000875e:	697b      	ldr	r3, [r7, #20]
10008760:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10008762:	697b      	ldr	r3, [r7, #20]
10008764:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
10008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008768:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000876e:	899b      	ldrh	r3, [r3, #12]
10008770:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10008772:	4618      	mov	r0, r3
10008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008776:	681a      	ldr	r2, [r3, #0]
10008778:	697b      	ldr	r3, [r7, #20]
1000877a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000877c:	9300      	str	r3, [sp, #0]
1000877e:	4613      	mov	r3, r2
10008780:	4602      	mov	r2, r0
10008782:	6978      	ldr	r0, [r7, #20]
10008784:	47a0      	blx	r4
10008786:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
10008788:	693b      	ldr	r3, [r7, #16]
1000878a:	2b00      	cmp	r3, #0
1000878c:	da06      	bge.n	1000879c <rpmsg_virtio_rx_callback+0xbc>
1000878e:	4b1a      	ldr	r3, [pc, #104]	@ (100087f8 <rpmsg_virtio_rx_callback+0x118>)
10008790:	4a1a      	ldr	r2, [pc, #104]	@ (100087fc <rpmsg_virtio_rx_callback+0x11c>)
10008792:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
10008796:	481a      	ldr	r0, [pc, #104]	@ (10008800 <rpmsg_virtio_rx_callback+0x120>)
10008798:	f000 ff48 	bl	1000962c <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
1000879c:	69bb      	ldr	r3, [r7, #24]
1000879e:	3358      	adds	r3, #88	@ 0x58
100087a0:	4618      	mov	r0, r3
100087a2:	f7ff fd03 	bl	100081ac <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
100087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100087a8:	689b      	ldr	r3, [r3, #8]
100087aa:	2b00      	cmp	r3, #0
100087ac:	db05      	blt.n	100087ba <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
100087ae:	68fa      	ldr	r2, [r7, #12]
100087b0:	897b      	ldrh	r3, [r7, #10]
100087b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100087b4:	69f8      	ldr	r0, [r7, #28]
100087b6:	f7ff fdb5 	bl	10008324 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
100087ba:	f107 020a 	add.w	r2, r7, #10
100087be:	f107 030c 	add.w	r3, r7, #12
100087c2:	4619      	mov	r1, r3
100087c4:	69f8      	ldr	r0, [r7, #28]
100087c6:	f7ff fe00 	bl	100083ca <rpmsg_virtio_get_rx_buffer>
100087ca:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
100087cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100087ce:	2b00      	cmp	r3, #0
100087d0:	d104      	bne.n	100087dc <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
100087d2:	69fb      	ldr	r3, [r7, #28]
100087d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100087d6:	4618      	mov	r0, r3
100087d8:	f000 fc52 	bl	10009080 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
100087dc:	69bb      	ldr	r3, [r7, #24]
100087de:	3358      	adds	r3, #88	@ 0x58
100087e0:	4618      	mov	r0, r3
100087e2:	f7ff fcee 	bl	100081c2 <metal_mutex_release>
	while (rp_hdr) {
100087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100087e8:	2b00      	cmp	r3, #0
100087ea:	d199      	bne.n	10008720 <rpmsg_virtio_rx_callback+0x40>
	}
}
100087ec:	bf00      	nop
100087ee:	bf00      	nop
100087f0:	372c      	adds	r7, #44	@ 0x2c
100087f2:	46bd      	mov	sp, r7
100087f4:	bd90      	pop	{r4, r7, pc}
100087f6:	bf00      	nop
100087f8:	1000adc8 	.word	0x1000adc8
100087fc:	1000aeac 	.word	0x1000aeac
10008800:	1000ad30 	.word	0x1000ad30

10008804 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
10008804:	b580      	push	{r7, lr}
10008806:	b092      	sub	sp, #72	@ 0x48
10008808:	af00      	add	r7, sp, #0
1000880a:	60f8      	str	r0, [r7, #12]
1000880c:	60b9      	str	r1, [r7, #8]
1000880e:	607a      	str	r2, [r7, #4]
10008810:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
10008812:	68fb      	ldr	r3, [r7, #12]
10008814:	6a1b      	ldr	r3, [r3, #32]
10008816:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
10008818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000881a:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000881c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000881e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
10008824:	68bb      	ldr	r3, [r7, #8]
10008826:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
10008828:	687b      	ldr	r3, [r7, #4]
1000882a:	2b28      	cmp	r3, #40	@ 0x28
1000882c:	d001      	beq.n	10008832 <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000882e:	2300      	movs	r3, #0
10008830:	e057      	b.n	100088e2 <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
10008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
10008834:	4619      	mov	r1, r3
10008836:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
10008838:	f7ff fc39 	bl	100080ae <metal_io_virt_to_offset>
1000883c:	4601      	mov	r1, r0
1000883e:	f107 0210 	add.w	r2, r7, #16
10008842:	2320      	movs	r3, #32
10008844:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
10008846:	f7fe fcf0 	bl	1000722a <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000884a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000884c:	6a1b      	ldr	r3, [r3, #32]
1000884e:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
10008850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008852:	3358      	adds	r3, #88	@ 0x58
10008854:	4618      	mov	r0, r3
10008856:	f7ff fca9 	bl	100081ac <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000885a:	f107 0110 	add.w	r1, r7, #16
1000885e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008860:	f04f 32ff 	mov.w	r2, #4294967295
10008864:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10008866:	f7ff fadb 	bl	10007e20 <rpmsg_get_endpoint>
1000886a:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000886c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008870:	f003 0301 	and.w	r3, r3, #1
10008874:	2b00      	cmp	r3, #0
10008876:	d017      	beq.n	100088a8 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
10008878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000887a:	2b00      	cmp	r3, #0
1000887c:	d003      	beq.n	10008886 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008880:	f04f 32ff 	mov.w	r2, #4294967295
10008884:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
10008886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008888:	3358      	adds	r3, #88	@ 0x58
1000888a:	4618      	mov	r0, r3
1000888c:	f7ff fc99 	bl	100081c2 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
10008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008892:	2b00      	cmp	r3, #0
10008894:	d024      	beq.n	100088e0 <rpmsg_virtio_ns_callback+0xdc>
10008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000889a:	2b00      	cmp	r3, #0
1000889c:	d020      	beq.n	100088e0 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000889e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100088a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100088a4:	4798      	blx	r3
100088a6:	e01b      	b.n	100088e0 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
100088a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088aa:	2b00      	cmp	r3, #0
100088ac:	d110      	bne.n	100088d0 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
100088ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100088b0:	3358      	adds	r3, #88	@ 0x58
100088b2:	4618      	mov	r0, r3
100088b4:	f7ff fc85 	bl	100081c2 <metal_mutex_release>
			if (rdev->ns_bind_cb)
100088b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100088ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100088bc:	2b00      	cmp	r3, #0
100088be:	d00f      	beq.n	100088e0 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
100088c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100088c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100088c4:	f107 0110 	add.w	r1, r7, #16
100088c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100088ca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
100088cc:	4798      	blx	r3
100088ce:	e007      	b.n	100088e0 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
100088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100088d4:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
100088d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100088d8:	3358      	adds	r3, #88	@ 0x58
100088da:	4618      	mov	r0, r3
100088dc:	f7ff fc71 	bl	100081c2 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
100088e0:	2300      	movs	r3, #0
}
100088e2:	4618      	mov	r0, r3
100088e4:	3748      	adds	r7, #72	@ 0x48
100088e6:	46bd      	mov	sp, r7
100088e8:	bd80      	pop	{r7, pc}
	...

100088ec <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
100088ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
100088f0:	b090      	sub	sp, #64	@ 0x40
100088f2:	af02      	add	r7, sp, #8
100088f4:	60f8      	str	r0, [r7, #12]
100088f6:	60b9      	str	r1, [r7, #8]
100088f8:	607a      	str	r2, [r7, #4]
100088fa:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
100088fc:	68fb      	ldr	r3, [r7, #12]
100088fe:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
10008900:	2278      	movs	r2, #120	@ 0x78
10008902:	2100      	movs	r1, #0
10008904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10008906:	f001 f92c 	bl	10009b62 <memset>
	metal_mutex_init(&rdev->lock);
1000890a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000890c:	3358      	adds	r3, #88	@ 0x58
1000890e:	4618      	mov	r0, r3
10008910:	f7ff fc41 	bl	10008196 <metal_mutex_init>
	rvdev->vdev = vdev;
10008914:	68fb      	ldr	r3, [r7, #12]
10008916:	68ba      	ldr	r2, [r7, #8]
10008918:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000891c:	687a      	ldr	r2, [r7, #4]
1000891e:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
10008920:	68bb      	ldr	r3, [r7, #8]
10008922:	68fa      	ldr	r2, [r7, #12]
10008924:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
10008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008928:	4a4d      	ldr	r2, [pc, #308]	@ (10008a60 <rpmsg_init_vdev+0x174>)
1000892a:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000892c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000892e:	4a4d      	ldr	r2, [pc, #308]	@ (10008a64 <rpmsg_init_vdev+0x178>)
10008930:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
10008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008934:	4a4c      	ldr	r2, [pc, #304]	@ (10008a68 <rpmsg_init_vdev+0x17c>)
10008936:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
10008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000893a:	4a4c      	ldr	r2, [pc, #304]	@ (10008a6c <rpmsg_init_vdev+0x180>)
1000893c:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008940:	4a4b      	ldr	r2, [pc, #300]	@ (10008a70 <rpmsg_init_vdev+0x184>)
10008942:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
10008944:	68f8      	ldr	r0, [r7, #12]
10008946:	f7ff fc47 	bl	100081d8 <rpmsg_virtio_get_role>
1000894a:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000894e:	2b01      	cmp	r3, #1
10008950:	d102      	bne.n	10008958 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
10008952:	68f8      	ldr	r0, [r7, #12]
10008954:	f7ff fd55 	bl	10008402 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
10008958:	68f8      	ldr	r0, [r7, #12]
1000895a:	f7ff fc6e 	bl	1000823a <rpmsg_virtio_get_features>
1000895e:	4603      	mov	r3, r0
10008960:	2200      	movs	r2, #0
10008962:	4698      	mov	r8, r3
10008964:	4691      	mov	r9, r2
10008966:	68bb      	ldr	r3, [r7, #8]
10008968:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
1000896c:	68bb      	ldr	r3, [r7, #8]
1000896e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
10008972:	f002 0401 	and.w	r4, r2, #1
10008976:	2500      	movs	r5, #0
10008978:	ea44 0305 	orr.w	r3, r4, r5
1000897c:	2b00      	cmp	r3, #0
1000897e:	bf14      	ite	ne
10008980:	2301      	movne	r3, #1
10008982:	2300      	moveq	r3, #0
10008984:	b2da      	uxtb	r2, r3
10008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008988:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000898e:	2b01      	cmp	r3, #1
10008990:	d113      	bne.n	100089ba <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
10008992:	4b38      	ldr	r3, [pc, #224]	@ (10008a74 <rpmsg_init_vdev+0x188>)
10008994:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
10008996:	4b38      	ldr	r3, [pc, #224]	@ (10008a78 <rpmsg_init_vdev+0x18c>)
10008998:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000899a:	4b38      	ldr	r3, [pc, #224]	@ (10008a7c <rpmsg_init_vdev+0x190>)
1000899c:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
1000899e:	4b38      	ldr	r3, [pc, #224]	@ (10008a80 <rpmsg_init_vdev+0x194>)
100089a0:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
100089a2:	68bb      	ldr	r3, [r7, #8]
100089a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100089a6:	3318      	adds	r3, #24
100089a8:	681a      	ldr	r2, [r3, #0]
100089aa:	68fb      	ldr	r3, [r7, #12]
100089ac:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
100089ae:	68bb      	ldr	r3, [r7, #8]
100089b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100089b2:	681a      	ldr	r2, [r3, #0]
100089b4:	68fb      	ldr	r3, [r7, #12]
100089b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
100089ba:	68fb      	ldr	r3, [r7, #12]
100089bc:	683a      	ldr	r2, [r7, #0]
100089be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
100089c2:	f107 021c 	add.w	r2, r7, #28
100089c6:	f107 0314 	add.w	r3, r7, #20
100089ca:	9300      	str	r3, [sp, #0]
100089cc:	4613      	mov	r3, r2
100089ce:	2202      	movs	r2, #2
100089d0:	2100      	movs	r1, #0
100089d2:	68f8      	ldr	r0, [r7, #12]
100089d4:	f7ff fc42 	bl	1000825c <rpmsg_virtio_create_virtqueues>
100089d8:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
100089da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100089dc:	2b00      	cmp	r3, #0
100089de:	d001      	beq.n	100089e4 <rpmsg_init_vdev+0xf8>
		return status;
100089e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100089e2:	e037      	b.n	10008a54 <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
100089e4:	68fb      	ldr	r3, [r7, #12]
100089e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100089ea:	4618      	mov	r0, r3
100089ec:	f000 fb10 	bl	10009010 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
100089f0:	2300      	movs	r3, #0
100089f2:	637b      	str	r3, [r7, #52]	@ 0x34
100089f4:	e00f      	b.n	10008a16 <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
100089f6:	68bb      	ldr	r3, [r7, #8]
100089f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100089fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100089fc:	4613      	mov	r3, r2
100089fe:	005b      	lsls	r3, r3, #1
10008a00:	4413      	add	r3, r2
10008a02:	00db      	lsls	r3, r3, #3
10008a04:	440b      	add	r3, r1
10008a06:	681b      	ldr	r3, [r3, #0]
10008a08:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
10008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008a0c:	683a      	ldr	r2, [r7, #0]
10008a0e:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10008a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008a12:	3301      	adds	r3, #1
10008a14:	637b      	str	r3, [r7, #52]	@ 0x34
10008a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008a18:	2b01      	cmp	r3, #1
10008a1a:	d9ec      	bls.n	100089f6 <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
10008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008a1e:	4618      	mov	r0, r3
10008a20:	f7ff fb35 	bl	1000808e <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
10008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008a26:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10008a2a:	2b00      	cmp	r3, #0
10008a2c:	d011      	beq.n	10008a52 <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
10008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008a30:	f103 0008 	add.w	r0, r3, #8
10008a34:	2300      	movs	r3, #0
10008a36:	9301      	str	r3, [sp, #4]
10008a38:	4b12      	ldr	r3, [pc, #72]	@ (10008a84 <rpmsg_init_vdev+0x198>)
10008a3a:	9300      	str	r3, [sp, #0]
10008a3c:	2335      	movs	r3, #53	@ 0x35
10008a3e:	2235      	movs	r2, #53	@ 0x35
10008a40:	4911      	ldr	r1, [pc, #68]	@ (10008a88 <rpmsg_init_vdev+0x19c>)
10008a42:	f7ff fc21 	bl	10008288 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
10008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008a48:	3308      	adds	r3, #8
10008a4a:	4619      	mov	r1, r3
10008a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10008a4e:	f7ff fa72 	bl	10007f36 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
10008a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
10008a54:	4618      	mov	r0, r3
10008a56:	3738      	adds	r7, #56	@ 0x38
10008a58:	46bd      	mov	sp, r7
10008a5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
10008a5e:	bf00      	nop
10008a60:	10008635 	.word	0x10008635
10008a64:	1000843d 	.word	0x1000843d
10008a68:	10008465 	.word	0x10008465
10008a6c:	100084b7 	.word	0x100084b7
10008a70:	1000855d 	.word	0x1000855d
10008a74:	1000add4 	.word	0x1000add4
10008a78:	1000addc 	.word	0x1000addc
10008a7c:	100086cd 	.word	0x100086cd
10008a80:	100086e1 	.word	0x100086e1
10008a84:	10008805 	.word	0x10008805
10008a88:	1000ade4 	.word	0x1000ade4

10008a8c <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
10008a8c:	b480      	push	{r7}
10008a8e:	b083      	sub	sp, #12
10008a90:	af00      	add	r7, sp, #0
10008a92:	6078      	str	r0, [r7, #4]
10008a94:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10008a96:	bf00      	nop
10008a98:	370c      	adds	r7, #12
10008a9a:	46bd      	mov	sp, r7
10008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
10008aa0:	4770      	bx	lr

10008aa2 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
10008aa2:	b480      	push	{r7}
10008aa4:	b083      	sub	sp, #12
10008aa6:	af00      	add	r7, sp, #0
10008aa8:	6078      	str	r0, [r7, #4]
10008aaa:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10008aac:	bf00      	nop
10008aae:	370c      	adds	r7, #12
10008ab0:	46bd      	mov	sp, r7
10008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
10008ab6:	4770      	bx	lr

10008ab8 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
10008ab8:	b480      	push	{r7}
10008aba:	b085      	sub	sp, #20
10008abc:	af00      	add	r7, sp, #0
10008abe:	60f8      	str	r0, [r7, #12]
10008ac0:	60b9      	str	r1, [r7, #8]
10008ac2:	607a      	str	r2, [r7, #4]
10008ac4:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
10008ac6:	68fb      	ldr	r3, [r7, #12]
}
10008ac8:	4618      	mov	r0, r3
10008aca:	3714      	adds	r7, #20
10008acc:	46bd      	mov	sp, r7
10008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
10008ad2:	4770      	bx	lr

10008ad4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
10008ad4:	b580      	push	{r7, lr}
10008ad6:	b086      	sub	sp, #24
10008ad8:	af02      	add	r7, sp, #8
10008ada:	60f8      	str	r0, [r7, #12]
10008adc:	60b9      	str	r1, [r7, #8]
10008ade:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
10008ae0:	68fb      	ldr	r3, [r7, #12]
10008ae2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10008ae4:	68fb      	ldr	r3, [r7, #12]
10008ae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10008ae8:	2301      	movs	r3, #1
10008aea:	9301      	str	r3, [sp, #4]
10008aec:	687b      	ldr	r3, [r7, #4]
10008aee:	9300      	str	r3, [sp, #0]
10008af0:	68bb      	ldr	r3, [r7, #8]
10008af2:	68f8      	ldr	r0, [r7, #12]
10008af4:	f7ff f93a 	bl	10007d6c <rpmsg_send_offchannel_raw>
10008af8:	4603      	mov	r3, r0
					 len, true);
}
10008afa:	4618      	mov	r0, r3
10008afc:	3710      	adds	r7, #16
10008afe:	46bd      	mov	sp, r7
10008b00:	bd80      	pop	{r7, pc}

10008b02 <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
10008b02:	b580      	push	{r7, lr}
10008b04:	b086      	sub	sp, #24
10008b06:	af00      	add	r7, sp, #0
10008b08:	60f8      	str	r0, [r7, #12]
10008b0a:	60b9      	str	r1, [r7, #8]
10008b0c:	607a      	str	r2, [r7, #4]
10008b0e:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
10008b10:	68fb      	ldr	r3, [r7, #12]
10008b12:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
10008b14:	697b      	ldr	r3, [r7, #20]
10008b16:	68ba      	ldr	r2, [r7, #8]
10008b18:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxXferSize = len;
10008b1a:	687b      	ldr	r3, [r7, #4]
10008b1c:	b29a      	uxth	r2, r3
10008b1e:	697b      	ldr	r3, [r7, #20]
10008b20:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  if (huart->RxCpltCallback != NULL) {
10008b24:	697b      	ldr	r3, [r7, #20]
10008b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10008b28:	2b00      	cmp	r3, #0
10008b2a:	d003      	beq.n	10008b34 <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
10008b2c:	697b      	ldr	r3, [r7, #20]
10008b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10008b30:	6978      	ldr	r0, [r7, #20]
10008b32:	4798      	blx	r3
  }

  return 0;
10008b34:	2300      	movs	r3, #0
}
10008b36:	4618      	mov	r0, r3
10008b38:	3718      	adds	r7, #24
10008b3a:	46bd      	mov	sp, r7
10008b3c:	bd80      	pop	{r7, pc}
	...

10008b40 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
10008b40:	b580      	push	{r7, lr}
10008b42:	b086      	sub	sp, #24
10008b44:	af02      	add	r7, sp, #8
10008b46:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
10008b48:	6878      	ldr	r0, [r7, #4]
10008b4a:	2300      	movs	r3, #0
10008b4c:	9300      	str	r3, [sp, #0]
10008b4e:	4b08      	ldr	r3, [pc, #32]	@ (10008b70 <VIRT_UART_Init+0x30>)
10008b50:	f04f 32ff 	mov.w	r2, #4294967295
10008b54:	4907      	ldr	r1, [pc, #28]	@ (10008b74 <VIRT_UART_Init+0x34>)
10008b56:	f000 fd2b 	bl	100095b0 <OPENAMP_create_endpoint>
10008b5a:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
10008b5c:	68fb      	ldr	r3, [r7, #12]
10008b5e:	2b00      	cmp	r3, #0
10008b60:	da01      	bge.n	10008b66 <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
10008b62:	2301      	movs	r3, #1
10008b64:	e000      	b.n	10008b68 <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
10008b66:	2300      	movs	r3, #0
}
10008b68:	4618      	mov	r0, r3
10008b6a:	3710      	adds	r7, #16
10008b6c:	46bd      	mov	sp, r7
10008b6e:	bd80      	pop	{r7, pc}
10008b70:	10008b03 	.word	0x10008b03
10008b74:	1000ade8 	.word	0x1000ade8

10008b78 <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
10008b78:	b480      	push	{r7}
10008b7a:	b087      	sub	sp, #28
10008b7c:	af00      	add	r7, sp, #0
10008b7e:	60f8      	str	r0, [r7, #12]
10008b80:	460b      	mov	r3, r1
10008b82:	607a      	str	r2, [r7, #4]
10008b84:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
10008b86:	2300      	movs	r3, #0
10008b88:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
10008b8a:	7afb      	ldrb	r3, [r7, #11]
10008b8c:	2b00      	cmp	r3, #0
10008b8e:	d103      	bne.n	10008b98 <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
10008b90:	68fb      	ldr	r3, [r7, #12]
10008b92:	687a      	ldr	r2, [r7, #4]
10008b94:	64da      	str	r2, [r3, #76]	@ 0x4c
    break;
10008b96:	e002      	b.n	10008b9e <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
10008b98:	2301      	movs	r3, #1
10008b9a:	75fb      	strb	r3, [r7, #23]
    break;
10008b9c:	bf00      	nop
  }
  return status;
10008b9e:	7dfb      	ldrb	r3, [r7, #23]
}
10008ba0:	4618      	mov	r0, r3
10008ba2:	371c      	adds	r7, #28
10008ba4:	46bd      	mov	sp, r7
10008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
10008baa:	4770      	bx	lr

10008bac <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
10008bac:	b580      	push	{r7, lr}
10008bae:	b086      	sub	sp, #24
10008bb0:	af00      	add	r7, sp, #0
10008bb2:	60f8      	str	r0, [r7, #12]
10008bb4:	60b9      	str	r1, [r7, #8]
10008bb6:	4613      	mov	r3, r2
10008bb8:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
10008bba:	88fb      	ldrh	r3, [r7, #6]
10008bbc:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
10008bc0:	d901      	bls.n	10008bc6 <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
10008bc2:	2301      	movs	r3, #1
10008bc4:	e00c      	b.n	10008be0 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
10008bc6:	68fb      	ldr	r3, [r7, #12]
10008bc8:	88fa      	ldrh	r2, [r7, #6]
10008bca:	68b9      	ldr	r1, [r7, #8]
10008bcc:	4618      	mov	r0, r3
10008bce:	f7ff ff81 	bl	10008ad4 <rpmsg_send>
10008bd2:	6178      	str	r0, [r7, #20]
	if (res <0) {
10008bd4:	697b      	ldr	r3, [r7, #20]
10008bd6:	2b00      	cmp	r3, #0
10008bd8:	da01      	bge.n	10008bde <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
10008bda:	2301      	movs	r3, #1
10008bdc:	e000      	b.n	10008be0 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
10008bde:	2300      	movs	r3, #0
}
10008be0:	4618      	mov	r0, r3
10008be2:	3718      	adds	r7, #24
10008be4:	46bd      	mov	sp, r7
10008be6:	bd80      	pop	{r7, pc}

10008be8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10008be8:	b590      	push	{r4, r7, lr}
10008bea:	b08f      	sub	sp, #60	@ 0x3c
10008bec:	af04      	add	r7, sp, #16
10008bee:	60f8      	str	r0, [r7, #12]
10008bf0:	60b9      	str	r1, [r7, #8]
10008bf2:	607a      	str	r2, [r7, #4]
10008bf4:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
10008bf6:	68fb      	ldr	r3, [r7, #12]
10008bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008bfa:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
10008bfc:	687a      	ldr	r2, [r7, #4]
10008bfe:	6a3b      	ldr	r3, [r7, #32]
10008c00:	429a      	cmp	r2, r3
10008c02:	d901      	bls.n	10008c08 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
10008c04:	4b1e      	ldr	r3, [pc, #120]	@ (10008c80 <virtio_create_virtqueues+0x98>)
10008c06:	e036      	b.n	10008c76 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10008c08:	2300      	movs	r3, #0
10008c0a:	627b      	str	r3, [r7, #36]	@ 0x24
10008c0c:	e02e      	b.n	10008c6c <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
10008c0e:	68fb      	ldr	r3, [r7, #12]
10008c10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10008c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008c14:	4613      	mov	r3, r2
10008c16:	005b      	lsls	r3, r3, #1
10008c18:	4413      	add	r3, r2
10008c1a:	00db      	lsls	r3, r3, #3
10008c1c:	440b      	add	r3, r1
10008c1e:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
10008c20:	69fb      	ldr	r3, [r7, #28]
10008c22:	3304      	adds	r3, #4
10008c24:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008c28:	b298      	uxth	r0, r3
10008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008c2c:	009b      	lsls	r3, r3, #2
10008c2e:	683a      	ldr	r2, [r7, #0]
10008c30:	4413      	add	r3, r2
10008c32:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
10008c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008c36:	009b      	lsls	r3, r3, #2
10008c38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10008c3a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008c3c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
10008c3e:	68fa      	ldr	r2, [r7, #12]
10008c40:	6a12      	ldr	r2, [r2, #32]
10008c42:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008c44:	69f9      	ldr	r1, [r7, #28]
10008c46:	6809      	ldr	r1, [r1, #0]
10008c48:	9102      	str	r1, [sp, #8]
10008c4a:	9201      	str	r2, [sp, #4]
10008c4c:	9300      	str	r3, [sp, #0]
10008c4e:	69bb      	ldr	r3, [r7, #24]
10008c50:	4622      	mov	r2, r4
10008c52:	4601      	mov	r1, r0
10008c54:	68f8      	ldr	r0, [r7, #12]
10008c56:	f000 f90e 	bl	10008e76 <virtqueue_create>
10008c5a:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
10008c5c:	697b      	ldr	r3, [r7, #20]
10008c5e:	2b00      	cmp	r3, #0
10008c60:	d001      	beq.n	10008c66 <virtio_create_virtqueues+0x7e>
			return ret;
10008c62:	697b      	ldr	r3, [r7, #20]
10008c64:	e007      	b.n	10008c76 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
10008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008c68:	3301      	adds	r3, #1
10008c6a:	627b      	str	r3, [r7, #36]	@ 0x24
10008c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008c6e:	687b      	ldr	r3, [r7, #4]
10008c70:	429a      	cmp	r2, r3
10008c72:	d3cc      	bcc.n	10008c0e <virtio_create_virtqueues+0x26>
	}
	return 0;
10008c74:	2300      	movs	r3, #0
}
10008c76:	4618      	mov	r0, r3
10008c78:	372c      	adds	r7, #44	@ 0x2c
10008c7a:	46bd      	mov	sp, r7
10008c7c:	bd90      	pop	{r4, r7, pc}
10008c7e:	bf00      	nop
10008c80:	fffff440 	.word	0xfffff440

10008c84 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
10008c84:	b480      	push	{r7}
10008c86:	b085      	sub	sp, #20
10008c88:	af00      	add	r7, sp, #0
10008c8a:	60f8      	str	r0, [r7, #12]
10008c8c:	60b9      	str	r1, [r7, #8]
10008c8e:	607a      	str	r2, [r7, #4]
10008c90:	603b      	str	r3, [r7, #0]
	vr->num = num;
10008c92:	68fb      	ldr	r3, [r7, #12]
10008c94:	68ba      	ldr	r2, [r7, #8]
10008c96:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
10008c98:	68fb      	ldr	r3, [r7, #12]
10008c9a:	687a      	ldr	r2, [r7, #4]
10008c9c:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
10008c9e:	68bb      	ldr	r3, [r7, #8]
10008ca0:	011b      	lsls	r3, r3, #4
10008ca2:	687a      	ldr	r2, [r7, #4]
10008ca4:	441a      	add	r2, r3
10008ca6:	68fb      	ldr	r3, [r7, #12]
10008ca8:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
10008caa:	68fb      	ldr	r3, [r7, #12]
10008cac:	689a      	ldr	r2, [r3, #8]
10008cae:	68bb      	ldr	r3, [r7, #8]
10008cb0:	005b      	lsls	r3, r3, #1
10008cb2:	4413      	add	r3, r2
10008cb4:	3304      	adds	r3, #4
10008cb6:	461a      	mov	r2, r3
10008cb8:	683b      	ldr	r3, [r7, #0]
10008cba:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
10008cbc:	1c5a      	adds	r2, r3, #1
10008cbe:	683b      	ldr	r3, [r7, #0]
10008cc0:	425b      	negs	r3, r3
10008cc2:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
10008cc4:	461a      	mov	r2, r3
10008cc6:	68fb      	ldr	r3, [r7, #12]
10008cc8:	60da      	str	r2, [r3, #12]
}
10008cca:	bf00      	nop
10008ccc:	3714      	adds	r7, #20
10008cce:	46bd      	mov	sp, r7
10008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
10008cd4:	4770      	bx	lr

10008cd6 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
10008cd6:	b480      	push	{r7}
10008cd8:	b083      	sub	sp, #12
10008cda:	af00      	add	r7, sp, #0
10008cdc:	4603      	mov	r3, r0
10008cde:	80fb      	strh	r3, [r7, #6]
10008ce0:	460b      	mov	r3, r1
10008ce2:	80bb      	strh	r3, [r7, #4]
10008ce4:	4613      	mov	r3, r2
10008ce6:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
10008ce8:	88ba      	ldrh	r2, [r7, #4]
10008cea:	88fb      	ldrh	r3, [r7, #6]
10008cec:	1ad3      	subs	r3, r2, r3
10008cee:	b29b      	uxth	r3, r3
10008cf0:	3b01      	subs	r3, #1
10008cf2:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
10008cf4:	88b9      	ldrh	r1, [r7, #4]
10008cf6:	887b      	ldrh	r3, [r7, #2]
10008cf8:	1acb      	subs	r3, r1, r3
10008cfa:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10008cfc:	429a      	cmp	r2, r3
10008cfe:	bf34      	ite	cc
10008d00:	2301      	movcc	r3, #1
10008d02:	2300      	movcs	r3, #0
10008d04:	b2db      	uxtb	r3, r3
}
10008d06:	4618      	mov	r0, r3
10008d08:	370c      	adds	r7, #12
10008d0a:	46bd      	mov	sp, r7
10008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
10008d10:	4770      	bx	lr

10008d12 <metal_io_virt>:
{
10008d12:	b480      	push	{r7}
10008d14:	b083      	sub	sp, #12
10008d16:	af00      	add	r7, sp, #0
10008d18:	6078      	str	r0, [r7, #4]
10008d1a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10008d1c:	687b      	ldr	r3, [r7, #4]
10008d1e:	681b      	ldr	r3, [r3, #0]
		: NULL);
10008d20:	f1b3 3fff 	cmp.w	r3, #4294967295
10008d24:	d00a      	beq.n	10008d3c <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10008d26:	687b      	ldr	r3, [r7, #4]
10008d28:	689b      	ldr	r3, [r3, #8]
10008d2a:	683a      	ldr	r2, [r7, #0]
10008d2c:	429a      	cmp	r2, r3
10008d2e:	d205      	bcs.n	10008d3c <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10008d30:	687b      	ldr	r3, [r7, #4]
10008d32:	681b      	ldr	r3, [r3, #0]
10008d34:	461a      	mov	r2, r3
10008d36:	683b      	ldr	r3, [r7, #0]
10008d38:	4413      	add	r3, r2
		: NULL);
10008d3a:	e000      	b.n	10008d3e <metal_io_virt+0x2c>
10008d3c:	2300      	movs	r3, #0
}
10008d3e:	4618      	mov	r0, r3
10008d40:	370c      	adds	r7, #12
10008d42:	46bd      	mov	sp, r7
10008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
10008d48:	4770      	bx	lr

10008d4a <metal_io_phys>:
{
10008d4a:	b580      	push	{r7, lr}
10008d4c:	b084      	sub	sp, #16
10008d4e:	af00      	add	r7, sp, #0
10008d50:	6078      	str	r0, [r7, #4]
10008d52:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
10008d54:	687b      	ldr	r3, [r7, #4]
10008d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008d58:	2b00      	cmp	r3, #0
10008d5a:	d123      	bne.n	10008da4 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
10008d5c:	687b      	ldr	r3, [r7, #4]
10008d5e:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
10008d60:	2b1f      	cmp	r3, #31
10008d62:	d805      	bhi.n	10008d70 <metal_io_phys+0x26>
10008d64:	687b      	ldr	r3, [r7, #4]
10008d66:	68db      	ldr	r3, [r3, #12]
10008d68:	683a      	ldr	r2, [r7, #0]
10008d6a:	fa22 f303 	lsr.w	r3, r2, r3
10008d6e:	e000      	b.n	10008d72 <metal_io_phys+0x28>
10008d70:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
10008d72:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
10008d74:	687b      	ldr	r3, [r7, #4]
10008d76:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
10008d78:	2b00      	cmp	r3, #0
10008d7a:	d010      	beq.n	10008d9e <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
10008d7c:	687b      	ldr	r3, [r7, #4]
10008d7e:	689b      	ldr	r3, [r3, #8]
10008d80:	683a      	ldr	r2, [r7, #0]
10008d82:	429a      	cmp	r2, r3
10008d84:	d20b      	bcs.n	10008d9e <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
10008d86:	687b      	ldr	r3, [r7, #4]
10008d88:	685a      	ldr	r2, [r3, #4]
10008d8a:	68fb      	ldr	r3, [r7, #12]
10008d8c:	009b      	lsls	r3, r3, #2
10008d8e:	4413      	add	r3, r2
10008d90:	681a      	ldr	r2, [r3, #0]
10008d92:	687b      	ldr	r3, [r7, #4]
10008d94:	6919      	ldr	r1, [r3, #16]
10008d96:	683b      	ldr	r3, [r7, #0]
10008d98:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
10008d9a:	4413      	add	r3, r2
10008d9c:	e008      	b.n	10008db0 <metal_io_phys+0x66>
10008d9e:	f04f 33ff 	mov.w	r3, #4294967295
10008da2:	e005      	b.n	10008db0 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
10008da4:	687b      	ldr	r3, [r7, #4]
10008da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008da8:	6839      	ldr	r1, [r7, #0]
10008daa:	6878      	ldr	r0, [r7, #4]
10008dac:	4798      	blx	r3
10008dae:	4603      	mov	r3, r0
}
10008db0:	4618      	mov	r0, r3
10008db2:	3710      	adds	r7, #16
10008db4:	46bd      	mov	sp, r7
10008db6:	bd80      	pop	{r7, pc}

10008db8 <metal_io_phys_to_offset>:
{
10008db8:	b580      	push	{r7, lr}
10008dba:	b084      	sub	sp, #16
10008dbc:	af00      	add	r7, sp, #0
10008dbe:	6078      	str	r0, [r7, #4]
10008dc0:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
10008dc2:	687b      	ldr	r3, [r7, #4]
10008dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10008dc6:	2b00      	cmp	r3, #0
10008dc8:	d127      	bne.n	10008e1a <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
10008dca:	687b      	ldr	r3, [r7, #4]
10008dcc:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10008dce:	f1b3 3fff 	cmp.w	r3, #4294967295
10008dd2:	d105      	bne.n	10008de0 <metal_io_phys_to_offset+0x28>
10008dd4:	687b      	ldr	r3, [r7, #4]
10008dd6:	685b      	ldr	r3, [r3, #4]
10008dd8:	681b      	ldr	r3, [r3, #0]
10008dda:	683a      	ldr	r2, [r7, #0]
10008ddc:	1ad3      	subs	r3, r2, r3
10008dde:	e003      	b.n	10008de8 <metal_io_phys_to_offset+0x30>
10008de0:	687b      	ldr	r3, [r7, #4]
10008de2:	691a      	ldr	r2, [r3, #16]
10008de4:	683b      	ldr	r3, [r7, #0]
10008de6:	4013      	ands	r3, r2
		unsigned long offset =
10008de8:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
10008dea:	68f9      	ldr	r1, [r7, #12]
10008dec:	6878      	ldr	r0, [r7, #4]
10008dee:	f7ff ffac 	bl	10008d4a <metal_io_phys>
10008df2:	4602      	mov	r2, r0
10008df4:	683b      	ldr	r3, [r7, #0]
10008df6:	4293      	cmp	r3, r2
10008df8:	d101      	bne.n	10008dfe <metal_io_phys_to_offset+0x46>
				return offset;
10008dfa:	68fb      	ldr	r3, [r7, #12]
10008dfc:	e013      	b.n	10008e26 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10008dfe:	687b      	ldr	r3, [r7, #4]
10008e00:	691a      	ldr	r2, [r3, #16]
10008e02:	68fb      	ldr	r3, [r7, #12]
10008e04:	4413      	add	r3, r2
10008e06:	3301      	adds	r3, #1
10008e08:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
10008e0a:	687b      	ldr	r3, [r7, #4]
10008e0c:	689b      	ldr	r3, [r3, #8]
10008e0e:	68fa      	ldr	r2, [r7, #12]
10008e10:	429a      	cmp	r2, r3
10008e12:	d3ea      	bcc.n	10008dea <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
10008e14:	f04f 33ff 	mov.w	r3, #4294967295
10008e18:	e005      	b.n	10008e26 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
10008e1a:	687b      	ldr	r3, [r7, #4]
10008e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10008e1e:	6839      	ldr	r1, [r7, #0]
10008e20:	6878      	ldr	r0, [r7, #4]
10008e22:	4798      	blx	r3
10008e24:	4603      	mov	r3, r0
}
10008e26:	4618      	mov	r0, r3
10008e28:	3710      	adds	r7, #16
10008e2a:	46bd      	mov	sp, r7
10008e2c:	bd80      	pop	{r7, pc}

10008e2e <metal_io_phys_to_virt>:
{
10008e2e:	b580      	push	{r7, lr}
10008e30:	b082      	sub	sp, #8
10008e32:	af00      	add	r7, sp, #0
10008e34:	6078      	str	r0, [r7, #4]
10008e36:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
10008e38:	6839      	ldr	r1, [r7, #0]
10008e3a:	6878      	ldr	r0, [r7, #4]
10008e3c:	f7ff ffbc 	bl	10008db8 <metal_io_phys_to_offset>
10008e40:	4603      	mov	r3, r0
10008e42:	4619      	mov	r1, r3
10008e44:	6878      	ldr	r0, [r7, #4]
10008e46:	f7ff ff64 	bl	10008d12 <metal_io_virt>
10008e4a:	4603      	mov	r3, r0
}
10008e4c:	4618      	mov	r0, r3
10008e4e:	3708      	adds	r7, #8
10008e50:	46bd      	mov	sp, r7
10008e52:	bd80      	pop	{r7, pc}

10008e54 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
10008e54:	b580      	push	{r7, lr}
10008e56:	b084      	sub	sp, #16
10008e58:	af00      	add	r7, sp, #0
10008e5a:	6078      	str	r0, [r7, #4]
10008e5c:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
10008e5e:	687b      	ldr	r3, [r7, #4]
10008e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008e62:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
10008e64:	6839      	ldr	r1, [r7, #0]
10008e66:	68f8      	ldr	r0, [r7, #12]
10008e68:	f7ff ffe1 	bl	10008e2e <metal_io_phys_to_virt>
10008e6c:	4603      	mov	r3, r0
}
10008e6e:	4618      	mov	r0, r3
10008e70:	3710      	adds	r7, #16
10008e72:	46bd      	mov	sp, r7
10008e74:	bd80      	pop	{r7, pc}

10008e76 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
10008e76:	b580      	push	{r7, lr}
10008e78:	b086      	sub	sp, #24
10008e7a:	af00      	add	r7, sp, #0
10008e7c:	60f8      	str	r0, [r7, #12]
10008e7e:	607a      	str	r2, [r7, #4]
10008e80:	603b      	str	r3, [r7, #0]
10008e82:	460b      	mov	r3, r1
10008e84:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
10008e86:	2300      	movs	r3, #0
10008e88:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
10008e8a:	697b      	ldr	r3, [r7, #20]
10008e8c:	2b00      	cmp	r3, #0
10008e8e:	d11e      	bne.n	10008ece <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
10008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008e92:	68fa      	ldr	r2, [r7, #12]
10008e94:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
10008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008e98:	687a      	ldr	r2, [r7, #4]
10008e9a:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
10008e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008e9e:	897a      	ldrh	r2, [r7, #10]
10008ea0:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
10008ea2:	683b      	ldr	r3, [r7, #0]
10008ea4:	891a      	ldrh	r2, [r3, #8]
10008ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008ea8:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
10008eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008eac:	895a      	ldrh	r2, [r3, #10]
10008eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008eb0:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
10008eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008eb4:	6a3a      	ldr	r2, [r7, #32]
10008eb6:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
10008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008ebc:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
10008ebe:	683b      	ldr	r3, [r7, #0]
10008ec0:	6819      	ldr	r1, [r3, #0]
10008ec2:	683b      	ldr	r3, [r7, #0]
10008ec4:	685b      	ldr	r3, [r3, #4]
10008ec6:	461a      	mov	r2, r3
10008ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10008eca:	f000 f8ef 	bl	100090ac <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
10008ece:	697b      	ldr	r3, [r7, #20]
}
10008ed0:	4618      	mov	r0, r3
10008ed2:	3718      	adds	r7, #24
10008ed4:	46bd      	mov	sp, r7
10008ed6:	bd80      	pop	{r7, pc}

10008ed8 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
10008ed8:	b480      	push	{r7}
10008eda:	b083      	sub	sp, #12
10008edc:	af00      	add	r7, sp, #0
10008ede:	6078      	str	r0, [r7, #4]
10008ee0:	460b      	mov	r3, r1
10008ee2:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
10008ee4:	687b      	ldr	r3, [r7, #4]
10008ee6:	699a      	ldr	r2, [r3, #24]
10008ee8:	887b      	ldrh	r3, [r7, #2]
10008eea:	011b      	lsls	r3, r3, #4
10008eec:	4413      	add	r3, r2
10008eee:	689b      	ldr	r3, [r3, #8]
}
10008ef0:	4618      	mov	r0, r3
10008ef2:	370c      	adds	r7, #12
10008ef4:	46bd      	mov	sp, r7
10008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
10008efa:	4770      	bx	lr

10008efc <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10008efc:	b580      	push	{r7, lr}
10008efe:	b086      	sub	sp, #24
10008f00:	af00      	add	r7, sp, #0
10008f02:	60f8      	str	r0, [r7, #12]
10008f04:	60b9      	str	r1, [r7, #8]
10008f06:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10008f08:	2300      	movs	r3, #0
10008f0a:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10008f0c:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10008f10:	68fb      	ldr	r3, [r7, #12]
10008f12:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10008f14:	68fb      	ldr	r3, [r7, #12]
10008f16:	69db      	ldr	r3, [r3, #28]
10008f18:	885b      	ldrh	r3, [r3, #2]
10008f1a:	b29b      	uxth	r3, r3
10008f1c:	429a      	cmp	r2, r3
10008f1e:	d101      	bne.n	10008f24 <virtqueue_get_available_buffer+0x28>
		return NULL;
10008f20:	2300      	movs	r3, #0
10008f22:	e02f      	b.n	10008f84 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
10008f24:	68fb      	ldr	r3, [r7, #12]
10008f26:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
10008f28:	1c5a      	adds	r2, r3, #1
10008f2a:	b291      	uxth	r1, r2
10008f2c:	68fa      	ldr	r2, [r7, #12]
10008f2e:	8611      	strh	r1, [r2, #48]	@ 0x30
10008f30:	b21a      	sxth	r2, r3
10008f32:	68fb      	ldr	r3, [r7, #12]
10008f34:	895b      	ldrh	r3, [r3, #10]
10008f36:	3b01      	subs	r3, #1
10008f38:	b29b      	uxth	r3, r3
10008f3a:	b21b      	sxth	r3, r3
10008f3c:	4013      	ands	r3, r2
10008f3e:	b21b      	sxth	r3, r3
10008f40:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
10008f42:	68fb      	ldr	r3, [r7, #12]
10008f44:	69da      	ldr	r2, [r3, #28]
10008f46:	8afb      	ldrh	r3, [r7, #22]
10008f48:	005b      	lsls	r3, r3, #1
10008f4a:	4413      	add	r3, r2
10008f4c:	889b      	ldrh	r3, [r3, #4]
10008f4e:	b29a      	uxth	r2, r3
10008f50:	68bb      	ldr	r3, [r7, #8]
10008f52:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
10008f54:	68fb      	ldr	r3, [r7, #12]
10008f56:	699a      	ldr	r2, [r3, #24]
10008f58:	68bb      	ldr	r3, [r7, #8]
10008f5a:	881b      	ldrh	r3, [r3, #0]
10008f5c:	011b      	lsls	r3, r3, #4
10008f5e:	18d1      	adds	r1, r2, r3
10008f60:	680a      	ldr	r2, [r1, #0]
10008f62:	684b      	ldr	r3, [r1, #4]
10008f64:	4613      	mov	r3, r2
10008f66:	4619      	mov	r1, r3
10008f68:	68f8      	ldr	r0, [r7, #12]
10008f6a:	f7ff ff73 	bl	10008e54 <virtqueue_phys_to_virt>
10008f6e:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
10008f70:	68fb      	ldr	r3, [r7, #12]
10008f72:	699a      	ldr	r2, [r3, #24]
10008f74:	68bb      	ldr	r3, [r7, #8]
10008f76:	881b      	ldrh	r3, [r3, #0]
10008f78:	011b      	lsls	r3, r3, #4
10008f7a:	4413      	add	r3, r2
10008f7c:	689a      	ldr	r2, [r3, #8]
10008f7e:	687b      	ldr	r3, [r7, #4]
10008f80:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
10008f82:	693b      	ldr	r3, [r7, #16]
}
10008f84:	4618      	mov	r0, r3
10008f86:	3718      	adds	r7, #24
10008f88:	46bd      	mov	sp, r7
10008f8a:	bd80      	pop	{r7, pc}

10008f8c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
10008f8c:	b480      	push	{r7}
10008f8e:	b087      	sub	sp, #28
10008f90:	af00      	add	r7, sp, #0
10008f92:	60f8      	str	r0, [r7, #12]
10008f94:	460b      	mov	r3, r1
10008f96:	607a      	str	r2, [r7, #4]
10008f98:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
10008f9a:	2300      	movs	r3, #0
10008f9c:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
10008f9e:	68fb      	ldr	r3, [r7, #12]
10008fa0:	895b      	ldrh	r3, [r3, #10]
10008fa2:	897a      	ldrh	r2, [r7, #10]
10008fa4:	429a      	cmp	r2, r3
10008fa6:	d901      	bls.n	10008fac <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
10008fa8:	4b18      	ldr	r3, [pc, #96]	@ (1000900c <virtqueue_add_consumed_buffer+0x80>)
10008faa:	e029      	b.n	10009000 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10008fac:	68fb      	ldr	r3, [r7, #12]
10008fae:	6a1b      	ldr	r3, [r3, #32]
10008fb0:	885b      	ldrh	r3, [r3, #2]
10008fb2:	b29b      	uxth	r3, r3
10008fb4:	b21a      	sxth	r2, r3
10008fb6:	68fb      	ldr	r3, [r7, #12]
10008fb8:	895b      	ldrh	r3, [r3, #10]
10008fba:	3b01      	subs	r3, #1
10008fbc:	b29b      	uxth	r3, r3
10008fbe:	b21b      	sxth	r3, r3
10008fc0:	4013      	ands	r3, r2
10008fc2:	b21b      	sxth	r3, r3
10008fc4:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
10008fc6:	68fb      	ldr	r3, [r7, #12]
10008fc8:	6a1a      	ldr	r2, [r3, #32]
10008fca:	8a7b      	ldrh	r3, [r7, #18]
10008fcc:	00db      	lsls	r3, r3, #3
10008fce:	4413      	add	r3, r2
10008fd0:	3304      	adds	r3, #4
10008fd2:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
10008fd4:	897a      	ldrh	r2, [r7, #10]
10008fd6:	697b      	ldr	r3, [r7, #20]
10008fd8:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
10008fda:	697b      	ldr	r3, [r7, #20]
10008fdc:	687a      	ldr	r2, [r7, #4]
10008fde:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10008fe0:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
10008fe4:	68fb      	ldr	r3, [r7, #12]
10008fe6:	6a1b      	ldr	r3, [r3, #32]
10008fe8:	885a      	ldrh	r2, [r3, #2]
10008fea:	b292      	uxth	r2, r2
10008fec:	3201      	adds	r2, #1
10008fee:	b292      	uxth	r2, r2
10008ff0:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
10008ff2:	68fb      	ldr	r3, [r7, #12]
10008ff4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10008ff6:	3301      	adds	r3, #1
10008ff8:	b29a      	uxth	r2, r3
10008ffa:	68fb      	ldr	r3, [r7, #12]
10008ffc:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10008ffe:	2300      	movs	r3, #0
}
10009000:	4618      	mov	r0, r3
10009002:	371c      	adds	r7, #28
10009004:	46bd      	mov	sp, r7
10009006:	f85d 7b04 	ldr.w	r7, [sp], #4
1000900a:	4770      	bx	lr
1000900c:	fffff441 	.word	0xfffff441

10009010 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10009010:	b480      	push	{r7}
10009012:	b083      	sub	sp, #12
10009014:	af00      	add	r7, sp, #0
10009016:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10009018:	6879      	ldr	r1, [r7, #4]
1000901a:	6809      	ldr	r1, [r1, #0]
1000901c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10009020:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10009024:	2300      	movs	r3, #0
10009026:	4313      	orrs	r3, r2
10009028:	d015      	beq.n	10009056 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000902a:	687b      	ldr	r3, [r7, #4]
1000902c:	681b      	ldr	r3, [r3, #0]
1000902e:	699b      	ldr	r3, [r3, #24]
10009030:	2b01      	cmp	r3, #1
10009032:	d11f      	bne.n	10009074 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
10009034:	687b      	ldr	r3, [r7, #4]
10009036:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10009038:	687b      	ldr	r3, [r7, #4]
1000903a:	895b      	ldrh	r3, [r3, #10]
1000903c:	1ad3      	subs	r3, r2, r3
1000903e:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
10009040:	687b      	ldr	r3, [r7, #4]
10009042:	6a1a      	ldr	r2, [r3, #32]
10009044:	687b      	ldr	r3, [r7, #4]
10009046:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
10009048:	3901      	subs	r1, #1
1000904a:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
1000904c:	00db      	lsls	r3, r3, #3
1000904e:	4413      	add	r3, r2
10009050:	460a      	mov	r2, r1
10009052:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
10009054:	e00e      	b.n	10009074 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10009056:	687b      	ldr	r3, [r7, #4]
10009058:	681b      	ldr	r3, [r3, #0]
1000905a:	699b      	ldr	r3, [r3, #24]
1000905c:	2b01      	cmp	r3, #1
1000905e:	d109      	bne.n	10009074 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
10009060:	687b      	ldr	r3, [r7, #4]
10009062:	6a1b      	ldr	r3, [r3, #32]
10009064:	881b      	ldrh	r3, [r3, #0]
10009066:	b29a      	uxth	r2, r3
10009068:	687b      	ldr	r3, [r7, #4]
1000906a:	6a1b      	ldr	r3, [r3, #32]
1000906c:	f042 0201 	orr.w	r2, r2, #1
10009070:	b292      	uxth	r2, r2
10009072:	801a      	strh	r2, [r3, #0]
}
10009074:	bf00      	nop
10009076:	370c      	adds	r7, #12
10009078:	46bd      	mov	sp, r7
1000907a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000907e:	4770      	bx	lr

10009080 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
10009080:	b580      	push	{r7, lr}
10009082:	b082      	sub	sp, #8
10009084:	af00      	add	r7, sp, #0
10009086:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
10009088:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
1000908c:	6878      	ldr	r0, [r7, #4]
1000908e:	f000 f835 	bl	100090fc <vq_ring_must_notify>
10009092:	4603      	mov	r3, r0
10009094:	2b00      	cmp	r3, #0
10009096:	d002      	beq.n	1000909e <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
10009098:	6878      	ldr	r0, [r7, #4]
1000909a:	f000 f87d 	bl	10009198 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
1000909e:	687b      	ldr	r3, [r7, #4]
100090a0:	2200      	movs	r2, #0
100090a2:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
100090a4:	bf00      	nop
100090a6:	3708      	adds	r7, #8
100090a8:	46bd      	mov	sp, r7
100090aa:	bd80      	pop	{r7, pc}

100090ac <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
100090ac:	b580      	push	{r7, lr}
100090ae:	b086      	sub	sp, #24
100090b0:	af00      	add	r7, sp, #0
100090b2:	60f8      	str	r0, [r7, #12]
100090b4:	60b9      	str	r1, [r7, #8]
100090b6:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
100090b8:	68fb      	ldr	r3, [r7, #12]
100090ba:	895b      	ldrh	r3, [r3, #10]
100090bc:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
100090be:	68fb      	ldr	r3, [r7, #12]
100090c0:	3314      	adds	r3, #20
100090c2:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
100090c4:	6979      	ldr	r1, [r7, #20]
100090c6:	687b      	ldr	r3, [r7, #4]
100090c8:	68ba      	ldr	r2, [r7, #8]
100090ca:	6938      	ldr	r0, [r7, #16]
100090cc:	f7ff fdda 	bl	10008c84 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
100090d0:	bf00      	nop
100090d2:	3718      	adds	r7, #24
100090d4:	46bd      	mov	sp, r7
100090d6:	bd80      	pop	{r7, pc}

100090d8 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
100090d8:	b580      	push	{r7, lr}
100090da:	b082      	sub	sp, #8
100090dc:	af00      	add	r7, sp, #0
100090de:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
100090e0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
100090e4:	687b      	ldr	r3, [r7, #4]
100090e6:	68db      	ldr	r3, [r3, #12]
100090e8:	2b00      	cmp	r3, #0
100090ea:	d003      	beq.n	100090f4 <virtqueue_notification+0x1c>
		vq->callback(vq);
100090ec:	687b      	ldr	r3, [r7, #4]
100090ee:	68db      	ldr	r3, [r3, #12]
100090f0:	6878      	ldr	r0, [r7, #4]
100090f2:	4798      	blx	r3
}
100090f4:	bf00      	nop
100090f6:	3708      	adds	r7, #8
100090f8:	46bd      	mov	sp, r7
100090fa:	bd80      	pop	{r7, pc}

100090fc <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
100090fc:	b580      	push	{r7, lr}
100090fe:	b084      	sub	sp, #16
10009100:	af00      	add	r7, sp, #0
10009102:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10009104:	6879      	ldr	r1, [r7, #4]
10009106:	6809      	ldr	r1, [r1, #0]
10009108:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000910c:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10009110:	2300      	movs	r3, #0
10009112:	4313      	orrs	r3, r2
10009114:	d02a      	beq.n	1000916c <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10009116:	687b      	ldr	r3, [r7, #4]
10009118:	681b      	ldr	r3, [r3, #0]
1000911a:	699b      	ldr	r3, [r3, #24]
1000911c:	2b01      	cmp	r3, #1
1000911e:	d136      	bne.n	1000918e <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
10009120:	687b      	ldr	r3, [r7, #4]
10009122:	6a1b      	ldr	r3, [r3, #32]
10009124:	789a      	ldrb	r2, [r3, #2]
10009126:	78db      	ldrb	r3, [r3, #3]
10009128:	021b      	lsls	r3, r3, #8
1000912a:	4313      	orrs	r3, r2
1000912c:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000912e:	687b      	ldr	r3, [r7, #4]
10009130:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10009132:	89fa      	ldrh	r2, [r7, #14]
10009134:	1ad3      	subs	r3, r2, r3
10009136:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
10009138:	687b      	ldr	r3, [r7, #4]
1000913a:	69da      	ldr	r2, [r3, #28]
1000913c:	687b      	ldr	r3, [r7, #4]
1000913e:	6959      	ldr	r1, [r3, #20]
10009140:	004b      	lsls	r3, r1, #1
10009142:	4413      	add	r3, r2
10009144:	7918      	ldrb	r0, [r3, #4]
10009146:	004b      	lsls	r3, r1, #1
10009148:	4413      	add	r3, r2
1000914a:	795b      	ldrb	r3, [r3, #5]
1000914c:	021b      	lsls	r3, r3, #8
1000914e:	4303      	orrs	r3, r0
10009150:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
10009152:	89ba      	ldrh	r2, [r7, #12]
10009154:	89f9      	ldrh	r1, [r7, #14]
10009156:	897b      	ldrh	r3, [r7, #10]
10009158:	4618      	mov	r0, r3
1000915a:	f7ff fdbc 	bl	10008cd6 <vring_need_event>
1000915e:	4603      	mov	r3, r0
						prev_idx) != 0;
10009160:	2b00      	cmp	r3, #0
10009162:	bf14      	ite	ne
10009164:	2301      	movne	r3, #1
10009166:	2300      	moveq	r3, #0
10009168:	b2db      	uxtb	r3, r3
1000916a:	e011      	b.n	10009190 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000916c:	687b      	ldr	r3, [r7, #4]
1000916e:	681b      	ldr	r3, [r3, #0]
10009170:	699b      	ldr	r3, [r3, #24]
10009172:	2b01      	cmp	r3, #1
10009174:	d10b      	bne.n	1000918e <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
10009176:	687b      	ldr	r3, [r7, #4]
10009178:	69db      	ldr	r3, [r3, #28]
1000917a:	881b      	ldrh	r3, [r3, #0]
1000917c:	b29b      	uxth	r3, r3
1000917e:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
10009182:	2b00      	cmp	r3, #0
10009184:	bf0c      	ite	eq
10009186:	2301      	moveq	r3, #1
10009188:	2300      	movne	r3, #0
1000918a:	b2db      	uxtb	r3, r3
1000918c:	e000      	b.n	10009190 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000918e:	2300      	movs	r3, #0
}
10009190:	4618      	mov	r0, r3
10009192:	3710      	adds	r7, #16
10009194:	46bd      	mov	sp, r7
10009196:	bd80      	pop	{r7, pc}

10009198 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
10009198:	b580      	push	{r7, lr}
1000919a:	b082      	sub	sp, #8
1000919c:	af00      	add	r7, sp, #0
1000919e:	6078      	str	r0, [r7, #4]
	if (vq->notify)
100091a0:	687b      	ldr	r3, [r7, #4]
100091a2:	691b      	ldr	r3, [r3, #16]
100091a4:	2b00      	cmp	r3, #0
100091a6:	d003      	beq.n	100091b0 <vq_ring_notify+0x18>
		vq->notify(vq);
100091a8:	687b      	ldr	r3, [r7, #4]
100091aa:	691b      	ldr	r3, [r3, #16]
100091ac:	6878      	ldr	r0, [r7, #4]
100091ae:	4798      	blx	r3
}
100091b0:	bf00      	nop
100091b2:	3708      	adds	r7, #8
100091b4:	46bd      	mov	sp, r7
100091b6:	bd80      	pop	{r7, pc}

100091b8 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
100091b8:	b580      	push	{r7, lr}
100091ba:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
100091bc:	4b0d      	ldr	r3, [pc, #52]	@ (100091f4 <MAILBOX_Init+0x3c>)
100091be:	2201      	movs	r2, #1
100091c0:	2100      	movs	r1, #0
100091c2:	480d      	ldr	r0, [pc, #52]	@ (100091f8 <MAILBOX_Init+0x40>)
100091c4:	f7f8 f85e 	bl	10001284 <HAL_IPCC_ActivateNotification>
100091c8:	4603      	mov	r3, r0
100091ca:	2b00      	cmp	r3, #0
100091cc:	d002      	beq.n	100091d4 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
100091ce:	f04f 33ff 	mov.w	r3, #4294967295
100091d2:	e00c      	b.n	100091ee <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
100091d4:	4b09      	ldr	r3, [pc, #36]	@ (100091fc <MAILBOX_Init+0x44>)
100091d6:	2201      	movs	r2, #1
100091d8:	2101      	movs	r1, #1
100091da:	4807      	ldr	r0, [pc, #28]	@ (100091f8 <MAILBOX_Init+0x40>)
100091dc:	f7f8 f852 	bl	10001284 <HAL_IPCC_ActivateNotification>
100091e0:	4603      	mov	r3, r0
100091e2:	2b00      	cmp	r3, #0
100091e4:	d002      	beq.n	100091ec <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
100091e6:	f04f 33ff 	mov.w	r3, #4294967295
100091ea:	e000      	b.n	100091ee <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
100091ec:	2300      	movs	r3, #0
}
100091ee:	4618      	mov	r0, r3
100091f0:	bd80      	pop	{r7, pc}
100091f2:	bf00      	nop
100091f4:	100092b9 	.word	0x100092b9
100091f8:	100201e8 	.word	0x100201e8
100091fc:	100092e5 	.word	0x100092e5

10009200 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
10009200:	b580      	push	{r7, lr}
10009202:	b084      	sub	sp, #16
10009204:	af00      	add	r7, sp, #0
10009206:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
10009208:	f04f 33ff 	mov.w	r3, #4294967295
1000920c:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
1000920e:	4b0f      	ldr	r3, [pc, #60]	@ (1000924c <MAILBOX_Poll+0x4c>)
10009210:	681b      	ldr	r3, [r3, #0]
10009212:	2b02      	cmp	r3, #2
10009214:	d108      	bne.n	10009228 <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
10009216:	2100      	movs	r1, #0
10009218:	6878      	ldr	r0, [r7, #4]
1000921a:	f7fe fb96 	bl	1000794a <rproc_virtio_notified>
    ret = 0;
1000921e:	2300      	movs	r3, #0
10009220:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
10009222:	4b0a      	ldr	r3, [pc, #40]	@ (1000924c <MAILBOX_Poll+0x4c>)
10009224:	2200      	movs	r2, #0
10009226:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
10009228:	4b09      	ldr	r3, [pc, #36]	@ (10009250 <MAILBOX_Poll+0x50>)
1000922a:	681b      	ldr	r3, [r3, #0]
1000922c:	2b01      	cmp	r3, #1
1000922e:	d108      	bne.n	10009242 <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
10009230:	2101      	movs	r1, #1
10009232:	6878      	ldr	r0, [r7, #4]
10009234:	f7fe fb89 	bl	1000794a <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
10009238:	4b05      	ldr	r3, [pc, #20]	@ (10009250 <MAILBOX_Poll+0x50>)
1000923a:	2200      	movs	r2, #0
1000923c:	601a      	str	r2, [r3, #0]

    ret = 0;
1000923e:	2300      	movs	r3, #0
10009240:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
10009242:	68fb      	ldr	r3, [r7, #12]
}
10009244:	4618      	mov	r0, r3
10009246:	3710      	adds	r7, #16
10009248:	46bd      	mov	sp, r7
1000924a:	bd80      	pop	{r7, pc}
1000924c:	1002049c 	.word	0x1002049c
10009250:	100204a0 	.word	0x100204a0

10009254 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
10009254:	b580      	push	{r7, lr}
10009256:	b084      	sub	sp, #16
10009258:	af00      	add	r7, sp, #0
1000925a:	6078      	str	r0, [r7, #4]
1000925c:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
1000925e:	683b      	ldr	r3, [r7, #0]
10009260:	2b00      	cmp	r3, #0
10009262:	d102      	bne.n	1000926a <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
10009264:	2300      	movs	r3, #0
10009266:	60fb      	str	r3, [r7, #12]
10009268:	e008      	b.n	1000927c <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
1000926a:	683b      	ldr	r3, [r7, #0]
1000926c:	2b01      	cmp	r3, #1
1000926e:	d102      	bne.n	10009276 <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10009270:	2301      	movs	r3, #1
10009272:	60fb      	str	r3, [r7, #12]
10009274:	e002      	b.n	1000927c <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
10009276:	f04f 33ff 	mov.w	r3, #4294967295
1000927a:	e016      	b.n	100092aa <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000927c:	2200      	movs	r2, #0
1000927e:	68f9      	ldr	r1, [r7, #12]
10009280:	480c      	ldr	r0, [pc, #48]	@ (100092b4 <MAILBOX_Notify+0x60>)
10009282:	f7f8 f84d 	bl	10001320 <HAL_IPCC_GetChannelStatus>
10009286:	4603      	mov	r3, r0
10009288:	2b01      	cmp	r3, #1
1000928a:	d108      	bne.n	1000929e <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000928c:	bf00      	nop
1000928e:	2200      	movs	r2, #0
10009290:	68f9      	ldr	r1, [r7, #12]
10009292:	4808      	ldr	r0, [pc, #32]	@ (100092b4 <MAILBOX_Notify+0x60>)
10009294:	f7f8 f844 	bl	10001320 <HAL_IPCC_GetChannelStatus>
10009298:	4603      	mov	r3, r0
1000929a:	2b01      	cmp	r3, #1
1000929c:	d0f7      	beq.n	1000928e <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000929e:	2200      	movs	r2, #0
100092a0:	68f9      	ldr	r1, [r7, #12]
100092a2:	4804      	ldr	r0, [pc, #16]	@ (100092b4 <MAILBOX_Notify+0x60>)
100092a4:	f7f8 f870 	bl	10001388 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
100092a8:	2300      	movs	r3, #0
}
100092aa:	4618      	mov	r0, r3
100092ac:	3710      	adds	r7, #16
100092ae:	46bd      	mov	sp, r7
100092b0:	bd80      	pop	{r7, pc}
100092b2:	bf00      	nop
100092b4:	100201e8 	.word	0x100201e8

100092b8 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100092b8:	b580      	push	{r7, lr}
100092ba:	b084      	sub	sp, #16
100092bc:	af00      	add	r7, sp, #0
100092be:	60f8      	str	r0, [r7, #12]
100092c0:	60b9      	str	r1, [r7, #8]
100092c2:	4613      	mov	r3, r2
100092c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
100092c6:	4b06      	ldr	r3, [pc, #24]	@ (100092e0 <IPCC_channel1_callback+0x28>)
100092c8:	2202      	movs	r2, #2
100092ca:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
100092cc:	2201      	movs	r2, #1
100092ce:	68b9      	ldr	r1, [r7, #8]
100092d0:	68f8      	ldr	r0, [r7, #12]
100092d2:	f7f8 f859 	bl	10001388 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
100092d6:	bf00      	nop
100092d8:	3710      	adds	r7, #16
100092da:	46bd      	mov	sp, r7
100092dc:	bd80      	pop	{r7, pc}
100092de:	bf00      	nop
100092e0:	1002049c 	.word	0x1002049c

100092e4 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100092e4:	b580      	push	{r7, lr}
100092e6:	b084      	sub	sp, #16
100092e8:	af00      	add	r7, sp, #0
100092ea:	60f8      	str	r0, [r7, #12]
100092ec:	60b9      	str	r1, [r7, #8]
100092ee:	4613      	mov	r3, r2
100092f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
100092f2:	4b06      	ldr	r3, [pc, #24]	@ (1000930c <IPCC_channel2_callback+0x28>)
100092f4:	2201      	movs	r2, #1
100092f6:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
100092f8:	2201      	movs	r2, #1
100092fa:	68b9      	ldr	r1, [r7, #8]
100092fc:	68f8      	ldr	r0, [r7, #12]
100092fe:	f7f8 f843 	bl	10001388 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
10009302:	bf00      	nop
10009304:	3710      	adds	r7, #16
10009306:	46bd      	mov	sp, r7
10009308:	bd80      	pop	{r7, pc}
1000930a:	bf00      	nop
1000930c:	100204a0 	.word	0x100204a0

10009310 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
10009310:	b480      	push	{r7}
10009312:	b083      	sub	sp, #12
10009314:	af00      	add	r7, sp, #0
10009316:	6078      	str	r0, [r7, #4]
10009318:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
1000931a:	687b      	ldr	r3, [r7, #4]
1000931c:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
1000931e:	683a      	ldr	r2, [r7, #0]
10009320:	429a      	cmp	r2, r3
10009322:	d209      	bcs.n	10009338 <metal_device_io_region+0x28>
10009324:	683a      	ldr	r2, [r7, #0]
10009326:	4613      	mov	r3, r2
10009328:	00db      	lsls	r3, r3, #3
1000932a:	1a9b      	subs	r3, r3, r2
1000932c:	00db      	lsls	r3, r3, #3
1000932e:	3308      	adds	r3, #8
10009330:	687a      	ldr	r2, [r7, #4]
10009332:	4413      	add	r3, r2
10009334:	3304      	adds	r3, #4
10009336:	e000      	b.n	1000933a <metal_device_io_region+0x2a>
10009338:	2300      	movs	r3, #0
}
1000933a:	4618      	mov	r0, r3
1000933c:	370c      	adds	r7, #12
1000933e:	46bd      	mov	sp, r7
10009340:	f85d 7b04 	ldr.w	r7, [sp], #4
10009344:	4770      	bx	lr
	...

10009348 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10009348:	b590      	push	{r4, r7, lr}
1000934a:	b08d      	sub	sp, #52	@ 0x34
1000934c:	af04      	add	r7, sp, #16
1000934e:	6078      	str	r0, [r7, #4]
  int status = 0;
10009350:	2300      	movs	r3, #0
10009352:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
10009354:	2300      	movs	r3, #0
10009356:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10009358:	4a41      	ldr	r2, [pc, #260]	@ (10009460 <OPENAMP_shmem_init+0x118>)
1000935a:	f107 0310 	add.w	r3, r7, #16
1000935e:	e892 0003 	ldmia.w	r2, {r0, r1}
10009362:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
10009366:	2300      	movs	r3, #0
10009368:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
1000936a:	2300      	movs	r3, #0
1000936c:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
1000936e:	f107 0310 	add.w	r3, r7, #16
10009372:	4618      	mov	r0, r3
10009374:	f7fd febe 	bl	100070f4 <metal_init>

  status = metal_register_generic_device(&shm_device);
10009378:	483a      	ldr	r0, [pc, #232]	@ (10009464 <OPENAMP_shmem_init+0x11c>)
1000937a:	f7fd fd65 	bl	10006e48 <metal_register_generic_device>
1000937e:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10009380:	69fb      	ldr	r3, [r7, #28]
10009382:	2b00      	cmp	r3, #0
10009384:	d001      	beq.n	1000938a <OPENAMP_shmem_init+0x42>
    return status;
10009386:	69fb      	ldr	r3, [r7, #28]
10009388:	e066      	b.n	10009458 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000938a:	f107 0318 	add.w	r3, r7, #24
1000938e:	461a      	mov	r2, r3
10009390:	4935      	ldr	r1, [pc, #212]	@ (10009468 <OPENAMP_shmem_init+0x120>)
10009392:	4836      	ldr	r0, [pc, #216]	@ (1000946c <OPENAMP_shmem_init+0x124>)
10009394:	f7fd fd1a 	bl	10006dcc <metal_device_open>
10009398:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000939a:	69fb      	ldr	r3, [r7, #28]
1000939c:	2b00      	cmp	r3, #0
1000939e:	d001      	beq.n	100093a4 <OPENAMP_shmem_init+0x5c>
    return status;
100093a0:	69fb      	ldr	r3, [r7, #28]
100093a2:	e059      	b.n	10009458 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
100093a4:	4a32      	ldr	r2, [pc, #200]	@ (10009470 <OPENAMP_shmem_init+0x128>)
100093a6:	4b33      	ldr	r3, [pc, #204]	@ (10009474 <OPENAMP_shmem_init+0x12c>)
100093a8:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
100093aa:	69bb      	ldr	r3, [r7, #24]
100093ac:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
100093b0:	4a31      	ldr	r2, [pc, #196]	@ (10009478 <OPENAMP_shmem_init+0x130>)
100093b2:	4b2f      	ldr	r3, [pc, #188]	@ (10009470 <OPENAMP_shmem_init+0x128>)
100093b4:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
100093b6:	461a      	mov	r2, r3
100093b8:	2300      	movs	r3, #0
100093ba:	9302      	str	r3, [sp, #8]
100093bc:	2300      	movs	r3, #0
100093be:	9301      	str	r3, [sp, #4]
100093c0:	f04f 33ff 	mov.w	r3, #4294967295
100093c4:	9300      	str	r3, [sp, #0]
100093c6:	4613      	mov	r3, r2
100093c8:	4a2a      	ldr	r2, [pc, #168]	@ (10009474 <OPENAMP_shmem_init+0x12c>)
100093ca:	4929      	ldr	r1, [pc, #164]	@ (10009470 <OPENAMP_shmem_init+0x128>)
100093cc:	f7fd fee0 	bl	10007190 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
100093d0:	69bb      	ldr	r3, [r7, #24]
100093d2:	2100      	movs	r1, #0
100093d4:	4618      	mov	r0, r3
100093d6:	f7ff ff9b 	bl	10009310 <metal_device_io_region>
100093da:	4603      	mov	r3, r0
100093dc:	4a27      	ldr	r2, [pc, #156]	@ (1000947c <OPENAMP_shmem_init+0x134>)
100093de:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
100093e0:	4b26      	ldr	r3, [pc, #152]	@ (1000947c <OPENAMP_shmem_init+0x134>)
100093e2:	681b      	ldr	r3, [r3, #0]
100093e4:	2b00      	cmp	r3, #0
100093e6:	d102      	bne.n	100093ee <OPENAMP_shmem_init+0xa6>
    return -1;
100093e8:	f04f 33ff 	mov.w	r3, #4294967295
100093ec:	e034      	b.n	10009458 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
100093ee:	f107 0208 	add.w	r2, r7, #8
100093f2:	f107 030c 	add.w	r3, r7, #12
100093f6:	4619      	mov	r1, r3
100093f8:	6878      	ldr	r0, [r7, #4]
100093fa:	f000 f903 	bl	10009604 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
100093fe:	68fb      	ldr	r3, [r7, #12]
10009400:	4a1f      	ldr	r2, [pc, #124]	@ (10009480 <OPENAMP_shmem_init+0x138>)
10009402:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
10009404:	4b1e      	ldr	r3, [pc, #120]	@ (10009480 <OPENAMP_shmem_init+0x138>)
10009406:	681b      	ldr	r3, [r3, #0]
10009408:	2b00      	cmp	r3, #0
1000940a:	d102      	bne.n	10009412 <OPENAMP_shmem_init+0xca>
  {
    return -1;
1000940c:	f04f 33ff 	mov.w	r3, #4294967295
10009410:	e022      	b.n	10009458 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
10009412:	69bb      	ldr	r3, [r7, #24]
10009414:	f103 0044 	add.w	r0, r3, #68	@ 0x44
10009418:	4b19      	ldr	r3, [pc, #100]	@ (10009480 <OPENAMP_shmem_init+0x138>)
1000941a:	6819      	ldr	r1, [r3, #0]
1000941c:	4b18      	ldr	r3, [pc, #96]	@ (10009480 <OPENAMP_shmem_init+0x138>)
1000941e:	681a      	ldr	r2, [r3, #0]
10009420:	68bb      	ldr	r3, [r7, #8]
10009422:	461c      	mov	r4, r3
10009424:	2300      	movs	r3, #0
10009426:	9302      	str	r3, [sp, #8]
10009428:	2300      	movs	r3, #0
1000942a:	9301      	str	r3, [sp, #4]
1000942c:	f04f 33ff 	mov.w	r3, #4294967295
10009430:	9300      	str	r3, [sp, #0]
10009432:	4623      	mov	r3, r4
10009434:	f7fd feac 	bl	10007190 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
10009438:	69bb      	ldr	r3, [r7, #24]
1000943a:	2101      	movs	r1, #1
1000943c:	4618      	mov	r0, r3
1000943e:	f7ff ff67 	bl	10009310 <metal_device_io_region>
10009442:	4603      	mov	r3, r0
10009444:	4a0f      	ldr	r2, [pc, #60]	@ (10009484 <OPENAMP_shmem_init+0x13c>)
10009446:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
10009448:	4b0e      	ldr	r3, [pc, #56]	@ (10009484 <OPENAMP_shmem_init+0x13c>)
1000944a:	681b      	ldr	r3, [r3, #0]
1000944c:	2b00      	cmp	r3, #0
1000944e:	d102      	bne.n	10009456 <OPENAMP_shmem_init+0x10e>
    return -1;
10009450:	f04f 33ff 	mov.w	r3, #4294967295
10009454:	e000      	b.n	10009458 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
10009456:	2300      	movs	r3, #0
}
10009458:	4618      	mov	r0, r3
1000945a:	3724      	adds	r7, #36	@ 0x24
1000945c:	46bd      	mov	sp, r7
1000945e:	bd90      	pop	{r4, r7, pc}
10009460:	1000ae08 	.word	0x1000ae08
10009464:	10020058 	.word	0x10020058
10009468:	1000adf4 	.word	0x1000adf4
1000946c:	1000ae00 	.word	0x1000ae00
10009470:	10040000 	.word	0x10040000
10009474:	10020548 	.word	0x10020548
10009478:	10050000 	.word	0x10050000
1000947c:	100204a4 	.word	0x100204a4
10009480:	100204ac 	.word	0x100204ac
10009484:	100204a8 	.word	0x100204a8

10009488 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10009488:	b590      	push	{r4, r7, lr}
1000948a:	b08b      	sub	sp, #44	@ 0x2c
1000948c:	af04      	add	r7, sp, #16
1000948e:	6078      	str	r0, [r7, #4]
10009490:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
10009492:	2300      	movs	r3, #0
10009494:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
10009496:	2300      	movs	r3, #0
10009498:	613b      	str	r3, [r7, #16]
  int status = 0;
1000949a:	2300      	movs	r3, #0
1000949c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000949e:	f7ff fe8b 	bl	100091b8 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
100094a2:	6878      	ldr	r0, [r7, #4]
100094a4:	f7ff ff50 	bl	10009348 <OPENAMP_shmem_init>
100094a8:	60f8      	str	r0, [r7, #12]
  if(status)
100094aa:	68fb      	ldr	r3, [r7, #12]
100094ac:	2b00      	cmp	r3, #0
100094ae:	d001      	beq.n	100094b4 <MX_OPENAMP_Init+0x2c>
  {
    return status;
100094b0:	68fb      	ldr	r3, [r7, #12]
100094b2:	e068      	b.n	10009586 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
100094b4:	6878      	ldr	r0, [r7, #4]
100094b6:	4b36      	ldr	r3, [pc, #216]	@ (10009590 <MX_OPENAMP_Init+0x108>)
100094b8:	681b      	ldr	r3, [r3, #0]
100094ba:	f103 0218 	add.w	r2, r3, #24
100094be:	4b35      	ldr	r3, [pc, #212]	@ (10009594 <MX_OPENAMP_Init+0x10c>)
100094c0:	681b      	ldr	r3, [r3, #0]
100094c2:	2100      	movs	r1, #0
100094c4:	9102      	str	r1, [sp, #8]
100094c6:	4934      	ldr	r1, [pc, #208]	@ (10009598 <MX_OPENAMP_Init+0x110>)
100094c8:	9101      	str	r1, [sp, #4]
100094ca:	2100      	movs	r1, #0
100094cc:	9100      	str	r1, [sp, #0]
100094ce:	21ff      	movs	r1, #255	@ 0xff
100094d0:	f7fe f95c 	bl	1000778c <rproc_virtio_create_vdev>
100094d4:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
100094d6:	693b      	ldr	r3, [r7, #16]
100094d8:	2b00      	cmp	r3, #0
100094da:	d102      	bne.n	100094e2 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
100094dc:	f04f 33ff 	mov.w	r3, #4294967295
100094e0:	e051      	b.n	10009586 <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
100094e2:	6938      	ldr	r0, [r7, #16]
100094e4:	f7fe fa6d 	bl	100079c2 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
100094e8:	4b29      	ldr	r3, [pc, #164]	@ (10009590 <MX_OPENAMP_Init+0x108>)
100094ea:	681b      	ldr	r3, [r3, #0]
100094ec:	3334      	adds	r3, #52	@ 0x34
100094ee:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100094f0:	697b      	ldr	r3, [r7, #20]
100094f2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
100094f4:	697b      	ldr	r3, [r7, #20]
100094f6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100094f8:	461c      	mov	r4, r3
100094fa:	4b28      	ldr	r3, [pc, #160]	@ (1000959c <MX_OPENAMP_Init+0x114>)
100094fc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
100094fe:	697a      	ldr	r2, [r7, #20]
10009500:	6892      	ldr	r2, [r2, #8]
10009502:	6979      	ldr	r1, [r7, #20]
10009504:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10009506:	9102      	str	r1, [sp, #8]
10009508:	9201      	str	r2, [sp, #4]
1000950a:	9300      	str	r3, [sp, #0]
1000950c:	4623      	mov	r3, r4
1000950e:	4602      	mov	r2, r0
10009510:	2100      	movs	r1, #0
10009512:	6938      	ldr	r0, [r7, #16]
10009514:	f7fe f9e8 	bl	100078e8 <rproc_virtio_init_vring>
10009518:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000951a:	68fb      	ldr	r3, [r7, #12]
1000951c:	2b00      	cmp	r3, #0
1000951e:	d001      	beq.n	10009524 <MX_OPENAMP_Init+0x9c>
  {
    return status;
10009520:	68fb      	ldr	r3, [r7, #12]
10009522:	e030      	b.n	10009586 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
10009524:	4b1a      	ldr	r3, [pc, #104]	@ (10009590 <MX_OPENAMP_Init+0x108>)
10009526:	681b      	ldr	r3, [r3, #0]
10009528:	3348      	adds	r3, #72	@ 0x48
1000952a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000952c:	697b      	ldr	r3, [r7, #20]
1000952e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10009530:	697b      	ldr	r3, [r7, #20]
10009532:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10009534:	461c      	mov	r4, r3
10009536:	4b19      	ldr	r3, [pc, #100]	@ (1000959c <MX_OPENAMP_Init+0x114>)
10009538:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000953a:	697a      	ldr	r2, [r7, #20]
1000953c:	6892      	ldr	r2, [r2, #8]
1000953e:	6979      	ldr	r1, [r7, #20]
10009540:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10009542:	9102      	str	r1, [sp, #8]
10009544:	9201      	str	r2, [sp, #4]
10009546:	9300      	str	r3, [sp, #0]
10009548:	4623      	mov	r3, r4
1000954a:	4602      	mov	r2, r0
1000954c:	2101      	movs	r1, #1
1000954e:	6938      	ldr	r0, [r7, #16]
10009550:	f7fe f9ca 	bl	100078e8 <rproc_virtio_init_vring>
10009554:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10009556:	68fb      	ldr	r3, [r7, #12]
10009558:	2b00      	cmp	r3, #0
1000955a:	d001      	beq.n	10009560 <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000955c:	68fb      	ldr	r3, [r7, #12]
1000955e:	e012      	b.n	10009586 <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10009560:	4a0f      	ldr	r2, [pc, #60]	@ (100095a0 <MX_OPENAMP_Init+0x118>)
10009562:	4b10      	ldr	r3, [pc, #64]	@ (100095a4 <MX_OPENAMP_Init+0x11c>)
10009564:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10009566:	461a      	mov	r2, r3
10009568:	f04f 31ff 	mov.w	r1, #4294967295
1000956c:	480e      	ldr	r0, [pc, #56]	@ (100095a8 <MX_OPENAMP_Init+0x120>)
1000956e:	f7fe fec0 	bl	100082f2 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10009572:	4b0a      	ldr	r3, [pc, #40]	@ (1000959c <MX_OPENAMP_Init+0x114>)
10009574:	681b      	ldr	r3, [r3, #0]
10009576:	4a0c      	ldr	r2, [pc, #48]	@ (100095a8 <MX_OPENAMP_Init+0x120>)
10009578:	9200      	str	r2, [sp, #0]
1000957a:	683a      	ldr	r2, [r7, #0]
1000957c:	6939      	ldr	r1, [r7, #16]
1000957e:	480b      	ldr	r0, [pc, #44]	@ (100095ac <MX_OPENAMP_Init+0x124>)
10009580:	f7ff f9b4 	bl	100088ec <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10009584:	2300      	movs	r3, #0
}
10009586:	4618      	mov	r0, r3
10009588:	371c      	adds	r7, #28
1000958a:	46bd      	mov	sp, r7
1000958c:	bd90      	pop	{r4, r7, pc}
1000958e:	bf00      	nop
10009590:	100204ac 	.word	0x100204ac
10009594:	100204a8 	.word	0x100204a8
10009598:	10009255 	.word	0x10009255
1000959c:	100204a4 	.word	0x100204a4
100095a0:	10050000 	.word	0x10050000
100095a4:	10040000 	.word	0x10040000
100095a8:	100204b0 	.word	0x100204b0
100095ac:	100204bc 	.word	0x100204bc

100095b0 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
100095b0:	b580      	push	{r7, lr}
100095b2:	b08a      	sub	sp, #40	@ 0x28
100095b4:	af04      	add	r7, sp, #16
100095b6:	60f8      	str	r0, [r7, #12]
100095b8:	60b9      	str	r1, [r7, #8]
100095ba:	607a      	str	r2, [r7, #4]
100095bc:	603b      	str	r3, [r7, #0]
  int ret = 0;
100095be:	2300      	movs	r3, #0
100095c0:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
100095c2:	6a3b      	ldr	r3, [r7, #32]
100095c4:	9302      	str	r3, [sp, #8]
100095c6:	683b      	ldr	r3, [r7, #0]
100095c8:	9301      	str	r3, [sp, #4]
100095ca:	687b      	ldr	r3, [r7, #4]
100095cc:	9300      	str	r3, [sp, #0]
100095ce:	f04f 33ff 	mov.w	r3, #4294967295
100095d2:	68ba      	ldr	r2, [r7, #8]
100095d4:	4904      	ldr	r1, [pc, #16]	@ (100095e8 <OPENAMP_create_endpoint+0x38>)
100095d6:	68f8      	ldr	r0, [r7, #12]
100095d8:	f7fe fcc0 	bl	10007f5c <rpmsg_create_ept>
100095dc:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
100095de:	697b      	ldr	r3, [r7, #20]
}
100095e0:	4618      	mov	r0, r3
100095e2:	3718      	adds	r7, #24
100095e4:	46bd      	mov	sp, r7
100095e6:	bd80      	pop	{r7, pc}
100095e8:	100204bc 	.word	0x100204bc

100095ec <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
100095ec:	b580      	push	{r7, lr}
100095ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
100095f0:	4b03      	ldr	r3, [pc, #12]	@ (10009600 <OPENAMP_check_for_message+0x14>)
100095f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100095f4:	4618      	mov	r0, r3
100095f6:	f7ff fe03 	bl	10009200 <MAILBOX_Poll>
}
100095fa:	bf00      	nop
100095fc:	bd80      	pop	{r7, pc}
100095fe:	bf00      	nop
10009600:	100204bc 	.word	0x100204bc

10009604 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10009604:	b480      	push	{r7}
10009606:	b085      	sub	sp, #20
10009608:	af00      	add	r7, sp, #0
1000960a:	60f8      	str	r0, [r7, #12]
1000960c:	60b9      	str	r1, [r7, #8]
1000960e:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
10009610:	687b      	ldr	r3, [r7, #4]
10009612:	228c      	movs	r2, #140	@ 0x8c
10009614:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
10009616:	68bb      	ldr	r3, [r7, #8]
10009618:	4a03      	ldr	r2, [pc, #12]	@ (10009628 <resource_table_init+0x24>)
1000961a:	601a      	str	r2, [r3, #0]
}
1000961c:	bf00      	nop
1000961e:	3714      	adds	r7, #20
10009620:	46bd      	mov	sp, r7
10009622:	f85d 7b04 	ldr.w	r7, [sp], #4
10009626:	4770      	bx	lr
10009628:	10020140 	.word	0x10020140

1000962c <__assert_func>:
1000962c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000962e:	4614      	mov	r4, r2
10009630:	461a      	mov	r2, r3
10009632:	4b09      	ldr	r3, [pc, #36]	@ (10009658 <__assert_func+0x2c>)
10009634:	681b      	ldr	r3, [r3, #0]
10009636:	4605      	mov	r5, r0
10009638:	68d8      	ldr	r0, [r3, #12]
1000963a:	b954      	cbnz	r4, 10009652 <__assert_func+0x26>
1000963c:	4b07      	ldr	r3, [pc, #28]	@ (1000965c <__assert_func+0x30>)
1000963e:	461c      	mov	r4, r3
10009640:	e9cd 3401 	strd	r3, r4, [sp, #4]
10009644:	9100      	str	r1, [sp, #0]
10009646:	462b      	mov	r3, r5
10009648:	4905      	ldr	r1, [pc, #20]	@ (10009660 <__assert_func+0x34>)
1000964a:	f000 f9f7 	bl	10009a3c <fiprintf>
1000964e:	f000 fb46 	bl	10009cde <abort>
10009652:	4b04      	ldr	r3, [pc, #16]	@ (10009664 <__assert_func+0x38>)
10009654:	e7f4      	b.n	10009640 <__assert_func+0x14>
10009656:	bf00      	nop
10009658:	100200f0 	.word	0x100200f0
1000965c:	1000af00 	.word	0x1000af00
10009660:	1000aed2 	.word	0x1000aed2
10009664:	1000aec5 	.word	0x1000aec5

10009668 <atoi>:
10009668:	220a      	movs	r2, #10
1000966a:	2100      	movs	r1, #0
1000966c:	f000 b938 	b.w	100098e0 <strtol>

10009670 <malloc>:
10009670:	4b02      	ldr	r3, [pc, #8]	@ (1000967c <malloc+0xc>)
10009672:	4601      	mov	r1, r0
10009674:	6818      	ldr	r0, [r3, #0]
10009676:	f000 b82d 	b.w	100096d4 <_malloc_r>
1000967a:	bf00      	nop
1000967c:	100200f0 	.word	0x100200f0

10009680 <free>:
10009680:	4b02      	ldr	r3, [pc, #8]	@ (1000968c <free+0xc>)
10009682:	4601      	mov	r1, r0
10009684:	6818      	ldr	r0, [r3, #0]
10009686:	f000 bb31 	b.w	10009cec <_free_r>
1000968a:	bf00      	nop
1000968c:	100200f0 	.word	0x100200f0

10009690 <sbrk_aligned>:
10009690:	b570      	push	{r4, r5, r6, lr}
10009692:	4e0f      	ldr	r6, [pc, #60]	@ (100096d0 <sbrk_aligned+0x40>)
10009694:	460c      	mov	r4, r1
10009696:	6831      	ldr	r1, [r6, #0]
10009698:	4605      	mov	r5, r0
1000969a:	b911      	cbnz	r1, 100096a2 <sbrk_aligned+0x12>
1000969c:	f000 fac2 	bl	10009c24 <_sbrk_r>
100096a0:	6030      	str	r0, [r6, #0]
100096a2:	4621      	mov	r1, r4
100096a4:	4628      	mov	r0, r5
100096a6:	f000 fabd 	bl	10009c24 <_sbrk_r>
100096aa:	1c43      	adds	r3, r0, #1
100096ac:	d103      	bne.n	100096b6 <sbrk_aligned+0x26>
100096ae:	f04f 34ff 	mov.w	r4, #4294967295
100096b2:	4620      	mov	r0, r4
100096b4:	bd70      	pop	{r4, r5, r6, pc}
100096b6:	1cc4      	adds	r4, r0, #3
100096b8:	f024 0403 	bic.w	r4, r4, #3
100096bc:	42a0      	cmp	r0, r4
100096be:	d0f8      	beq.n	100096b2 <sbrk_aligned+0x22>
100096c0:	1a21      	subs	r1, r4, r0
100096c2:	4628      	mov	r0, r5
100096c4:	f000 faae 	bl	10009c24 <_sbrk_r>
100096c8:	3001      	adds	r0, #1
100096ca:	d1f2      	bne.n	100096b2 <sbrk_aligned+0x22>
100096cc:	e7ef      	b.n	100096ae <sbrk_aligned+0x1e>
100096ce:	bf00      	nop
100096d0:	1002054c 	.word	0x1002054c

100096d4 <_malloc_r>:
100096d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100096d8:	1ccd      	adds	r5, r1, #3
100096da:	f025 0503 	bic.w	r5, r5, #3
100096de:	3508      	adds	r5, #8
100096e0:	2d0c      	cmp	r5, #12
100096e2:	bf38      	it	cc
100096e4:	250c      	movcc	r5, #12
100096e6:	2d00      	cmp	r5, #0
100096e8:	4606      	mov	r6, r0
100096ea:	db01      	blt.n	100096f0 <_malloc_r+0x1c>
100096ec:	42a9      	cmp	r1, r5
100096ee:	d904      	bls.n	100096fa <_malloc_r+0x26>
100096f0:	230c      	movs	r3, #12
100096f2:	6033      	str	r3, [r6, #0]
100096f4:	2000      	movs	r0, #0
100096f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
100096fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 100097d0 <_malloc_r+0xfc>
100096fe:	f000 f869 	bl	100097d4 <__malloc_lock>
10009702:	f8d8 3000 	ldr.w	r3, [r8]
10009706:	461c      	mov	r4, r3
10009708:	bb44      	cbnz	r4, 1000975c <_malloc_r+0x88>
1000970a:	4629      	mov	r1, r5
1000970c:	4630      	mov	r0, r6
1000970e:	f7ff ffbf 	bl	10009690 <sbrk_aligned>
10009712:	1c43      	adds	r3, r0, #1
10009714:	4604      	mov	r4, r0
10009716:	d158      	bne.n	100097ca <_malloc_r+0xf6>
10009718:	f8d8 4000 	ldr.w	r4, [r8]
1000971c:	4627      	mov	r7, r4
1000971e:	2f00      	cmp	r7, #0
10009720:	d143      	bne.n	100097aa <_malloc_r+0xd6>
10009722:	2c00      	cmp	r4, #0
10009724:	d04b      	beq.n	100097be <_malloc_r+0xea>
10009726:	6823      	ldr	r3, [r4, #0]
10009728:	4639      	mov	r1, r7
1000972a:	4630      	mov	r0, r6
1000972c:	eb04 0903 	add.w	r9, r4, r3
10009730:	f000 fa78 	bl	10009c24 <_sbrk_r>
10009734:	4581      	cmp	r9, r0
10009736:	d142      	bne.n	100097be <_malloc_r+0xea>
10009738:	6821      	ldr	r1, [r4, #0]
1000973a:	1a6d      	subs	r5, r5, r1
1000973c:	4629      	mov	r1, r5
1000973e:	4630      	mov	r0, r6
10009740:	f7ff ffa6 	bl	10009690 <sbrk_aligned>
10009744:	3001      	adds	r0, #1
10009746:	d03a      	beq.n	100097be <_malloc_r+0xea>
10009748:	6823      	ldr	r3, [r4, #0]
1000974a:	442b      	add	r3, r5
1000974c:	6023      	str	r3, [r4, #0]
1000974e:	f8d8 3000 	ldr.w	r3, [r8]
10009752:	685a      	ldr	r2, [r3, #4]
10009754:	bb62      	cbnz	r2, 100097b0 <_malloc_r+0xdc>
10009756:	f8c8 7000 	str.w	r7, [r8]
1000975a:	e00f      	b.n	1000977c <_malloc_r+0xa8>
1000975c:	6822      	ldr	r2, [r4, #0]
1000975e:	1b52      	subs	r2, r2, r5
10009760:	d420      	bmi.n	100097a4 <_malloc_r+0xd0>
10009762:	2a0b      	cmp	r2, #11
10009764:	d917      	bls.n	10009796 <_malloc_r+0xc2>
10009766:	1961      	adds	r1, r4, r5
10009768:	42a3      	cmp	r3, r4
1000976a:	6025      	str	r5, [r4, #0]
1000976c:	bf18      	it	ne
1000976e:	6059      	strne	r1, [r3, #4]
10009770:	6863      	ldr	r3, [r4, #4]
10009772:	bf08      	it	eq
10009774:	f8c8 1000 	streq.w	r1, [r8]
10009778:	5162      	str	r2, [r4, r5]
1000977a:	604b      	str	r3, [r1, #4]
1000977c:	4630      	mov	r0, r6
1000977e:	f000 f82f 	bl	100097e0 <__malloc_unlock>
10009782:	f104 000b 	add.w	r0, r4, #11
10009786:	1d23      	adds	r3, r4, #4
10009788:	f020 0007 	bic.w	r0, r0, #7
1000978c:	1ac2      	subs	r2, r0, r3
1000978e:	bf1c      	itt	ne
10009790:	1a1b      	subne	r3, r3, r0
10009792:	50a3      	strne	r3, [r4, r2]
10009794:	e7af      	b.n	100096f6 <_malloc_r+0x22>
10009796:	6862      	ldr	r2, [r4, #4]
10009798:	42a3      	cmp	r3, r4
1000979a:	bf0c      	ite	eq
1000979c:	f8c8 2000 	streq.w	r2, [r8]
100097a0:	605a      	strne	r2, [r3, #4]
100097a2:	e7eb      	b.n	1000977c <_malloc_r+0xa8>
100097a4:	4623      	mov	r3, r4
100097a6:	6864      	ldr	r4, [r4, #4]
100097a8:	e7ae      	b.n	10009708 <_malloc_r+0x34>
100097aa:	463c      	mov	r4, r7
100097ac:	687f      	ldr	r7, [r7, #4]
100097ae:	e7b6      	b.n	1000971e <_malloc_r+0x4a>
100097b0:	461a      	mov	r2, r3
100097b2:	685b      	ldr	r3, [r3, #4]
100097b4:	42a3      	cmp	r3, r4
100097b6:	d1fb      	bne.n	100097b0 <_malloc_r+0xdc>
100097b8:	2300      	movs	r3, #0
100097ba:	6053      	str	r3, [r2, #4]
100097bc:	e7de      	b.n	1000977c <_malloc_r+0xa8>
100097be:	230c      	movs	r3, #12
100097c0:	6033      	str	r3, [r6, #0]
100097c2:	4630      	mov	r0, r6
100097c4:	f000 f80c 	bl	100097e0 <__malloc_unlock>
100097c8:	e794      	b.n	100096f4 <_malloc_r+0x20>
100097ca:	6005      	str	r5, [r0, #0]
100097cc:	e7d6      	b.n	1000977c <_malloc_r+0xa8>
100097ce:	bf00      	nop
100097d0:	10020550 	.word	0x10020550

100097d4 <__malloc_lock>:
100097d4:	4801      	ldr	r0, [pc, #4]	@ (100097dc <__malloc_lock+0x8>)
100097d6:	f000 ba72 	b.w	10009cbe <__retarget_lock_acquire_recursive>
100097da:	bf00      	nop
100097dc:	10020694 	.word	0x10020694

100097e0 <__malloc_unlock>:
100097e0:	4801      	ldr	r0, [pc, #4]	@ (100097e8 <__malloc_unlock+0x8>)
100097e2:	f000 ba6d 	b.w	10009cc0 <__retarget_lock_release_recursive>
100097e6:	bf00      	nop
100097e8:	10020694 	.word	0x10020694

100097ec <_strtol_l.constprop.0>:
100097ec:	2b24      	cmp	r3, #36	@ 0x24
100097ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100097f2:	4686      	mov	lr, r0
100097f4:	4690      	mov	r8, r2
100097f6:	d801      	bhi.n	100097fc <_strtol_l.constprop.0+0x10>
100097f8:	2b01      	cmp	r3, #1
100097fa:	d106      	bne.n	1000980a <_strtol_l.constprop.0+0x1e>
100097fc:	f000 fa34 	bl	10009c68 <__errno>
10009800:	2316      	movs	r3, #22
10009802:	6003      	str	r3, [r0, #0]
10009804:	2000      	movs	r0, #0
10009806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000980a:	4834      	ldr	r0, [pc, #208]	@ (100098dc <_strtol_l.constprop.0+0xf0>)
1000980c:	460d      	mov	r5, r1
1000980e:	462a      	mov	r2, r5
10009810:	f815 4b01 	ldrb.w	r4, [r5], #1
10009814:	5d06      	ldrb	r6, [r0, r4]
10009816:	f016 0608 	ands.w	r6, r6, #8
1000981a:	d1f8      	bne.n	1000980e <_strtol_l.constprop.0+0x22>
1000981c:	2c2d      	cmp	r4, #45	@ 0x2d
1000981e:	d12d      	bne.n	1000987c <_strtol_l.constprop.0+0x90>
10009820:	782c      	ldrb	r4, [r5, #0]
10009822:	2601      	movs	r6, #1
10009824:	1c95      	adds	r5, r2, #2
10009826:	f033 0210 	bics.w	r2, r3, #16
1000982a:	d109      	bne.n	10009840 <_strtol_l.constprop.0+0x54>
1000982c:	2c30      	cmp	r4, #48	@ 0x30
1000982e:	d12a      	bne.n	10009886 <_strtol_l.constprop.0+0x9a>
10009830:	782a      	ldrb	r2, [r5, #0]
10009832:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
10009836:	2a58      	cmp	r2, #88	@ 0x58
10009838:	d125      	bne.n	10009886 <_strtol_l.constprop.0+0x9a>
1000983a:	786c      	ldrb	r4, [r5, #1]
1000983c:	2310      	movs	r3, #16
1000983e:	3502      	adds	r5, #2
10009840:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
10009844:	f10c 3cff 	add.w	ip, ip, #4294967295
10009848:	2200      	movs	r2, #0
1000984a:	fbbc f9f3 	udiv	r9, ip, r3
1000984e:	4610      	mov	r0, r2
10009850:	fb03 ca19 	mls	sl, r3, r9, ip
10009854:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
10009858:	2f09      	cmp	r7, #9
1000985a:	d81b      	bhi.n	10009894 <_strtol_l.constprop.0+0xa8>
1000985c:	463c      	mov	r4, r7
1000985e:	42a3      	cmp	r3, r4
10009860:	dd27      	ble.n	100098b2 <_strtol_l.constprop.0+0xc6>
10009862:	1c57      	adds	r7, r2, #1
10009864:	d007      	beq.n	10009876 <_strtol_l.constprop.0+0x8a>
10009866:	4581      	cmp	r9, r0
10009868:	d320      	bcc.n	100098ac <_strtol_l.constprop.0+0xc0>
1000986a:	d101      	bne.n	10009870 <_strtol_l.constprop.0+0x84>
1000986c:	45a2      	cmp	sl, r4
1000986e:	db1d      	blt.n	100098ac <_strtol_l.constprop.0+0xc0>
10009870:	fb00 4003 	mla	r0, r0, r3, r4
10009874:	2201      	movs	r2, #1
10009876:	f815 4b01 	ldrb.w	r4, [r5], #1
1000987a:	e7eb      	b.n	10009854 <_strtol_l.constprop.0+0x68>
1000987c:	2c2b      	cmp	r4, #43	@ 0x2b
1000987e:	bf04      	itt	eq
10009880:	782c      	ldrbeq	r4, [r5, #0]
10009882:	1c95      	addeq	r5, r2, #2
10009884:	e7cf      	b.n	10009826 <_strtol_l.constprop.0+0x3a>
10009886:	2b00      	cmp	r3, #0
10009888:	d1da      	bne.n	10009840 <_strtol_l.constprop.0+0x54>
1000988a:	2c30      	cmp	r4, #48	@ 0x30
1000988c:	bf0c      	ite	eq
1000988e:	2308      	moveq	r3, #8
10009890:	230a      	movne	r3, #10
10009892:	e7d5      	b.n	10009840 <_strtol_l.constprop.0+0x54>
10009894:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
10009898:	2f19      	cmp	r7, #25
1000989a:	d801      	bhi.n	100098a0 <_strtol_l.constprop.0+0xb4>
1000989c:	3c37      	subs	r4, #55	@ 0x37
1000989e:	e7de      	b.n	1000985e <_strtol_l.constprop.0+0x72>
100098a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
100098a4:	2f19      	cmp	r7, #25
100098a6:	d804      	bhi.n	100098b2 <_strtol_l.constprop.0+0xc6>
100098a8:	3c57      	subs	r4, #87	@ 0x57
100098aa:	e7d8      	b.n	1000985e <_strtol_l.constprop.0+0x72>
100098ac:	f04f 32ff 	mov.w	r2, #4294967295
100098b0:	e7e1      	b.n	10009876 <_strtol_l.constprop.0+0x8a>
100098b2:	1c53      	adds	r3, r2, #1
100098b4:	d108      	bne.n	100098c8 <_strtol_l.constprop.0+0xdc>
100098b6:	2322      	movs	r3, #34	@ 0x22
100098b8:	f8ce 3000 	str.w	r3, [lr]
100098bc:	4660      	mov	r0, ip
100098be:	f1b8 0f00 	cmp.w	r8, #0
100098c2:	d0a0      	beq.n	10009806 <_strtol_l.constprop.0+0x1a>
100098c4:	1e69      	subs	r1, r5, #1
100098c6:	e006      	b.n	100098d6 <_strtol_l.constprop.0+0xea>
100098c8:	b106      	cbz	r6, 100098cc <_strtol_l.constprop.0+0xe0>
100098ca:	4240      	negs	r0, r0
100098cc:	f1b8 0f00 	cmp.w	r8, #0
100098d0:	d099      	beq.n	10009806 <_strtol_l.constprop.0+0x1a>
100098d2:	2a00      	cmp	r2, #0
100098d4:	d1f6      	bne.n	100098c4 <_strtol_l.constprop.0+0xd8>
100098d6:	f8c8 1000 	str.w	r1, [r8]
100098da:	e794      	b.n	10009806 <_strtol_l.constprop.0+0x1a>
100098dc:	1000af02 	.word	0x1000af02

100098e0 <strtol>:
100098e0:	4613      	mov	r3, r2
100098e2:	460a      	mov	r2, r1
100098e4:	4601      	mov	r1, r0
100098e6:	4802      	ldr	r0, [pc, #8]	@ (100098f0 <strtol+0x10>)
100098e8:	6800      	ldr	r0, [r0, #0]
100098ea:	f7ff bf7f 	b.w	100097ec <_strtol_l.constprop.0>
100098ee:	bf00      	nop
100098f0:	100200f0 	.word	0x100200f0

100098f4 <std>:
100098f4:	2300      	movs	r3, #0
100098f6:	b510      	push	{r4, lr}
100098f8:	4604      	mov	r4, r0
100098fa:	e9c0 3300 	strd	r3, r3, [r0]
100098fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
10009902:	6083      	str	r3, [r0, #8]
10009904:	8181      	strh	r1, [r0, #12]
10009906:	6643      	str	r3, [r0, #100]	@ 0x64
10009908:	81c2      	strh	r2, [r0, #14]
1000990a:	6183      	str	r3, [r0, #24]
1000990c:	4619      	mov	r1, r3
1000990e:	2208      	movs	r2, #8
10009910:	305c      	adds	r0, #92	@ 0x5c
10009912:	f000 f926 	bl	10009b62 <memset>
10009916:	4b0d      	ldr	r3, [pc, #52]	@ (1000994c <std+0x58>)
10009918:	6263      	str	r3, [r4, #36]	@ 0x24
1000991a:	4b0d      	ldr	r3, [pc, #52]	@ (10009950 <std+0x5c>)
1000991c:	62a3      	str	r3, [r4, #40]	@ 0x28
1000991e:	4b0d      	ldr	r3, [pc, #52]	@ (10009954 <std+0x60>)
10009920:	62e3      	str	r3, [r4, #44]	@ 0x2c
10009922:	4b0d      	ldr	r3, [pc, #52]	@ (10009958 <std+0x64>)
10009924:	6323      	str	r3, [r4, #48]	@ 0x30
10009926:	4b0d      	ldr	r3, [pc, #52]	@ (1000995c <std+0x68>)
10009928:	6224      	str	r4, [r4, #32]
1000992a:	429c      	cmp	r4, r3
1000992c:	d006      	beq.n	1000993c <std+0x48>
1000992e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
10009932:	4294      	cmp	r4, r2
10009934:	d002      	beq.n	1000993c <std+0x48>
10009936:	33d0      	adds	r3, #208	@ 0xd0
10009938:	429c      	cmp	r4, r3
1000993a:	d105      	bne.n	10009948 <std+0x54>
1000993c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
10009940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009944:	f000 b9ba 	b.w	10009cbc <__retarget_lock_init_recursive>
10009948:	bd10      	pop	{r4, pc}
1000994a:	bf00      	nop
1000994c:	10009add 	.word	0x10009add
10009950:	10009aff 	.word	0x10009aff
10009954:	10009b37 	.word	0x10009b37
10009958:	10009b5b 	.word	0x10009b5b
1000995c:	10020554 	.word	0x10020554

10009960 <stdio_exit_handler>:
10009960:	4a02      	ldr	r2, [pc, #8]	@ (1000996c <stdio_exit_handler+0xc>)
10009962:	4903      	ldr	r1, [pc, #12]	@ (10009970 <stdio_exit_handler+0x10>)
10009964:	4803      	ldr	r0, [pc, #12]	@ (10009974 <stdio_exit_handler+0x14>)
10009966:	f000 b87b 	b.w	10009a60 <_fwalk_sglue>
1000996a:	bf00      	nop
1000996c:	100200e4 	.word	0x100200e4
10009970:	1000a6d9 	.word	0x1000a6d9
10009974:	100200f4 	.word	0x100200f4

10009978 <cleanup_stdio>:
10009978:	6841      	ldr	r1, [r0, #4]
1000997a:	4b0c      	ldr	r3, [pc, #48]	@ (100099ac <cleanup_stdio+0x34>)
1000997c:	4299      	cmp	r1, r3
1000997e:	b510      	push	{r4, lr}
10009980:	4604      	mov	r4, r0
10009982:	d001      	beq.n	10009988 <cleanup_stdio+0x10>
10009984:	f000 fea8 	bl	1000a6d8 <_fflush_r>
10009988:	68a1      	ldr	r1, [r4, #8]
1000998a:	4b09      	ldr	r3, [pc, #36]	@ (100099b0 <cleanup_stdio+0x38>)
1000998c:	4299      	cmp	r1, r3
1000998e:	d002      	beq.n	10009996 <cleanup_stdio+0x1e>
10009990:	4620      	mov	r0, r4
10009992:	f000 fea1 	bl	1000a6d8 <_fflush_r>
10009996:	68e1      	ldr	r1, [r4, #12]
10009998:	4b06      	ldr	r3, [pc, #24]	@ (100099b4 <cleanup_stdio+0x3c>)
1000999a:	4299      	cmp	r1, r3
1000999c:	d004      	beq.n	100099a8 <cleanup_stdio+0x30>
1000999e:	4620      	mov	r0, r4
100099a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100099a4:	f000 be98 	b.w	1000a6d8 <_fflush_r>
100099a8:	bd10      	pop	{r4, pc}
100099aa:	bf00      	nop
100099ac:	10020554 	.word	0x10020554
100099b0:	100205bc 	.word	0x100205bc
100099b4:	10020624 	.word	0x10020624

100099b8 <global_stdio_init.part.0>:
100099b8:	b510      	push	{r4, lr}
100099ba:	4b0b      	ldr	r3, [pc, #44]	@ (100099e8 <global_stdio_init.part.0+0x30>)
100099bc:	4c0b      	ldr	r4, [pc, #44]	@ (100099ec <global_stdio_init.part.0+0x34>)
100099be:	4a0c      	ldr	r2, [pc, #48]	@ (100099f0 <global_stdio_init.part.0+0x38>)
100099c0:	601a      	str	r2, [r3, #0]
100099c2:	4620      	mov	r0, r4
100099c4:	2200      	movs	r2, #0
100099c6:	2104      	movs	r1, #4
100099c8:	f7ff ff94 	bl	100098f4 <std>
100099cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
100099d0:	2201      	movs	r2, #1
100099d2:	2109      	movs	r1, #9
100099d4:	f7ff ff8e 	bl	100098f4 <std>
100099d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
100099dc:	2202      	movs	r2, #2
100099de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100099e2:	2112      	movs	r1, #18
100099e4:	f7ff bf86 	b.w	100098f4 <std>
100099e8:	1002068c 	.word	0x1002068c
100099ec:	10020554 	.word	0x10020554
100099f0:	10009961 	.word	0x10009961

100099f4 <__sfp_lock_acquire>:
100099f4:	4801      	ldr	r0, [pc, #4]	@ (100099fc <__sfp_lock_acquire+0x8>)
100099f6:	f000 b962 	b.w	10009cbe <__retarget_lock_acquire_recursive>
100099fa:	bf00      	nop
100099fc:	10020695 	.word	0x10020695

10009a00 <__sfp_lock_release>:
10009a00:	4801      	ldr	r0, [pc, #4]	@ (10009a08 <__sfp_lock_release+0x8>)
10009a02:	f000 b95d 	b.w	10009cc0 <__retarget_lock_release_recursive>
10009a06:	bf00      	nop
10009a08:	10020695 	.word	0x10020695

10009a0c <__sinit>:
10009a0c:	b510      	push	{r4, lr}
10009a0e:	4604      	mov	r4, r0
10009a10:	f7ff fff0 	bl	100099f4 <__sfp_lock_acquire>
10009a14:	6a23      	ldr	r3, [r4, #32]
10009a16:	b11b      	cbz	r3, 10009a20 <__sinit+0x14>
10009a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009a1c:	f7ff bff0 	b.w	10009a00 <__sfp_lock_release>
10009a20:	4b04      	ldr	r3, [pc, #16]	@ (10009a34 <__sinit+0x28>)
10009a22:	6223      	str	r3, [r4, #32]
10009a24:	4b04      	ldr	r3, [pc, #16]	@ (10009a38 <__sinit+0x2c>)
10009a26:	681b      	ldr	r3, [r3, #0]
10009a28:	2b00      	cmp	r3, #0
10009a2a:	d1f5      	bne.n	10009a18 <__sinit+0xc>
10009a2c:	f7ff ffc4 	bl	100099b8 <global_stdio_init.part.0>
10009a30:	e7f2      	b.n	10009a18 <__sinit+0xc>
10009a32:	bf00      	nop
10009a34:	10009979 	.word	0x10009979
10009a38:	1002068c 	.word	0x1002068c

10009a3c <fiprintf>:
10009a3c:	b40e      	push	{r1, r2, r3}
10009a3e:	b503      	push	{r0, r1, lr}
10009a40:	4601      	mov	r1, r0
10009a42:	ab03      	add	r3, sp, #12
10009a44:	4805      	ldr	r0, [pc, #20]	@ (10009a5c <fiprintf+0x20>)
10009a46:	f853 2b04 	ldr.w	r2, [r3], #4
10009a4a:	6800      	ldr	r0, [r0, #0]
10009a4c:	9301      	str	r3, [sp, #4]
10009a4e:	f000 fb19 	bl	1000a084 <_vfiprintf_r>
10009a52:	b002      	add	sp, #8
10009a54:	f85d eb04 	ldr.w	lr, [sp], #4
10009a58:	b003      	add	sp, #12
10009a5a:	4770      	bx	lr
10009a5c:	100200f0 	.word	0x100200f0

10009a60 <_fwalk_sglue>:
10009a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10009a64:	4607      	mov	r7, r0
10009a66:	4688      	mov	r8, r1
10009a68:	4614      	mov	r4, r2
10009a6a:	2600      	movs	r6, #0
10009a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10009a70:	f1b9 0901 	subs.w	r9, r9, #1
10009a74:	d505      	bpl.n	10009a82 <_fwalk_sglue+0x22>
10009a76:	6824      	ldr	r4, [r4, #0]
10009a78:	2c00      	cmp	r4, #0
10009a7a:	d1f7      	bne.n	10009a6c <_fwalk_sglue+0xc>
10009a7c:	4630      	mov	r0, r6
10009a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10009a82:	89ab      	ldrh	r3, [r5, #12]
10009a84:	2b01      	cmp	r3, #1
10009a86:	d907      	bls.n	10009a98 <_fwalk_sglue+0x38>
10009a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10009a8c:	3301      	adds	r3, #1
10009a8e:	d003      	beq.n	10009a98 <_fwalk_sglue+0x38>
10009a90:	4629      	mov	r1, r5
10009a92:	4638      	mov	r0, r7
10009a94:	47c0      	blx	r8
10009a96:	4306      	orrs	r6, r0
10009a98:	3568      	adds	r5, #104	@ 0x68
10009a9a:	e7e9      	b.n	10009a70 <_fwalk_sglue+0x10>

10009a9c <siprintf>:
10009a9c:	b40e      	push	{r1, r2, r3}
10009a9e:	b500      	push	{lr}
10009aa0:	b09c      	sub	sp, #112	@ 0x70
10009aa2:	ab1d      	add	r3, sp, #116	@ 0x74
10009aa4:	9002      	str	r0, [sp, #8]
10009aa6:	9006      	str	r0, [sp, #24]
10009aa8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
10009aac:	4809      	ldr	r0, [pc, #36]	@ (10009ad4 <siprintf+0x38>)
10009aae:	9107      	str	r1, [sp, #28]
10009ab0:	9104      	str	r1, [sp, #16]
10009ab2:	4909      	ldr	r1, [pc, #36]	@ (10009ad8 <siprintf+0x3c>)
10009ab4:	f853 2b04 	ldr.w	r2, [r3], #4
10009ab8:	9105      	str	r1, [sp, #20]
10009aba:	6800      	ldr	r0, [r0, #0]
10009abc:	9301      	str	r3, [sp, #4]
10009abe:	a902      	add	r1, sp, #8
10009ac0:	f000 f9ba 	bl	10009e38 <_svfiprintf_r>
10009ac4:	9b02      	ldr	r3, [sp, #8]
10009ac6:	2200      	movs	r2, #0
10009ac8:	701a      	strb	r2, [r3, #0]
10009aca:	b01c      	add	sp, #112	@ 0x70
10009acc:	f85d eb04 	ldr.w	lr, [sp], #4
10009ad0:	b003      	add	sp, #12
10009ad2:	4770      	bx	lr
10009ad4:	100200f0 	.word	0x100200f0
10009ad8:	ffff0208 	.word	0xffff0208

10009adc <__sread>:
10009adc:	b510      	push	{r4, lr}
10009ade:	460c      	mov	r4, r1
10009ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009ae4:	f000 f88c 	bl	10009c00 <_read_r>
10009ae8:	2800      	cmp	r0, #0
10009aea:	bfab      	itete	ge
10009aec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
10009aee:	89a3      	ldrhlt	r3, [r4, #12]
10009af0:	181b      	addge	r3, r3, r0
10009af2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
10009af6:	bfac      	ite	ge
10009af8:	6563      	strge	r3, [r4, #84]	@ 0x54
10009afa:	81a3      	strhlt	r3, [r4, #12]
10009afc:	bd10      	pop	{r4, pc}

10009afe <__swrite>:
10009afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10009b02:	461f      	mov	r7, r3
10009b04:	898b      	ldrh	r3, [r1, #12]
10009b06:	05db      	lsls	r3, r3, #23
10009b08:	4605      	mov	r5, r0
10009b0a:	460c      	mov	r4, r1
10009b0c:	4616      	mov	r6, r2
10009b0e:	d505      	bpl.n	10009b1c <__swrite+0x1e>
10009b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009b14:	2302      	movs	r3, #2
10009b16:	2200      	movs	r2, #0
10009b18:	f000 f860 	bl	10009bdc <_lseek_r>
10009b1c:	89a3      	ldrh	r3, [r4, #12]
10009b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10009b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
10009b26:	81a3      	strh	r3, [r4, #12]
10009b28:	4632      	mov	r2, r6
10009b2a:	463b      	mov	r3, r7
10009b2c:	4628      	mov	r0, r5
10009b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10009b32:	f000 b887 	b.w	10009c44 <_write_r>

10009b36 <__sseek>:
10009b36:	b510      	push	{r4, lr}
10009b38:	460c      	mov	r4, r1
10009b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009b3e:	f000 f84d 	bl	10009bdc <_lseek_r>
10009b42:	1c43      	adds	r3, r0, #1
10009b44:	89a3      	ldrh	r3, [r4, #12]
10009b46:	bf15      	itete	ne
10009b48:	6560      	strne	r0, [r4, #84]	@ 0x54
10009b4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
10009b4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
10009b52:	81a3      	strheq	r3, [r4, #12]
10009b54:	bf18      	it	ne
10009b56:	81a3      	strhne	r3, [r4, #12]
10009b58:	bd10      	pop	{r4, pc}

10009b5a <__sclose>:
10009b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009b5e:	f000 b82d 	b.w	10009bbc <_close_r>

10009b62 <memset>:
10009b62:	4402      	add	r2, r0
10009b64:	4603      	mov	r3, r0
10009b66:	4293      	cmp	r3, r2
10009b68:	d100      	bne.n	10009b6c <memset+0xa>
10009b6a:	4770      	bx	lr
10009b6c:	f803 1b01 	strb.w	r1, [r3], #1
10009b70:	e7f9      	b.n	10009b66 <memset+0x4>

10009b72 <strncmp>:
10009b72:	b510      	push	{r4, lr}
10009b74:	b16a      	cbz	r2, 10009b92 <strncmp+0x20>
10009b76:	3901      	subs	r1, #1
10009b78:	1884      	adds	r4, r0, r2
10009b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
10009b7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10009b82:	429a      	cmp	r2, r3
10009b84:	d103      	bne.n	10009b8e <strncmp+0x1c>
10009b86:	42a0      	cmp	r0, r4
10009b88:	d001      	beq.n	10009b8e <strncmp+0x1c>
10009b8a:	2a00      	cmp	r2, #0
10009b8c:	d1f5      	bne.n	10009b7a <strncmp+0x8>
10009b8e:	1ad0      	subs	r0, r2, r3
10009b90:	bd10      	pop	{r4, pc}
10009b92:	4610      	mov	r0, r2
10009b94:	e7fc      	b.n	10009b90 <strncmp+0x1e>

10009b96 <strncpy>:
10009b96:	b510      	push	{r4, lr}
10009b98:	3901      	subs	r1, #1
10009b9a:	4603      	mov	r3, r0
10009b9c:	b132      	cbz	r2, 10009bac <strncpy+0x16>
10009b9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10009ba2:	f803 4b01 	strb.w	r4, [r3], #1
10009ba6:	3a01      	subs	r2, #1
10009ba8:	2c00      	cmp	r4, #0
10009baa:	d1f7      	bne.n	10009b9c <strncpy+0x6>
10009bac:	441a      	add	r2, r3
10009bae:	2100      	movs	r1, #0
10009bb0:	4293      	cmp	r3, r2
10009bb2:	d100      	bne.n	10009bb6 <strncpy+0x20>
10009bb4:	bd10      	pop	{r4, pc}
10009bb6:	f803 1b01 	strb.w	r1, [r3], #1
10009bba:	e7f9      	b.n	10009bb0 <strncpy+0x1a>

10009bbc <_close_r>:
10009bbc:	b538      	push	{r3, r4, r5, lr}
10009bbe:	4d06      	ldr	r5, [pc, #24]	@ (10009bd8 <_close_r+0x1c>)
10009bc0:	2300      	movs	r3, #0
10009bc2:	4604      	mov	r4, r0
10009bc4:	4608      	mov	r0, r1
10009bc6:	602b      	str	r3, [r5, #0]
10009bc8:	f7f7 f886 	bl	10000cd8 <_close>
10009bcc:	1c43      	adds	r3, r0, #1
10009bce:	d102      	bne.n	10009bd6 <_close_r+0x1a>
10009bd0:	682b      	ldr	r3, [r5, #0]
10009bd2:	b103      	cbz	r3, 10009bd6 <_close_r+0x1a>
10009bd4:	6023      	str	r3, [r4, #0]
10009bd6:	bd38      	pop	{r3, r4, r5, pc}
10009bd8:	10020690 	.word	0x10020690

10009bdc <_lseek_r>:
10009bdc:	b538      	push	{r3, r4, r5, lr}
10009bde:	4d07      	ldr	r5, [pc, #28]	@ (10009bfc <_lseek_r+0x20>)
10009be0:	4604      	mov	r4, r0
10009be2:	4608      	mov	r0, r1
10009be4:	4611      	mov	r1, r2
10009be6:	2200      	movs	r2, #0
10009be8:	602a      	str	r2, [r5, #0]
10009bea:	461a      	mov	r2, r3
10009bec:	f7f7 f89b 	bl	10000d26 <_lseek>
10009bf0:	1c43      	adds	r3, r0, #1
10009bf2:	d102      	bne.n	10009bfa <_lseek_r+0x1e>
10009bf4:	682b      	ldr	r3, [r5, #0]
10009bf6:	b103      	cbz	r3, 10009bfa <_lseek_r+0x1e>
10009bf8:	6023      	str	r3, [r4, #0]
10009bfa:	bd38      	pop	{r3, r4, r5, pc}
10009bfc:	10020690 	.word	0x10020690

10009c00 <_read_r>:
10009c00:	b538      	push	{r3, r4, r5, lr}
10009c02:	4d07      	ldr	r5, [pc, #28]	@ (10009c20 <_read_r+0x20>)
10009c04:	4604      	mov	r4, r0
10009c06:	4608      	mov	r0, r1
10009c08:	4611      	mov	r1, r2
10009c0a:	2200      	movs	r2, #0
10009c0c:	602a      	str	r2, [r5, #0]
10009c0e:	461a      	mov	r2, r3
10009c10:	f7f7 f829 	bl	10000c66 <_read>
10009c14:	1c43      	adds	r3, r0, #1
10009c16:	d102      	bne.n	10009c1e <_read_r+0x1e>
10009c18:	682b      	ldr	r3, [r5, #0]
10009c1a:	b103      	cbz	r3, 10009c1e <_read_r+0x1e>
10009c1c:	6023      	str	r3, [r4, #0]
10009c1e:	bd38      	pop	{r3, r4, r5, pc}
10009c20:	10020690 	.word	0x10020690

10009c24 <_sbrk_r>:
10009c24:	b538      	push	{r3, r4, r5, lr}
10009c26:	4d06      	ldr	r5, [pc, #24]	@ (10009c40 <_sbrk_r+0x1c>)
10009c28:	2300      	movs	r3, #0
10009c2a:	4604      	mov	r4, r0
10009c2c:	4608      	mov	r0, r1
10009c2e:	602b      	str	r3, [r5, #0]
10009c30:	f7f7 f886 	bl	10000d40 <_sbrk>
10009c34:	1c43      	adds	r3, r0, #1
10009c36:	d102      	bne.n	10009c3e <_sbrk_r+0x1a>
10009c38:	682b      	ldr	r3, [r5, #0]
10009c3a:	b103      	cbz	r3, 10009c3e <_sbrk_r+0x1a>
10009c3c:	6023      	str	r3, [r4, #0]
10009c3e:	bd38      	pop	{r3, r4, r5, pc}
10009c40:	10020690 	.word	0x10020690

10009c44 <_write_r>:
10009c44:	b538      	push	{r3, r4, r5, lr}
10009c46:	4d07      	ldr	r5, [pc, #28]	@ (10009c64 <_write_r+0x20>)
10009c48:	4604      	mov	r4, r0
10009c4a:	4608      	mov	r0, r1
10009c4c:	4611      	mov	r1, r2
10009c4e:	2200      	movs	r2, #0
10009c50:	602a      	str	r2, [r5, #0]
10009c52:	461a      	mov	r2, r3
10009c54:	f7f7 f824 	bl	10000ca0 <_write>
10009c58:	1c43      	adds	r3, r0, #1
10009c5a:	d102      	bne.n	10009c62 <_write_r+0x1e>
10009c5c:	682b      	ldr	r3, [r5, #0]
10009c5e:	b103      	cbz	r3, 10009c62 <_write_r+0x1e>
10009c60:	6023      	str	r3, [r4, #0]
10009c62:	bd38      	pop	{r3, r4, r5, pc}
10009c64:	10020690 	.word	0x10020690

10009c68 <__errno>:
10009c68:	4b01      	ldr	r3, [pc, #4]	@ (10009c70 <__errno+0x8>)
10009c6a:	6818      	ldr	r0, [r3, #0]
10009c6c:	4770      	bx	lr
10009c6e:	bf00      	nop
10009c70:	100200f0 	.word	0x100200f0

10009c74 <__libc_init_array>:
10009c74:	b570      	push	{r4, r5, r6, lr}
10009c76:	4d0d      	ldr	r5, [pc, #52]	@ (10009cac <__libc_init_array+0x38>)
10009c78:	4c0d      	ldr	r4, [pc, #52]	@ (10009cb0 <__libc_init_array+0x3c>)
10009c7a:	1b64      	subs	r4, r4, r5
10009c7c:	10a4      	asrs	r4, r4, #2
10009c7e:	2600      	movs	r6, #0
10009c80:	42a6      	cmp	r6, r4
10009c82:	d109      	bne.n	10009c98 <__libc_init_array+0x24>
10009c84:	4d0b      	ldr	r5, [pc, #44]	@ (10009cb4 <__libc_init_array+0x40>)
10009c86:	4c0c      	ldr	r4, [pc, #48]	@ (10009cb8 <__libc_init_array+0x44>)
10009c88:	f000 fefa 	bl	1000aa80 <_init>
10009c8c:	1b64      	subs	r4, r4, r5
10009c8e:	10a4      	asrs	r4, r4, #2
10009c90:	2600      	movs	r6, #0
10009c92:	42a6      	cmp	r6, r4
10009c94:	d105      	bne.n	10009ca2 <__libc_init_array+0x2e>
10009c96:	bd70      	pop	{r4, r5, r6, pc}
10009c98:	f855 3b04 	ldr.w	r3, [r5], #4
10009c9c:	4798      	blx	r3
10009c9e:	3601      	adds	r6, #1
10009ca0:	e7ee      	b.n	10009c80 <__libc_init_array+0xc>
10009ca2:	f855 3b04 	ldr.w	r3, [r5], #4
10009ca6:	4798      	blx	r3
10009ca8:	3601      	adds	r6, #1
10009caa:	e7f2      	b.n	10009c92 <__libc_init_array+0x1e>
10009cac:	1000b040 	.word	0x1000b040
10009cb0:	1000b040 	.word	0x1000b040
10009cb4:	1000b040 	.word	0x1000b040
10009cb8:	1000b044 	.word	0x1000b044

10009cbc <__retarget_lock_init_recursive>:
10009cbc:	4770      	bx	lr

10009cbe <__retarget_lock_acquire_recursive>:
10009cbe:	4770      	bx	lr

10009cc0 <__retarget_lock_release_recursive>:
10009cc0:	4770      	bx	lr

10009cc2 <memcpy>:
10009cc2:	440a      	add	r2, r1
10009cc4:	4291      	cmp	r1, r2
10009cc6:	f100 33ff 	add.w	r3, r0, #4294967295
10009cca:	d100      	bne.n	10009cce <memcpy+0xc>
10009ccc:	4770      	bx	lr
10009cce:	b510      	push	{r4, lr}
10009cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
10009cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
10009cd8:	4291      	cmp	r1, r2
10009cda:	d1f9      	bne.n	10009cd0 <memcpy+0xe>
10009cdc:	bd10      	pop	{r4, pc}

10009cde <abort>:
10009cde:	b508      	push	{r3, lr}
10009ce0:	2006      	movs	r0, #6
10009ce2:	f000 fdf7 	bl	1000a8d4 <raise>
10009ce6:	2001      	movs	r0, #1
10009ce8:	f7f6 ffb2 	bl	10000c50 <_exit>

10009cec <_free_r>:
10009cec:	b538      	push	{r3, r4, r5, lr}
10009cee:	4605      	mov	r5, r0
10009cf0:	2900      	cmp	r1, #0
10009cf2:	d041      	beq.n	10009d78 <_free_r+0x8c>
10009cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
10009cf8:	1f0c      	subs	r4, r1, #4
10009cfa:	2b00      	cmp	r3, #0
10009cfc:	bfb8      	it	lt
10009cfe:	18e4      	addlt	r4, r4, r3
10009d00:	f7ff fd68 	bl	100097d4 <__malloc_lock>
10009d04:	4a1d      	ldr	r2, [pc, #116]	@ (10009d7c <_free_r+0x90>)
10009d06:	6813      	ldr	r3, [r2, #0]
10009d08:	b933      	cbnz	r3, 10009d18 <_free_r+0x2c>
10009d0a:	6063      	str	r3, [r4, #4]
10009d0c:	6014      	str	r4, [r2, #0]
10009d0e:	4628      	mov	r0, r5
10009d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10009d14:	f7ff bd64 	b.w	100097e0 <__malloc_unlock>
10009d18:	42a3      	cmp	r3, r4
10009d1a:	d908      	bls.n	10009d2e <_free_r+0x42>
10009d1c:	6820      	ldr	r0, [r4, #0]
10009d1e:	1821      	adds	r1, r4, r0
10009d20:	428b      	cmp	r3, r1
10009d22:	bf01      	itttt	eq
10009d24:	6819      	ldreq	r1, [r3, #0]
10009d26:	685b      	ldreq	r3, [r3, #4]
10009d28:	1809      	addeq	r1, r1, r0
10009d2a:	6021      	streq	r1, [r4, #0]
10009d2c:	e7ed      	b.n	10009d0a <_free_r+0x1e>
10009d2e:	461a      	mov	r2, r3
10009d30:	685b      	ldr	r3, [r3, #4]
10009d32:	b10b      	cbz	r3, 10009d38 <_free_r+0x4c>
10009d34:	42a3      	cmp	r3, r4
10009d36:	d9fa      	bls.n	10009d2e <_free_r+0x42>
10009d38:	6811      	ldr	r1, [r2, #0]
10009d3a:	1850      	adds	r0, r2, r1
10009d3c:	42a0      	cmp	r0, r4
10009d3e:	d10b      	bne.n	10009d58 <_free_r+0x6c>
10009d40:	6820      	ldr	r0, [r4, #0]
10009d42:	4401      	add	r1, r0
10009d44:	1850      	adds	r0, r2, r1
10009d46:	4283      	cmp	r3, r0
10009d48:	6011      	str	r1, [r2, #0]
10009d4a:	d1e0      	bne.n	10009d0e <_free_r+0x22>
10009d4c:	6818      	ldr	r0, [r3, #0]
10009d4e:	685b      	ldr	r3, [r3, #4]
10009d50:	6053      	str	r3, [r2, #4]
10009d52:	4408      	add	r0, r1
10009d54:	6010      	str	r0, [r2, #0]
10009d56:	e7da      	b.n	10009d0e <_free_r+0x22>
10009d58:	d902      	bls.n	10009d60 <_free_r+0x74>
10009d5a:	230c      	movs	r3, #12
10009d5c:	602b      	str	r3, [r5, #0]
10009d5e:	e7d6      	b.n	10009d0e <_free_r+0x22>
10009d60:	6820      	ldr	r0, [r4, #0]
10009d62:	1821      	adds	r1, r4, r0
10009d64:	428b      	cmp	r3, r1
10009d66:	bf04      	itt	eq
10009d68:	6819      	ldreq	r1, [r3, #0]
10009d6a:	685b      	ldreq	r3, [r3, #4]
10009d6c:	6063      	str	r3, [r4, #4]
10009d6e:	bf04      	itt	eq
10009d70:	1809      	addeq	r1, r1, r0
10009d72:	6021      	streq	r1, [r4, #0]
10009d74:	6054      	str	r4, [r2, #4]
10009d76:	e7ca      	b.n	10009d0e <_free_r+0x22>
10009d78:	bd38      	pop	{r3, r4, r5, pc}
10009d7a:	bf00      	nop
10009d7c:	10020550 	.word	0x10020550

10009d80 <__ssputs_r>:
10009d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10009d84:	688e      	ldr	r6, [r1, #8]
10009d86:	461f      	mov	r7, r3
10009d88:	42be      	cmp	r6, r7
10009d8a:	680b      	ldr	r3, [r1, #0]
10009d8c:	4682      	mov	sl, r0
10009d8e:	460c      	mov	r4, r1
10009d90:	4690      	mov	r8, r2
10009d92:	d82d      	bhi.n	10009df0 <__ssputs_r+0x70>
10009d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10009d98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
10009d9c:	d026      	beq.n	10009dec <__ssputs_r+0x6c>
10009d9e:	6965      	ldr	r5, [r4, #20]
10009da0:	6909      	ldr	r1, [r1, #16]
10009da2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
10009da6:	eba3 0901 	sub.w	r9, r3, r1
10009daa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
10009dae:	1c7b      	adds	r3, r7, #1
10009db0:	444b      	add	r3, r9
10009db2:	106d      	asrs	r5, r5, #1
10009db4:	429d      	cmp	r5, r3
10009db6:	bf38      	it	cc
10009db8:	461d      	movcc	r5, r3
10009dba:	0553      	lsls	r3, r2, #21
10009dbc:	d527      	bpl.n	10009e0e <__ssputs_r+0x8e>
10009dbe:	4629      	mov	r1, r5
10009dc0:	f7ff fc88 	bl	100096d4 <_malloc_r>
10009dc4:	4606      	mov	r6, r0
10009dc6:	b360      	cbz	r0, 10009e22 <__ssputs_r+0xa2>
10009dc8:	6921      	ldr	r1, [r4, #16]
10009dca:	464a      	mov	r2, r9
10009dcc:	f7ff ff79 	bl	10009cc2 <memcpy>
10009dd0:	89a3      	ldrh	r3, [r4, #12]
10009dd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
10009dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10009dda:	81a3      	strh	r3, [r4, #12]
10009ddc:	6126      	str	r6, [r4, #16]
10009dde:	6165      	str	r5, [r4, #20]
10009de0:	444e      	add	r6, r9
10009de2:	eba5 0509 	sub.w	r5, r5, r9
10009de6:	6026      	str	r6, [r4, #0]
10009de8:	60a5      	str	r5, [r4, #8]
10009dea:	463e      	mov	r6, r7
10009dec:	42be      	cmp	r6, r7
10009dee:	d900      	bls.n	10009df2 <__ssputs_r+0x72>
10009df0:	463e      	mov	r6, r7
10009df2:	6820      	ldr	r0, [r4, #0]
10009df4:	4632      	mov	r2, r6
10009df6:	4641      	mov	r1, r8
10009df8:	f000 fd2a 	bl	1000a850 <memmove>
10009dfc:	68a3      	ldr	r3, [r4, #8]
10009dfe:	1b9b      	subs	r3, r3, r6
10009e00:	60a3      	str	r3, [r4, #8]
10009e02:	6823      	ldr	r3, [r4, #0]
10009e04:	4433      	add	r3, r6
10009e06:	6023      	str	r3, [r4, #0]
10009e08:	2000      	movs	r0, #0
10009e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10009e0e:	462a      	mov	r2, r5
10009e10:	f000 fd7c 	bl	1000a90c <_realloc_r>
10009e14:	4606      	mov	r6, r0
10009e16:	2800      	cmp	r0, #0
10009e18:	d1e0      	bne.n	10009ddc <__ssputs_r+0x5c>
10009e1a:	6921      	ldr	r1, [r4, #16]
10009e1c:	4650      	mov	r0, sl
10009e1e:	f7ff ff65 	bl	10009cec <_free_r>
10009e22:	230c      	movs	r3, #12
10009e24:	f8ca 3000 	str.w	r3, [sl]
10009e28:	89a3      	ldrh	r3, [r4, #12]
10009e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009e2e:	81a3      	strh	r3, [r4, #12]
10009e30:	f04f 30ff 	mov.w	r0, #4294967295
10009e34:	e7e9      	b.n	10009e0a <__ssputs_r+0x8a>
	...

10009e38 <_svfiprintf_r>:
10009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009e3c:	4698      	mov	r8, r3
10009e3e:	898b      	ldrh	r3, [r1, #12]
10009e40:	061b      	lsls	r3, r3, #24
10009e42:	b09d      	sub	sp, #116	@ 0x74
10009e44:	4607      	mov	r7, r0
10009e46:	460d      	mov	r5, r1
10009e48:	4614      	mov	r4, r2
10009e4a:	d510      	bpl.n	10009e6e <_svfiprintf_r+0x36>
10009e4c:	690b      	ldr	r3, [r1, #16]
10009e4e:	b973      	cbnz	r3, 10009e6e <_svfiprintf_r+0x36>
10009e50:	2140      	movs	r1, #64	@ 0x40
10009e52:	f7ff fc3f 	bl	100096d4 <_malloc_r>
10009e56:	6028      	str	r0, [r5, #0]
10009e58:	6128      	str	r0, [r5, #16]
10009e5a:	b930      	cbnz	r0, 10009e6a <_svfiprintf_r+0x32>
10009e5c:	230c      	movs	r3, #12
10009e5e:	603b      	str	r3, [r7, #0]
10009e60:	f04f 30ff 	mov.w	r0, #4294967295
10009e64:	b01d      	add	sp, #116	@ 0x74
10009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009e6a:	2340      	movs	r3, #64	@ 0x40
10009e6c:	616b      	str	r3, [r5, #20]
10009e6e:	2300      	movs	r3, #0
10009e70:	9309      	str	r3, [sp, #36]	@ 0x24
10009e72:	2320      	movs	r3, #32
10009e74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
10009e78:	f8cd 800c 	str.w	r8, [sp, #12]
10009e7c:	2330      	movs	r3, #48	@ 0x30
10009e7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 1000a01c <_svfiprintf_r+0x1e4>
10009e82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
10009e86:	f04f 0901 	mov.w	r9, #1
10009e8a:	4623      	mov	r3, r4
10009e8c:	469a      	mov	sl, r3
10009e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
10009e92:	b10a      	cbz	r2, 10009e98 <_svfiprintf_r+0x60>
10009e94:	2a25      	cmp	r2, #37	@ 0x25
10009e96:	d1f9      	bne.n	10009e8c <_svfiprintf_r+0x54>
10009e98:	ebba 0b04 	subs.w	fp, sl, r4
10009e9c:	d00b      	beq.n	10009eb6 <_svfiprintf_r+0x7e>
10009e9e:	465b      	mov	r3, fp
10009ea0:	4622      	mov	r2, r4
10009ea2:	4629      	mov	r1, r5
10009ea4:	4638      	mov	r0, r7
10009ea6:	f7ff ff6b 	bl	10009d80 <__ssputs_r>
10009eaa:	3001      	adds	r0, #1
10009eac:	f000 80a7 	beq.w	10009ffe <_svfiprintf_r+0x1c6>
10009eb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10009eb2:	445a      	add	r2, fp
10009eb4:	9209      	str	r2, [sp, #36]	@ 0x24
10009eb6:	f89a 3000 	ldrb.w	r3, [sl]
10009eba:	2b00      	cmp	r3, #0
10009ebc:	f000 809f 	beq.w	10009ffe <_svfiprintf_r+0x1c6>
10009ec0:	2300      	movs	r3, #0
10009ec2:	f04f 32ff 	mov.w	r2, #4294967295
10009ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
10009eca:	f10a 0a01 	add.w	sl, sl, #1
10009ece:	9304      	str	r3, [sp, #16]
10009ed0:	9307      	str	r3, [sp, #28]
10009ed2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
10009ed6:	931a      	str	r3, [sp, #104]	@ 0x68
10009ed8:	4654      	mov	r4, sl
10009eda:	2205      	movs	r2, #5
10009edc:	f814 1b01 	ldrb.w	r1, [r4], #1
10009ee0:	484e      	ldr	r0, [pc, #312]	@ (1000a01c <_svfiprintf_r+0x1e4>)
10009ee2:	f7f6 f8c5 	bl	10000070 <memchr>
10009ee6:	9a04      	ldr	r2, [sp, #16]
10009ee8:	b9d8      	cbnz	r0, 10009f22 <_svfiprintf_r+0xea>
10009eea:	06d0      	lsls	r0, r2, #27
10009eec:	bf44      	itt	mi
10009eee:	2320      	movmi	r3, #32
10009ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10009ef4:	0711      	lsls	r1, r2, #28
10009ef6:	bf44      	itt	mi
10009ef8:	232b      	movmi	r3, #43	@ 0x2b
10009efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10009efe:	f89a 3000 	ldrb.w	r3, [sl]
10009f02:	2b2a      	cmp	r3, #42	@ 0x2a
10009f04:	d015      	beq.n	10009f32 <_svfiprintf_r+0xfa>
10009f06:	9a07      	ldr	r2, [sp, #28]
10009f08:	4654      	mov	r4, sl
10009f0a:	2000      	movs	r0, #0
10009f0c:	f04f 0c0a 	mov.w	ip, #10
10009f10:	4621      	mov	r1, r4
10009f12:	f811 3b01 	ldrb.w	r3, [r1], #1
10009f16:	3b30      	subs	r3, #48	@ 0x30
10009f18:	2b09      	cmp	r3, #9
10009f1a:	d94b      	bls.n	10009fb4 <_svfiprintf_r+0x17c>
10009f1c:	b1b0      	cbz	r0, 10009f4c <_svfiprintf_r+0x114>
10009f1e:	9207      	str	r2, [sp, #28]
10009f20:	e014      	b.n	10009f4c <_svfiprintf_r+0x114>
10009f22:	eba0 0308 	sub.w	r3, r0, r8
10009f26:	fa09 f303 	lsl.w	r3, r9, r3
10009f2a:	4313      	orrs	r3, r2
10009f2c:	9304      	str	r3, [sp, #16]
10009f2e:	46a2      	mov	sl, r4
10009f30:	e7d2      	b.n	10009ed8 <_svfiprintf_r+0xa0>
10009f32:	9b03      	ldr	r3, [sp, #12]
10009f34:	1d19      	adds	r1, r3, #4
10009f36:	681b      	ldr	r3, [r3, #0]
10009f38:	9103      	str	r1, [sp, #12]
10009f3a:	2b00      	cmp	r3, #0
10009f3c:	bfbb      	ittet	lt
10009f3e:	425b      	neglt	r3, r3
10009f40:	f042 0202 	orrlt.w	r2, r2, #2
10009f44:	9307      	strge	r3, [sp, #28]
10009f46:	9307      	strlt	r3, [sp, #28]
10009f48:	bfb8      	it	lt
10009f4a:	9204      	strlt	r2, [sp, #16]
10009f4c:	7823      	ldrb	r3, [r4, #0]
10009f4e:	2b2e      	cmp	r3, #46	@ 0x2e
10009f50:	d10a      	bne.n	10009f68 <_svfiprintf_r+0x130>
10009f52:	7863      	ldrb	r3, [r4, #1]
10009f54:	2b2a      	cmp	r3, #42	@ 0x2a
10009f56:	d132      	bne.n	10009fbe <_svfiprintf_r+0x186>
10009f58:	9b03      	ldr	r3, [sp, #12]
10009f5a:	1d1a      	adds	r2, r3, #4
10009f5c:	681b      	ldr	r3, [r3, #0]
10009f5e:	9203      	str	r2, [sp, #12]
10009f60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
10009f64:	3402      	adds	r4, #2
10009f66:	9305      	str	r3, [sp, #20]
10009f68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 1000a02c <_svfiprintf_r+0x1f4>
10009f6c:	7821      	ldrb	r1, [r4, #0]
10009f6e:	2203      	movs	r2, #3
10009f70:	4650      	mov	r0, sl
10009f72:	f7f6 f87d 	bl	10000070 <memchr>
10009f76:	b138      	cbz	r0, 10009f88 <_svfiprintf_r+0x150>
10009f78:	9b04      	ldr	r3, [sp, #16]
10009f7a:	eba0 000a 	sub.w	r0, r0, sl
10009f7e:	2240      	movs	r2, #64	@ 0x40
10009f80:	4082      	lsls	r2, r0
10009f82:	4313      	orrs	r3, r2
10009f84:	3401      	adds	r4, #1
10009f86:	9304      	str	r3, [sp, #16]
10009f88:	f814 1b01 	ldrb.w	r1, [r4], #1
10009f8c:	4824      	ldr	r0, [pc, #144]	@ (1000a020 <_svfiprintf_r+0x1e8>)
10009f8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
10009f92:	2206      	movs	r2, #6
10009f94:	f7f6 f86c 	bl	10000070 <memchr>
10009f98:	2800      	cmp	r0, #0
10009f9a:	d036      	beq.n	1000a00a <_svfiprintf_r+0x1d2>
10009f9c:	4b21      	ldr	r3, [pc, #132]	@ (1000a024 <_svfiprintf_r+0x1ec>)
10009f9e:	bb1b      	cbnz	r3, 10009fe8 <_svfiprintf_r+0x1b0>
10009fa0:	9b03      	ldr	r3, [sp, #12]
10009fa2:	3307      	adds	r3, #7
10009fa4:	f023 0307 	bic.w	r3, r3, #7
10009fa8:	3308      	adds	r3, #8
10009faa:	9303      	str	r3, [sp, #12]
10009fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10009fae:	4433      	add	r3, r6
10009fb0:	9309      	str	r3, [sp, #36]	@ 0x24
10009fb2:	e76a      	b.n	10009e8a <_svfiprintf_r+0x52>
10009fb4:	fb0c 3202 	mla	r2, ip, r2, r3
10009fb8:	460c      	mov	r4, r1
10009fba:	2001      	movs	r0, #1
10009fbc:	e7a8      	b.n	10009f10 <_svfiprintf_r+0xd8>
10009fbe:	2300      	movs	r3, #0
10009fc0:	3401      	adds	r4, #1
10009fc2:	9305      	str	r3, [sp, #20]
10009fc4:	4619      	mov	r1, r3
10009fc6:	f04f 0c0a 	mov.w	ip, #10
10009fca:	4620      	mov	r0, r4
10009fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
10009fd0:	3a30      	subs	r2, #48	@ 0x30
10009fd2:	2a09      	cmp	r2, #9
10009fd4:	d903      	bls.n	10009fde <_svfiprintf_r+0x1a6>
10009fd6:	2b00      	cmp	r3, #0
10009fd8:	d0c6      	beq.n	10009f68 <_svfiprintf_r+0x130>
10009fda:	9105      	str	r1, [sp, #20]
10009fdc:	e7c4      	b.n	10009f68 <_svfiprintf_r+0x130>
10009fde:	fb0c 2101 	mla	r1, ip, r1, r2
10009fe2:	4604      	mov	r4, r0
10009fe4:	2301      	movs	r3, #1
10009fe6:	e7f0      	b.n	10009fca <_svfiprintf_r+0x192>
10009fe8:	ab03      	add	r3, sp, #12
10009fea:	9300      	str	r3, [sp, #0]
10009fec:	462a      	mov	r2, r5
10009fee:	4b0e      	ldr	r3, [pc, #56]	@ (1000a028 <_svfiprintf_r+0x1f0>)
10009ff0:	a904      	add	r1, sp, #16
10009ff2:	4638      	mov	r0, r7
10009ff4:	f3af 8000 	nop.w
10009ff8:	1c42      	adds	r2, r0, #1
10009ffa:	4606      	mov	r6, r0
10009ffc:	d1d6      	bne.n	10009fac <_svfiprintf_r+0x174>
10009ffe:	89ab      	ldrh	r3, [r5, #12]
1000a000:	065b      	lsls	r3, r3, #25
1000a002:	f53f af2d 	bmi.w	10009e60 <_svfiprintf_r+0x28>
1000a006:	9809      	ldr	r0, [sp, #36]	@ 0x24
1000a008:	e72c      	b.n	10009e64 <_svfiprintf_r+0x2c>
1000a00a:	ab03      	add	r3, sp, #12
1000a00c:	9300      	str	r3, [sp, #0]
1000a00e:	462a      	mov	r2, r5
1000a010:	4b05      	ldr	r3, [pc, #20]	@ (1000a028 <_svfiprintf_r+0x1f0>)
1000a012:	a904      	add	r1, sp, #16
1000a014:	4638      	mov	r0, r7
1000a016:	f000 f9bb 	bl	1000a390 <_printf_i>
1000a01a:	e7ed      	b.n	10009ff8 <_svfiprintf_r+0x1c0>
1000a01c:	1000b002 	.word	0x1000b002
1000a020:	1000b00c 	.word	0x1000b00c
1000a024:	00000000 	.word	0x00000000
1000a028:	10009d81 	.word	0x10009d81
1000a02c:	1000b008 	.word	0x1000b008

1000a030 <__sfputc_r>:
1000a030:	6893      	ldr	r3, [r2, #8]
1000a032:	3b01      	subs	r3, #1
1000a034:	2b00      	cmp	r3, #0
1000a036:	b410      	push	{r4}
1000a038:	6093      	str	r3, [r2, #8]
1000a03a:	da08      	bge.n	1000a04e <__sfputc_r+0x1e>
1000a03c:	6994      	ldr	r4, [r2, #24]
1000a03e:	42a3      	cmp	r3, r4
1000a040:	db01      	blt.n	1000a046 <__sfputc_r+0x16>
1000a042:	290a      	cmp	r1, #10
1000a044:	d103      	bne.n	1000a04e <__sfputc_r+0x1e>
1000a046:	f85d 4b04 	ldr.w	r4, [sp], #4
1000a04a:	f000 bb6d 	b.w	1000a728 <__swbuf_r>
1000a04e:	6813      	ldr	r3, [r2, #0]
1000a050:	1c58      	adds	r0, r3, #1
1000a052:	6010      	str	r0, [r2, #0]
1000a054:	7019      	strb	r1, [r3, #0]
1000a056:	4608      	mov	r0, r1
1000a058:	f85d 4b04 	ldr.w	r4, [sp], #4
1000a05c:	4770      	bx	lr

1000a05e <__sfputs_r>:
1000a05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a060:	4606      	mov	r6, r0
1000a062:	460f      	mov	r7, r1
1000a064:	4614      	mov	r4, r2
1000a066:	18d5      	adds	r5, r2, r3
1000a068:	42ac      	cmp	r4, r5
1000a06a:	d101      	bne.n	1000a070 <__sfputs_r+0x12>
1000a06c:	2000      	movs	r0, #0
1000a06e:	e007      	b.n	1000a080 <__sfputs_r+0x22>
1000a070:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a074:	463a      	mov	r2, r7
1000a076:	4630      	mov	r0, r6
1000a078:	f7ff ffda 	bl	1000a030 <__sfputc_r>
1000a07c:	1c43      	adds	r3, r0, #1
1000a07e:	d1f3      	bne.n	1000a068 <__sfputs_r+0xa>
1000a080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000a084 <_vfiprintf_r>:
1000a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000a088:	460d      	mov	r5, r1
1000a08a:	b09d      	sub	sp, #116	@ 0x74
1000a08c:	4614      	mov	r4, r2
1000a08e:	4698      	mov	r8, r3
1000a090:	4606      	mov	r6, r0
1000a092:	b118      	cbz	r0, 1000a09c <_vfiprintf_r+0x18>
1000a094:	6a03      	ldr	r3, [r0, #32]
1000a096:	b90b      	cbnz	r3, 1000a09c <_vfiprintf_r+0x18>
1000a098:	f7ff fcb8 	bl	10009a0c <__sinit>
1000a09c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a09e:	07d9      	lsls	r1, r3, #31
1000a0a0:	d405      	bmi.n	1000a0ae <_vfiprintf_r+0x2a>
1000a0a2:	89ab      	ldrh	r3, [r5, #12]
1000a0a4:	059a      	lsls	r2, r3, #22
1000a0a6:	d402      	bmi.n	1000a0ae <_vfiprintf_r+0x2a>
1000a0a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a0aa:	f7ff fe08 	bl	10009cbe <__retarget_lock_acquire_recursive>
1000a0ae:	89ab      	ldrh	r3, [r5, #12]
1000a0b0:	071b      	lsls	r3, r3, #28
1000a0b2:	d501      	bpl.n	1000a0b8 <_vfiprintf_r+0x34>
1000a0b4:	692b      	ldr	r3, [r5, #16]
1000a0b6:	b99b      	cbnz	r3, 1000a0e0 <_vfiprintf_r+0x5c>
1000a0b8:	4629      	mov	r1, r5
1000a0ba:	4630      	mov	r0, r6
1000a0bc:	f000 fb72 	bl	1000a7a4 <__swsetup_r>
1000a0c0:	b170      	cbz	r0, 1000a0e0 <_vfiprintf_r+0x5c>
1000a0c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a0c4:	07dc      	lsls	r4, r3, #31
1000a0c6:	d504      	bpl.n	1000a0d2 <_vfiprintf_r+0x4e>
1000a0c8:	f04f 30ff 	mov.w	r0, #4294967295
1000a0cc:	b01d      	add	sp, #116	@ 0x74
1000a0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000a0d2:	89ab      	ldrh	r3, [r5, #12]
1000a0d4:	0598      	lsls	r0, r3, #22
1000a0d6:	d4f7      	bmi.n	1000a0c8 <_vfiprintf_r+0x44>
1000a0d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a0da:	f7ff fdf1 	bl	10009cc0 <__retarget_lock_release_recursive>
1000a0de:	e7f3      	b.n	1000a0c8 <_vfiprintf_r+0x44>
1000a0e0:	2300      	movs	r3, #0
1000a0e2:	9309      	str	r3, [sp, #36]	@ 0x24
1000a0e4:	2320      	movs	r3, #32
1000a0e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1000a0ea:	f8cd 800c 	str.w	r8, [sp, #12]
1000a0ee:	2330      	movs	r3, #48	@ 0x30
1000a0f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 1000a2a0 <_vfiprintf_r+0x21c>
1000a0f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
1000a0f8:	f04f 0901 	mov.w	r9, #1
1000a0fc:	4623      	mov	r3, r4
1000a0fe:	469a      	mov	sl, r3
1000a100:	f813 2b01 	ldrb.w	r2, [r3], #1
1000a104:	b10a      	cbz	r2, 1000a10a <_vfiprintf_r+0x86>
1000a106:	2a25      	cmp	r2, #37	@ 0x25
1000a108:	d1f9      	bne.n	1000a0fe <_vfiprintf_r+0x7a>
1000a10a:	ebba 0b04 	subs.w	fp, sl, r4
1000a10e:	d00b      	beq.n	1000a128 <_vfiprintf_r+0xa4>
1000a110:	465b      	mov	r3, fp
1000a112:	4622      	mov	r2, r4
1000a114:	4629      	mov	r1, r5
1000a116:	4630      	mov	r0, r6
1000a118:	f7ff ffa1 	bl	1000a05e <__sfputs_r>
1000a11c:	3001      	adds	r0, #1
1000a11e:	f000 80a7 	beq.w	1000a270 <_vfiprintf_r+0x1ec>
1000a122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000a124:	445a      	add	r2, fp
1000a126:	9209      	str	r2, [sp, #36]	@ 0x24
1000a128:	f89a 3000 	ldrb.w	r3, [sl]
1000a12c:	2b00      	cmp	r3, #0
1000a12e:	f000 809f 	beq.w	1000a270 <_vfiprintf_r+0x1ec>
1000a132:	2300      	movs	r3, #0
1000a134:	f04f 32ff 	mov.w	r2, #4294967295
1000a138:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000a13c:	f10a 0a01 	add.w	sl, sl, #1
1000a140:	9304      	str	r3, [sp, #16]
1000a142:	9307      	str	r3, [sp, #28]
1000a144:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1000a148:	931a      	str	r3, [sp, #104]	@ 0x68
1000a14a:	4654      	mov	r4, sl
1000a14c:	2205      	movs	r2, #5
1000a14e:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a152:	4853      	ldr	r0, [pc, #332]	@ (1000a2a0 <_vfiprintf_r+0x21c>)
1000a154:	f7f5 ff8c 	bl	10000070 <memchr>
1000a158:	9a04      	ldr	r2, [sp, #16]
1000a15a:	b9d8      	cbnz	r0, 1000a194 <_vfiprintf_r+0x110>
1000a15c:	06d1      	lsls	r1, r2, #27
1000a15e:	bf44      	itt	mi
1000a160:	2320      	movmi	r3, #32
1000a162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a166:	0713      	lsls	r3, r2, #28
1000a168:	bf44      	itt	mi
1000a16a:	232b      	movmi	r3, #43	@ 0x2b
1000a16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a170:	f89a 3000 	ldrb.w	r3, [sl]
1000a174:	2b2a      	cmp	r3, #42	@ 0x2a
1000a176:	d015      	beq.n	1000a1a4 <_vfiprintf_r+0x120>
1000a178:	9a07      	ldr	r2, [sp, #28]
1000a17a:	4654      	mov	r4, sl
1000a17c:	2000      	movs	r0, #0
1000a17e:	f04f 0c0a 	mov.w	ip, #10
1000a182:	4621      	mov	r1, r4
1000a184:	f811 3b01 	ldrb.w	r3, [r1], #1
1000a188:	3b30      	subs	r3, #48	@ 0x30
1000a18a:	2b09      	cmp	r3, #9
1000a18c:	d94b      	bls.n	1000a226 <_vfiprintf_r+0x1a2>
1000a18e:	b1b0      	cbz	r0, 1000a1be <_vfiprintf_r+0x13a>
1000a190:	9207      	str	r2, [sp, #28]
1000a192:	e014      	b.n	1000a1be <_vfiprintf_r+0x13a>
1000a194:	eba0 0308 	sub.w	r3, r0, r8
1000a198:	fa09 f303 	lsl.w	r3, r9, r3
1000a19c:	4313      	orrs	r3, r2
1000a19e:	9304      	str	r3, [sp, #16]
1000a1a0:	46a2      	mov	sl, r4
1000a1a2:	e7d2      	b.n	1000a14a <_vfiprintf_r+0xc6>
1000a1a4:	9b03      	ldr	r3, [sp, #12]
1000a1a6:	1d19      	adds	r1, r3, #4
1000a1a8:	681b      	ldr	r3, [r3, #0]
1000a1aa:	9103      	str	r1, [sp, #12]
1000a1ac:	2b00      	cmp	r3, #0
1000a1ae:	bfbb      	ittet	lt
1000a1b0:	425b      	neglt	r3, r3
1000a1b2:	f042 0202 	orrlt.w	r2, r2, #2
1000a1b6:	9307      	strge	r3, [sp, #28]
1000a1b8:	9307      	strlt	r3, [sp, #28]
1000a1ba:	bfb8      	it	lt
1000a1bc:	9204      	strlt	r2, [sp, #16]
1000a1be:	7823      	ldrb	r3, [r4, #0]
1000a1c0:	2b2e      	cmp	r3, #46	@ 0x2e
1000a1c2:	d10a      	bne.n	1000a1da <_vfiprintf_r+0x156>
1000a1c4:	7863      	ldrb	r3, [r4, #1]
1000a1c6:	2b2a      	cmp	r3, #42	@ 0x2a
1000a1c8:	d132      	bne.n	1000a230 <_vfiprintf_r+0x1ac>
1000a1ca:	9b03      	ldr	r3, [sp, #12]
1000a1cc:	1d1a      	adds	r2, r3, #4
1000a1ce:	681b      	ldr	r3, [r3, #0]
1000a1d0:	9203      	str	r2, [sp, #12]
1000a1d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
1000a1d6:	3402      	adds	r4, #2
1000a1d8:	9305      	str	r3, [sp, #20]
1000a1da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 1000a2b0 <_vfiprintf_r+0x22c>
1000a1de:	7821      	ldrb	r1, [r4, #0]
1000a1e0:	2203      	movs	r2, #3
1000a1e2:	4650      	mov	r0, sl
1000a1e4:	f7f5 ff44 	bl	10000070 <memchr>
1000a1e8:	b138      	cbz	r0, 1000a1fa <_vfiprintf_r+0x176>
1000a1ea:	9b04      	ldr	r3, [sp, #16]
1000a1ec:	eba0 000a 	sub.w	r0, r0, sl
1000a1f0:	2240      	movs	r2, #64	@ 0x40
1000a1f2:	4082      	lsls	r2, r0
1000a1f4:	4313      	orrs	r3, r2
1000a1f6:	3401      	adds	r4, #1
1000a1f8:	9304      	str	r3, [sp, #16]
1000a1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a1fe:	4829      	ldr	r0, [pc, #164]	@ (1000a2a4 <_vfiprintf_r+0x220>)
1000a200:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
1000a204:	2206      	movs	r2, #6
1000a206:	f7f5 ff33 	bl	10000070 <memchr>
1000a20a:	2800      	cmp	r0, #0
1000a20c:	d03f      	beq.n	1000a28e <_vfiprintf_r+0x20a>
1000a20e:	4b26      	ldr	r3, [pc, #152]	@ (1000a2a8 <_vfiprintf_r+0x224>)
1000a210:	bb1b      	cbnz	r3, 1000a25a <_vfiprintf_r+0x1d6>
1000a212:	9b03      	ldr	r3, [sp, #12]
1000a214:	3307      	adds	r3, #7
1000a216:	f023 0307 	bic.w	r3, r3, #7
1000a21a:	3308      	adds	r3, #8
1000a21c:	9303      	str	r3, [sp, #12]
1000a21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a220:	443b      	add	r3, r7
1000a222:	9309      	str	r3, [sp, #36]	@ 0x24
1000a224:	e76a      	b.n	1000a0fc <_vfiprintf_r+0x78>
1000a226:	fb0c 3202 	mla	r2, ip, r2, r3
1000a22a:	460c      	mov	r4, r1
1000a22c:	2001      	movs	r0, #1
1000a22e:	e7a8      	b.n	1000a182 <_vfiprintf_r+0xfe>
1000a230:	2300      	movs	r3, #0
1000a232:	3401      	adds	r4, #1
1000a234:	9305      	str	r3, [sp, #20]
1000a236:	4619      	mov	r1, r3
1000a238:	f04f 0c0a 	mov.w	ip, #10
1000a23c:	4620      	mov	r0, r4
1000a23e:	f810 2b01 	ldrb.w	r2, [r0], #1
1000a242:	3a30      	subs	r2, #48	@ 0x30
1000a244:	2a09      	cmp	r2, #9
1000a246:	d903      	bls.n	1000a250 <_vfiprintf_r+0x1cc>
1000a248:	2b00      	cmp	r3, #0
1000a24a:	d0c6      	beq.n	1000a1da <_vfiprintf_r+0x156>
1000a24c:	9105      	str	r1, [sp, #20]
1000a24e:	e7c4      	b.n	1000a1da <_vfiprintf_r+0x156>
1000a250:	fb0c 2101 	mla	r1, ip, r1, r2
1000a254:	4604      	mov	r4, r0
1000a256:	2301      	movs	r3, #1
1000a258:	e7f0      	b.n	1000a23c <_vfiprintf_r+0x1b8>
1000a25a:	ab03      	add	r3, sp, #12
1000a25c:	9300      	str	r3, [sp, #0]
1000a25e:	462a      	mov	r2, r5
1000a260:	4b12      	ldr	r3, [pc, #72]	@ (1000a2ac <_vfiprintf_r+0x228>)
1000a262:	a904      	add	r1, sp, #16
1000a264:	4630      	mov	r0, r6
1000a266:	f3af 8000 	nop.w
1000a26a:	4607      	mov	r7, r0
1000a26c:	1c78      	adds	r0, r7, #1
1000a26e:	d1d6      	bne.n	1000a21e <_vfiprintf_r+0x19a>
1000a270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a272:	07d9      	lsls	r1, r3, #31
1000a274:	d405      	bmi.n	1000a282 <_vfiprintf_r+0x1fe>
1000a276:	89ab      	ldrh	r3, [r5, #12]
1000a278:	059a      	lsls	r2, r3, #22
1000a27a:	d402      	bmi.n	1000a282 <_vfiprintf_r+0x1fe>
1000a27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a27e:	f7ff fd1f 	bl	10009cc0 <__retarget_lock_release_recursive>
1000a282:	89ab      	ldrh	r3, [r5, #12]
1000a284:	065b      	lsls	r3, r3, #25
1000a286:	f53f af1f 	bmi.w	1000a0c8 <_vfiprintf_r+0x44>
1000a28a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1000a28c:	e71e      	b.n	1000a0cc <_vfiprintf_r+0x48>
1000a28e:	ab03      	add	r3, sp, #12
1000a290:	9300      	str	r3, [sp, #0]
1000a292:	462a      	mov	r2, r5
1000a294:	4b05      	ldr	r3, [pc, #20]	@ (1000a2ac <_vfiprintf_r+0x228>)
1000a296:	a904      	add	r1, sp, #16
1000a298:	4630      	mov	r0, r6
1000a29a:	f000 f879 	bl	1000a390 <_printf_i>
1000a29e:	e7e4      	b.n	1000a26a <_vfiprintf_r+0x1e6>
1000a2a0:	1000b002 	.word	0x1000b002
1000a2a4:	1000b00c 	.word	0x1000b00c
1000a2a8:	00000000 	.word	0x00000000
1000a2ac:	1000a05f 	.word	0x1000a05f
1000a2b0:	1000b008 	.word	0x1000b008

1000a2b4 <_printf_common>:
1000a2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000a2b8:	4616      	mov	r6, r2
1000a2ba:	4698      	mov	r8, r3
1000a2bc:	688a      	ldr	r2, [r1, #8]
1000a2be:	690b      	ldr	r3, [r1, #16]
1000a2c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
1000a2c4:	4293      	cmp	r3, r2
1000a2c6:	bfb8      	it	lt
1000a2c8:	4613      	movlt	r3, r2
1000a2ca:	6033      	str	r3, [r6, #0]
1000a2cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
1000a2d0:	4607      	mov	r7, r0
1000a2d2:	460c      	mov	r4, r1
1000a2d4:	b10a      	cbz	r2, 1000a2da <_printf_common+0x26>
1000a2d6:	3301      	adds	r3, #1
1000a2d8:	6033      	str	r3, [r6, #0]
1000a2da:	6823      	ldr	r3, [r4, #0]
1000a2dc:	0699      	lsls	r1, r3, #26
1000a2de:	bf42      	ittt	mi
1000a2e0:	6833      	ldrmi	r3, [r6, #0]
1000a2e2:	3302      	addmi	r3, #2
1000a2e4:	6033      	strmi	r3, [r6, #0]
1000a2e6:	6825      	ldr	r5, [r4, #0]
1000a2e8:	f015 0506 	ands.w	r5, r5, #6
1000a2ec:	d106      	bne.n	1000a2fc <_printf_common+0x48>
1000a2ee:	f104 0a19 	add.w	sl, r4, #25
1000a2f2:	68e3      	ldr	r3, [r4, #12]
1000a2f4:	6832      	ldr	r2, [r6, #0]
1000a2f6:	1a9b      	subs	r3, r3, r2
1000a2f8:	42ab      	cmp	r3, r5
1000a2fa:	dc26      	bgt.n	1000a34a <_printf_common+0x96>
1000a2fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1000a300:	6822      	ldr	r2, [r4, #0]
1000a302:	3b00      	subs	r3, #0
1000a304:	bf18      	it	ne
1000a306:	2301      	movne	r3, #1
1000a308:	0692      	lsls	r2, r2, #26
1000a30a:	d42b      	bmi.n	1000a364 <_printf_common+0xb0>
1000a30c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1000a310:	4641      	mov	r1, r8
1000a312:	4638      	mov	r0, r7
1000a314:	47c8      	blx	r9
1000a316:	3001      	adds	r0, #1
1000a318:	d01e      	beq.n	1000a358 <_printf_common+0xa4>
1000a31a:	6823      	ldr	r3, [r4, #0]
1000a31c:	6922      	ldr	r2, [r4, #16]
1000a31e:	f003 0306 	and.w	r3, r3, #6
1000a322:	2b04      	cmp	r3, #4
1000a324:	bf02      	ittt	eq
1000a326:	68e5      	ldreq	r5, [r4, #12]
1000a328:	6833      	ldreq	r3, [r6, #0]
1000a32a:	1aed      	subeq	r5, r5, r3
1000a32c:	68a3      	ldr	r3, [r4, #8]
1000a32e:	bf0c      	ite	eq
1000a330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000a334:	2500      	movne	r5, #0
1000a336:	4293      	cmp	r3, r2
1000a338:	bfc4      	itt	gt
1000a33a:	1a9b      	subgt	r3, r3, r2
1000a33c:	18ed      	addgt	r5, r5, r3
1000a33e:	2600      	movs	r6, #0
1000a340:	341a      	adds	r4, #26
1000a342:	42b5      	cmp	r5, r6
1000a344:	d11a      	bne.n	1000a37c <_printf_common+0xc8>
1000a346:	2000      	movs	r0, #0
1000a348:	e008      	b.n	1000a35c <_printf_common+0xa8>
1000a34a:	2301      	movs	r3, #1
1000a34c:	4652      	mov	r2, sl
1000a34e:	4641      	mov	r1, r8
1000a350:	4638      	mov	r0, r7
1000a352:	47c8      	blx	r9
1000a354:	3001      	adds	r0, #1
1000a356:	d103      	bne.n	1000a360 <_printf_common+0xac>
1000a358:	f04f 30ff 	mov.w	r0, #4294967295
1000a35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a360:	3501      	adds	r5, #1
1000a362:	e7c6      	b.n	1000a2f2 <_printf_common+0x3e>
1000a364:	18e1      	adds	r1, r4, r3
1000a366:	1c5a      	adds	r2, r3, #1
1000a368:	2030      	movs	r0, #48	@ 0x30
1000a36a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
1000a36e:	4422      	add	r2, r4
1000a370:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1000a374:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1000a378:	3302      	adds	r3, #2
1000a37a:	e7c7      	b.n	1000a30c <_printf_common+0x58>
1000a37c:	2301      	movs	r3, #1
1000a37e:	4622      	mov	r2, r4
1000a380:	4641      	mov	r1, r8
1000a382:	4638      	mov	r0, r7
1000a384:	47c8      	blx	r9
1000a386:	3001      	adds	r0, #1
1000a388:	d0e6      	beq.n	1000a358 <_printf_common+0xa4>
1000a38a:	3601      	adds	r6, #1
1000a38c:	e7d9      	b.n	1000a342 <_printf_common+0x8e>
	...

1000a390 <_printf_i>:
1000a390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000a394:	7e0f      	ldrb	r7, [r1, #24]
1000a396:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1000a398:	2f78      	cmp	r7, #120	@ 0x78
1000a39a:	4691      	mov	r9, r2
1000a39c:	4680      	mov	r8, r0
1000a39e:	460c      	mov	r4, r1
1000a3a0:	469a      	mov	sl, r3
1000a3a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
1000a3a6:	d807      	bhi.n	1000a3b8 <_printf_i+0x28>
1000a3a8:	2f62      	cmp	r7, #98	@ 0x62
1000a3aa:	d80a      	bhi.n	1000a3c2 <_printf_i+0x32>
1000a3ac:	2f00      	cmp	r7, #0
1000a3ae:	f000 80d2 	beq.w	1000a556 <_printf_i+0x1c6>
1000a3b2:	2f58      	cmp	r7, #88	@ 0x58
1000a3b4:	f000 80b9 	beq.w	1000a52a <_printf_i+0x19a>
1000a3b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000a3bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
1000a3c0:	e03a      	b.n	1000a438 <_printf_i+0xa8>
1000a3c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
1000a3c6:	2b15      	cmp	r3, #21
1000a3c8:	d8f6      	bhi.n	1000a3b8 <_printf_i+0x28>
1000a3ca:	a101      	add	r1, pc, #4	@ (adr r1, 1000a3d0 <_printf_i+0x40>)
1000a3cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000a3d0:	1000a429 	.word	0x1000a429
1000a3d4:	1000a43d 	.word	0x1000a43d
1000a3d8:	1000a3b9 	.word	0x1000a3b9
1000a3dc:	1000a3b9 	.word	0x1000a3b9
1000a3e0:	1000a3b9 	.word	0x1000a3b9
1000a3e4:	1000a3b9 	.word	0x1000a3b9
1000a3e8:	1000a43d 	.word	0x1000a43d
1000a3ec:	1000a3b9 	.word	0x1000a3b9
1000a3f0:	1000a3b9 	.word	0x1000a3b9
1000a3f4:	1000a3b9 	.word	0x1000a3b9
1000a3f8:	1000a3b9 	.word	0x1000a3b9
1000a3fc:	1000a53d 	.word	0x1000a53d
1000a400:	1000a467 	.word	0x1000a467
1000a404:	1000a4f7 	.word	0x1000a4f7
1000a408:	1000a3b9 	.word	0x1000a3b9
1000a40c:	1000a3b9 	.word	0x1000a3b9
1000a410:	1000a55f 	.word	0x1000a55f
1000a414:	1000a3b9 	.word	0x1000a3b9
1000a418:	1000a467 	.word	0x1000a467
1000a41c:	1000a3b9 	.word	0x1000a3b9
1000a420:	1000a3b9 	.word	0x1000a3b9
1000a424:	1000a4ff 	.word	0x1000a4ff
1000a428:	6833      	ldr	r3, [r6, #0]
1000a42a:	1d1a      	adds	r2, r3, #4
1000a42c:	681b      	ldr	r3, [r3, #0]
1000a42e:	6032      	str	r2, [r6, #0]
1000a430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000a434:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
1000a438:	2301      	movs	r3, #1
1000a43a:	e09d      	b.n	1000a578 <_printf_i+0x1e8>
1000a43c:	6833      	ldr	r3, [r6, #0]
1000a43e:	6820      	ldr	r0, [r4, #0]
1000a440:	1d19      	adds	r1, r3, #4
1000a442:	6031      	str	r1, [r6, #0]
1000a444:	0606      	lsls	r6, r0, #24
1000a446:	d501      	bpl.n	1000a44c <_printf_i+0xbc>
1000a448:	681d      	ldr	r5, [r3, #0]
1000a44a:	e003      	b.n	1000a454 <_printf_i+0xc4>
1000a44c:	0645      	lsls	r5, r0, #25
1000a44e:	d5fb      	bpl.n	1000a448 <_printf_i+0xb8>
1000a450:	f9b3 5000 	ldrsh.w	r5, [r3]
1000a454:	2d00      	cmp	r5, #0
1000a456:	da03      	bge.n	1000a460 <_printf_i+0xd0>
1000a458:	232d      	movs	r3, #45	@ 0x2d
1000a45a:	426d      	negs	r5, r5
1000a45c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000a460:	4859      	ldr	r0, [pc, #356]	@ (1000a5c8 <_printf_i+0x238>)
1000a462:	230a      	movs	r3, #10
1000a464:	e011      	b.n	1000a48a <_printf_i+0xfa>
1000a466:	6821      	ldr	r1, [r4, #0]
1000a468:	6833      	ldr	r3, [r6, #0]
1000a46a:	0608      	lsls	r0, r1, #24
1000a46c:	f853 5b04 	ldr.w	r5, [r3], #4
1000a470:	d402      	bmi.n	1000a478 <_printf_i+0xe8>
1000a472:	0649      	lsls	r1, r1, #25
1000a474:	bf48      	it	mi
1000a476:	b2ad      	uxthmi	r5, r5
1000a478:	2f6f      	cmp	r7, #111	@ 0x6f
1000a47a:	4853      	ldr	r0, [pc, #332]	@ (1000a5c8 <_printf_i+0x238>)
1000a47c:	6033      	str	r3, [r6, #0]
1000a47e:	bf14      	ite	ne
1000a480:	230a      	movne	r3, #10
1000a482:	2308      	moveq	r3, #8
1000a484:	2100      	movs	r1, #0
1000a486:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
1000a48a:	6866      	ldr	r6, [r4, #4]
1000a48c:	60a6      	str	r6, [r4, #8]
1000a48e:	2e00      	cmp	r6, #0
1000a490:	bfa2      	ittt	ge
1000a492:	6821      	ldrge	r1, [r4, #0]
1000a494:	f021 0104 	bicge.w	r1, r1, #4
1000a498:	6021      	strge	r1, [r4, #0]
1000a49a:	b90d      	cbnz	r5, 1000a4a0 <_printf_i+0x110>
1000a49c:	2e00      	cmp	r6, #0
1000a49e:	d04b      	beq.n	1000a538 <_printf_i+0x1a8>
1000a4a0:	4616      	mov	r6, r2
1000a4a2:	fbb5 f1f3 	udiv	r1, r5, r3
1000a4a6:	fb03 5711 	mls	r7, r3, r1, r5
1000a4aa:	5dc7      	ldrb	r7, [r0, r7]
1000a4ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
1000a4b0:	462f      	mov	r7, r5
1000a4b2:	42bb      	cmp	r3, r7
1000a4b4:	460d      	mov	r5, r1
1000a4b6:	d9f4      	bls.n	1000a4a2 <_printf_i+0x112>
1000a4b8:	2b08      	cmp	r3, #8
1000a4ba:	d10b      	bne.n	1000a4d4 <_printf_i+0x144>
1000a4bc:	6823      	ldr	r3, [r4, #0]
1000a4be:	07df      	lsls	r7, r3, #31
1000a4c0:	d508      	bpl.n	1000a4d4 <_printf_i+0x144>
1000a4c2:	6923      	ldr	r3, [r4, #16]
1000a4c4:	6861      	ldr	r1, [r4, #4]
1000a4c6:	4299      	cmp	r1, r3
1000a4c8:	bfde      	ittt	le
1000a4ca:	2330      	movle	r3, #48	@ 0x30
1000a4cc:	f806 3c01 	strble.w	r3, [r6, #-1]
1000a4d0:	f106 36ff 	addle.w	r6, r6, #4294967295
1000a4d4:	1b92      	subs	r2, r2, r6
1000a4d6:	6122      	str	r2, [r4, #16]
1000a4d8:	f8cd a000 	str.w	sl, [sp]
1000a4dc:	464b      	mov	r3, r9
1000a4de:	aa03      	add	r2, sp, #12
1000a4e0:	4621      	mov	r1, r4
1000a4e2:	4640      	mov	r0, r8
1000a4e4:	f7ff fee6 	bl	1000a2b4 <_printf_common>
1000a4e8:	3001      	adds	r0, #1
1000a4ea:	d14a      	bne.n	1000a582 <_printf_i+0x1f2>
1000a4ec:	f04f 30ff 	mov.w	r0, #4294967295
1000a4f0:	b004      	add	sp, #16
1000a4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a4f6:	6823      	ldr	r3, [r4, #0]
1000a4f8:	f043 0320 	orr.w	r3, r3, #32
1000a4fc:	6023      	str	r3, [r4, #0]
1000a4fe:	4833      	ldr	r0, [pc, #204]	@ (1000a5cc <_printf_i+0x23c>)
1000a500:	2778      	movs	r7, #120	@ 0x78
1000a502:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
1000a506:	6823      	ldr	r3, [r4, #0]
1000a508:	6831      	ldr	r1, [r6, #0]
1000a50a:	061f      	lsls	r7, r3, #24
1000a50c:	f851 5b04 	ldr.w	r5, [r1], #4
1000a510:	d402      	bmi.n	1000a518 <_printf_i+0x188>
1000a512:	065f      	lsls	r7, r3, #25
1000a514:	bf48      	it	mi
1000a516:	b2ad      	uxthmi	r5, r5
1000a518:	6031      	str	r1, [r6, #0]
1000a51a:	07d9      	lsls	r1, r3, #31
1000a51c:	bf44      	itt	mi
1000a51e:	f043 0320 	orrmi.w	r3, r3, #32
1000a522:	6023      	strmi	r3, [r4, #0]
1000a524:	b11d      	cbz	r5, 1000a52e <_printf_i+0x19e>
1000a526:	2310      	movs	r3, #16
1000a528:	e7ac      	b.n	1000a484 <_printf_i+0xf4>
1000a52a:	4827      	ldr	r0, [pc, #156]	@ (1000a5c8 <_printf_i+0x238>)
1000a52c:	e7e9      	b.n	1000a502 <_printf_i+0x172>
1000a52e:	6823      	ldr	r3, [r4, #0]
1000a530:	f023 0320 	bic.w	r3, r3, #32
1000a534:	6023      	str	r3, [r4, #0]
1000a536:	e7f6      	b.n	1000a526 <_printf_i+0x196>
1000a538:	4616      	mov	r6, r2
1000a53a:	e7bd      	b.n	1000a4b8 <_printf_i+0x128>
1000a53c:	6833      	ldr	r3, [r6, #0]
1000a53e:	6825      	ldr	r5, [r4, #0]
1000a540:	6961      	ldr	r1, [r4, #20]
1000a542:	1d18      	adds	r0, r3, #4
1000a544:	6030      	str	r0, [r6, #0]
1000a546:	062e      	lsls	r6, r5, #24
1000a548:	681b      	ldr	r3, [r3, #0]
1000a54a:	d501      	bpl.n	1000a550 <_printf_i+0x1c0>
1000a54c:	6019      	str	r1, [r3, #0]
1000a54e:	e002      	b.n	1000a556 <_printf_i+0x1c6>
1000a550:	0668      	lsls	r0, r5, #25
1000a552:	d5fb      	bpl.n	1000a54c <_printf_i+0x1bc>
1000a554:	8019      	strh	r1, [r3, #0]
1000a556:	2300      	movs	r3, #0
1000a558:	6123      	str	r3, [r4, #16]
1000a55a:	4616      	mov	r6, r2
1000a55c:	e7bc      	b.n	1000a4d8 <_printf_i+0x148>
1000a55e:	6833      	ldr	r3, [r6, #0]
1000a560:	1d1a      	adds	r2, r3, #4
1000a562:	6032      	str	r2, [r6, #0]
1000a564:	681e      	ldr	r6, [r3, #0]
1000a566:	6862      	ldr	r2, [r4, #4]
1000a568:	2100      	movs	r1, #0
1000a56a:	4630      	mov	r0, r6
1000a56c:	f7f5 fd80 	bl	10000070 <memchr>
1000a570:	b108      	cbz	r0, 1000a576 <_printf_i+0x1e6>
1000a572:	1b80      	subs	r0, r0, r6
1000a574:	6060      	str	r0, [r4, #4]
1000a576:	6863      	ldr	r3, [r4, #4]
1000a578:	6123      	str	r3, [r4, #16]
1000a57a:	2300      	movs	r3, #0
1000a57c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000a580:	e7aa      	b.n	1000a4d8 <_printf_i+0x148>
1000a582:	6923      	ldr	r3, [r4, #16]
1000a584:	4632      	mov	r2, r6
1000a586:	4649      	mov	r1, r9
1000a588:	4640      	mov	r0, r8
1000a58a:	47d0      	blx	sl
1000a58c:	3001      	adds	r0, #1
1000a58e:	d0ad      	beq.n	1000a4ec <_printf_i+0x15c>
1000a590:	6823      	ldr	r3, [r4, #0]
1000a592:	079b      	lsls	r3, r3, #30
1000a594:	d413      	bmi.n	1000a5be <_printf_i+0x22e>
1000a596:	68e0      	ldr	r0, [r4, #12]
1000a598:	9b03      	ldr	r3, [sp, #12]
1000a59a:	4298      	cmp	r0, r3
1000a59c:	bfb8      	it	lt
1000a59e:	4618      	movlt	r0, r3
1000a5a0:	e7a6      	b.n	1000a4f0 <_printf_i+0x160>
1000a5a2:	2301      	movs	r3, #1
1000a5a4:	4632      	mov	r2, r6
1000a5a6:	4649      	mov	r1, r9
1000a5a8:	4640      	mov	r0, r8
1000a5aa:	47d0      	blx	sl
1000a5ac:	3001      	adds	r0, #1
1000a5ae:	d09d      	beq.n	1000a4ec <_printf_i+0x15c>
1000a5b0:	3501      	adds	r5, #1
1000a5b2:	68e3      	ldr	r3, [r4, #12]
1000a5b4:	9903      	ldr	r1, [sp, #12]
1000a5b6:	1a5b      	subs	r3, r3, r1
1000a5b8:	42ab      	cmp	r3, r5
1000a5ba:	dcf2      	bgt.n	1000a5a2 <_printf_i+0x212>
1000a5bc:	e7eb      	b.n	1000a596 <_printf_i+0x206>
1000a5be:	2500      	movs	r5, #0
1000a5c0:	f104 0619 	add.w	r6, r4, #25
1000a5c4:	e7f5      	b.n	1000a5b2 <_printf_i+0x222>
1000a5c6:	bf00      	nop
1000a5c8:	1000b013 	.word	0x1000b013
1000a5cc:	1000b024 	.word	0x1000b024

1000a5d0 <__sflush_r>:
1000a5d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1000a5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a5d8:	0716      	lsls	r6, r2, #28
1000a5da:	4605      	mov	r5, r0
1000a5dc:	460c      	mov	r4, r1
1000a5de:	d454      	bmi.n	1000a68a <__sflush_r+0xba>
1000a5e0:	684b      	ldr	r3, [r1, #4]
1000a5e2:	2b00      	cmp	r3, #0
1000a5e4:	dc02      	bgt.n	1000a5ec <__sflush_r+0x1c>
1000a5e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
1000a5e8:	2b00      	cmp	r3, #0
1000a5ea:	dd48      	ble.n	1000a67e <__sflush_r+0xae>
1000a5ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000a5ee:	2e00      	cmp	r6, #0
1000a5f0:	d045      	beq.n	1000a67e <__sflush_r+0xae>
1000a5f2:	2300      	movs	r3, #0
1000a5f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
1000a5f8:	682f      	ldr	r7, [r5, #0]
1000a5fa:	6a21      	ldr	r1, [r4, #32]
1000a5fc:	602b      	str	r3, [r5, #0]
1000a5fe:	d030      	beq.n	1000a662 <__sflush_r+0x92>
1000a600:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1000a602:	89a3      	ldrh	r3, [r4, #12]
1000a604:	0759      	lsls	r1, r3, #29
1000a606:	d505      	bpl.n	1000a614 <__sflush_r+0x44>
1000a608:	6863      	ldr	r3, [r4, #4]
1000a60a:	1ad2      	subs	r2, r2, r3
1000a60c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1000a60e:	b10b      	cbz	r3, 1000a614 <__sflush_r+0x44>
1000a610:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1000a612:	1ad2      	subs	r2, r2, r3
1000a614:	2300      	movs	r3, #0
1000a616:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000a618:	6a21      	ldr	r1, [r4, #32]
1000a61a:	4628      	mov	r0, r5
1000a61c:	47b0      	blx	r6
1000a61e:	1c43      	adds	r3, r0, #1
1000a620:	89a3      	ldrh	r3, [r4, #12]
1000a622:	d106      	bne.n	1000a632 <__sflush_r+0x62>
1000a624:	6829      	ldr	r1, [r5, #0]
1000a626:	291d      	cmp	r1, #29
1000a628:	d82b      	bhi.n	1000a682 <__sflush_r+0xb2>
1000a62a:	4a2a      	ldr	r2, [pc, #168]	@ (1000a6d4 <__sflush_r+0x104>)
1000a62c:	410a      	asrs	r2, r1
1000a62e:	07d6      	lsls	r6, r2, #31
1000a630:	d427      	bmi.n	1000a682 <__sflush_r+0xb2>
1000a632:	2200      	movs	r2, #0
1000a634:	6062      	str	r2, [r4, #4]
1000a636:	04d9      	lsls	r1, r3, #19
1000a638:	6922      	ldr	r2, [r4, #16]
1000a63a:	6022      	str	r2, [r4, #0]
1000a63c:	d504      	bpl.n	1000a648 <__sflush_r+0x78>
1000a63e:	1c42      	adds	r2, r0, #1
1000a640:	d101      	bne.n	1000a646 <__sflush_r+0x76>
1000a642:	682b      	ldr	r3, [r5, #0]
1000a644:	b903      	cbnz	r3, 1000a648 <__sflush_r+0x78>
1000a646:	6560      	str	r0, [r4, #84]	@ 0x54
1000a648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000a64a:	602f      	str	r7, [r5, #0]
1000a64c:	b1b9      	cbz	r1, 1000a67e <__sflush_r+0xae>
1000a64e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000a652:	4299      	cmp	r1, r3
1000a654:	d002      	beq.n	1000a65c <__sflush_r+0x8c>
1000a656:	4628      	mov	r0, r5
1000a658:	f7ff fb48 	bl	10009cec <_free_r>
1000a65c:	2300      	movs	r3, #0
1000a65e:	6363      	str	r3, [r4, #52]	@ 0x34
1000a660:	e00d      	b.n	1000a67e <__sflush_r+0xae>
1000a662:	2301      	movs	r3, #1
1000a664:	4628      	mov	r0, r5
1000a666:	47b0      	blx	r6
1000a668:	4602      	mov	r2, r0
1000a66a:	1c50      	adds	r0, r2, #1
1000a66c:	d1c9      	bne.n	1000a602 <__sflush_r+0x32>
1000a66e:	682b      	ldr	r3, [r5, #0]
1000a670:	2b00      	cmp	r3, #0
1000a672:	d0c6      	beq.n	1000a602 <__sflush_r+0x32>
1000a674:	2b1d      	cmp	r3, #29
1000a676:	d001      	beq.n	1000a67c <__sflush_r+0xac>
1000a678:	2b16      	cmp	r3, #22
1000a67a:	d11e      	bne.n	1000a6ba <__sflush_r+0xea>
1000a67c:	602f      	str	r7, [r5, #0]
1000a67e:	2000      	movs	r0, #0
1000a680:	e022      	b.n	1000a6c8 <__sflush_r+0xf8>
1000a682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a686:	b21b      	sxth	r3, r3
1000a688:	e01b      	b.n	1000a6c2 <__sflush_r+0xf2>
1000a68a:	690f      	ldr	r7, [r1, #16]
1000a68c:	2f00      	cmp	r7, #0
1000a68e:	d0f6      	beq.n	1000a67e <__sflush_r+0xae>
1000a690:	0793      	lsls	r3, r2, #30
1000a692:	680e      	ldr	r6, [r1, #0]
1000a694:	bf08      	it	eq
1000a696:	694b      	ldreq	r3, [r1, #20]
1000a698:	600f      	str	r7, [r1, #0]
1000a69a:	bf18      	it	ne
1000a69c:	2300      	movne	r3, #0
1000a69e:	eba6 0807 	sub.w	r8, r6, r7
1000a6a2:	608b      	str	r3, [r1, #8]
1000a6a4:	f1b8 0f00 	cmp.w	r8, #0
1000a6a8:	dde9      	ble.n	1000a67e <__sflush_r+0xae>
1000a6aa:	6a21      	ldr	r1, [r4, #32]
1000a6ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
1000a6ae:	4643      	mov	r3, r8
1000a6b0:	463a      	mov	r2, r7
1000a6b2:	4628      	mov	r0, r5
1000a6b4:	47b0      	blx	r6
1000a6b6:	2800      	cmp	r0, #0
1000a6b8:	dc08      	bgt.n	1000a6cc <__sflush_r+0xfc>
1000a6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a6c2:	81a3      	strh	r3, [r4, #12]
1000a6c4:	f04f 30ff 	mov.w	r0, #4294967295
1000a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000a6cc:	4407      	add	r7, r0
1000a6ce:	eba8 0800 	sub.w	r8, r8, r0
1000a6d2:	e7e7      	b.n	1000a6a4 <__sflush_r+0xd4>
1000a6d4:	dfbffffe 	.word	0xdfbffffe

1000a6d8 <_fflush_r>:
1000a6d8:	b538      	push	{r3, r4, r5, lr}
1000a6da:	690b      	ldr	r3, [r1, #16]
1000a6dc:	4605      	mov	r5, r0
1000a6de:	460c      	mov	r4, r1
1000a6e0:	b913      	cbnz	r3, 1000a6e8 <_fflush_r+0x10>
1000a6e2:	2500      	movs	r5, #0
1000a6e4:	4628      	mov	r0, r5
1000a6e6:	bd38      	pop	{r3, r4, r5, pc}
1000a6e8:	b118      	cbz	r0, 1000a6f2 <_fflush_r+0x1a>
1000a6ea:	6a03      	ldr	r3, [r0, #32]
1000a6ec:	b90b      	cbnz	r3, 1000a6f2 <_fflush_r+0x1a>
1000a6ee:	f7ff f98d 	bl	10009a0c <__sinit>
1000a6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a6f6:	2b00      	cmp	r3, #0
1000a6f8:	d0f3      	beq.n	1000a6e2 <_fflush_r+0xa>
1000a6fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1000a6fc:	07d0      	lsls	r0, r2, #31
1000a6fe:	d404      	bmi.n	1000a70a <_fflush_r+0x32>
1000a700:	0599      	lsls	r1, r3, #22
1000a702:	d402      	bmi.n	1000a70a <_fflush_r+0x32>
1000a704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000a706:	f7ff fada 	bl	10009cbe <__retarget_lock_acquire_recursive>
1000a70a:	4628      	mov	r0, r5
1000a70c:	4621      	mov	r1, r4
1000a70e:	f7ff ff5f 	bl	1000a5d0 <__sflush_r>
1000a712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1000a714:	07da      	lsls	r2, r3, #31
1000a716:	4605      	mov	r5, r0
1000a718:	d4e4      	bmi.n	1000a6e4 <_fflush_r+0xc>
1000a71a:	89a3      	ldrh	r3, [r4, #12]
1000a71c:	059b      	lsls	r3, r3, #22
1000a71e:	d4e1      	bmi.n	1000a6e4 <_fflush_r+0xc>
1000a720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000a722:	f7ff facd 	bl	10009cc0 <__retarget_lock_release_recursive>
1000a726:	e7dd      	b.n	1000a6e4 <_fflush_r+0xc>

1000a728 <__swbuf_r>:
1000a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a72a:	460e      	mov	r6, r1
1000a72c:	4614      	mov	r4, r2
1000a72e:	4605      	mov	r5, r0
1000a730:	b118      	cbz	r0, 1000a73a <__swbuf_r+0x12>
1000a732:	6a03      	ldr	r3, [r0, #32]
1000a734:	b90b      	cbnz	r3, 1000a73a <__swbuf_r+0x12>
1000a736:	f7ff f969 	bl	10009a0c <__sinit>
1000a73a:	69a3      	ldr	r3, [r4, #24]
1000a73c:	60a3      	str	r3, [r4, #8]
1000a73e:	89a3      	ldrh	r3, [r4, #12]
1000a740:	071a      	lsls	r2, r3, #28
1000a742:	d501      	bpl.n	1000a748 <__swbuf_r+0x20>
1000a744:	6923      	ldr	r3, [r4, #16]
1000a746:	b943      	cbnz	r3, 1000a75a <__swbuf_r+0x32>
1000a748:	4621      	mov	r1, r4
1000a74a:	4628      	mov	r0, r5
1000a74c:	f000 f82a 	bl	1000a7a4 <__swsetup_r>
1000a750:	b118      	cbz	r0, 1000a75a <__swbuf_r+0x32>
1000a752:	f04f 37ff 	mov.w	r7, #4294967295
1000a756:	4638      	mov	r0, r7
1000a758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a75a:	6823      	ldr	r3, [r4, #0]
1000a75c:	6922      	ldr	r2, [r4, #16]
1000a75e:	1a98      	subs	r0, r3, r2
1000a760:	6963      	ldr	r3, [r4, #20]
1000a762:	b2f6      	uxtb	r6, r6
1000a764:	4283      	cmp	r3, r0
1000a766:	4637      	mov	r7, r6
1000a768:	dc05      	bgt.n	1000a776 <__swbuf_r+0x4e>
1000a76a:	4621      	mov	r1, r4
1000a76c:	4628      	mov	r0, r5
1000a76e:	f7ff ffb3 	bl	1000a6d8 <_fflush_r>
1000a772:	2800      	cmp	r0, #0
1000a774:	d1ed      	bne.n	1000a752 <__swbuf_r+0x2a>
1000a776:	68a3      	ldr	r3, [r4, #8]
1000a778:	3b01      	subs	r3, #1
1000a77a:	60a3      	str	r3, [r4, #8]
1000a77c:	6823      	ldr	r3, [r4, #0]
1000a77e:	1c5a      	adds	r2, r3, #1
1000a780:	6022      	str	r2, [r4, #0]
1000a782:	701e      	strb	r6, [r3, #0]
1000a784:	6962      	ldr	r2, [r4, #20]
1000a786:	1c43      	adds	r3, r0, #1
1000a788:	429a      	cmp	r2, r3
1000a78a:	d004      	beq.n	1000a796 <__swbuf_r+0x6e>
1000a78c:	89a3      	ldrh	r3, [r4, #12]
1000a78e:	07db      	lsls	r3, r3, #31
1000a790:	d5e1      	bpl.n	1000a756 <__swbuf_r+0x2e>
1000a792:	2e0a      	cmp	r6, #10
1000a794:	d1df      	bne.n	1000a756 <__swbuf_r+0x2e>
1000a796:	4621      	mov	r1, r4
1000a798:	4628      	mov	r0, r5
1000a79a:	f7ff ff9d 	bl	1000a6d8 <_fflush_r>
1000a79e:	2800      	cmp	r0, #0
1000a7a0:	d0d9      	beq.n	1000a756 <__swbuf_r+0x2e>
1000a7a2:	e7d6      	b.n	1000a752 <__swbuf_r+0x2a>

1000a7a4 <__swsetup_r>:
1000a7a4:	b538      	push	{r3, r4, r5, lr}
1000a7a6:	4b29      	ldr	r3, [pc, #164]	@ (1000a84c <__swsetup_r+0xa8>)
1000a7a8:	4605      	mov	r5, r0
1000a7aa:	6818      	ldr	r0, [r3, #0]
1000a7ac:	460c      	mov	r4, r1
1000a7ae:	b118      	cbz	r0, 1000a7b8 <__swsetup_r+0x14>
1000a7b0:	6a03      	ldr	r3, [r0, #32]
1000a7b2:	b90b      	cbnz	r3, 1000a7b8 <__swsetup_r+0x14>
1000a7b4:	f7ff f92a 	bl	10009a0c <__sinit>
1000a7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a7bc:	0719      	lsls	r1, r3, #28
1000a7be:	d422      	bmi.n	1000a806 <__swsetup_r+0x62>
1000a7c0:	06da      	lsls	r2, r3, #27
1000a7c2:	d407      	bmi.n	1000a7d4 <__swsetup_r+0x30>
1000a7c4:	2209      	movs	r2, #9
1000a7c6:	602a      	str	r2, [r5, #0]
1000a7c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a7cc:	81a3      	strh	r3, [r4, #12]
1000a7ce:	f04f 30ff 	mov.w	r0, #4294967295
1000a7d2:	e033      	b.n	1000a83c <__swsetup_r+0x98>
1000a7d4:	0758      	lsls	r0, r3, #29
1000a7d6:	d512      	bpl.n	1000a7fe <__swsetup_r+0x5a>
1000a7d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000a7da:	b141      	cbz	r1, 1000a7ee <__swsetup_r+0x4a>
1000a7dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000a7e0:	4299      	cmp	r1, r3
1000a7e2:	d002      	beq.n	1000a7ea <__swsetup_r+0x46>
1000a7e4:	4628      	mov	r0, r5
1000a7e6:	f7ff fa81 	bl	10009cec <_free_r>
1000a7ea:	2300      	movs	r3, #0
1000a7ec:	6363      	str	r3, [r4, #52]	@ 0x34
1000a7ee:	89a3      	ldrh	r3, [r4, #12]
1000a7f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
1000a7f4:	81a3      	strh	r3, [r4, #12]
1000a7f6:	2300      	movs	r3, #0
1000a7f8:	6063      	str	r3, [r4, #4]
1000a7fa:	6923      	ldr	r3, [r4, #16]
1000a7fc:	6023      	str	r3, [r4, #0]
1000a7fe:	89a3      	ldrh	r3, [r4, #12]
1000a800:	f043 0308 	orr.w	r3, r3, #8
1000a804:	81a3      	strh	r3, [r4, #12]
1000a806:	6923      	ldr	r3, [r4, #16]
1000a808:	b94b      	cbnz	r3, 1000a81e <__swsetup_r+0x7a>
1000a80a:	89a3      	ldrh	r3, [r4, #12]
1000a80c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
1000a810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1000a814:	d003      	beq.n	1000a81e <__swsetup_r+0x7a>
1000a816:	4621      	mov	r1, r4
1000a818:	4628      	mov	r0, r5
1000a81a:	f000 f8cb 	bl	1000a9b4 <__smakebuf_r>
1000a81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a822:	f013 0201 	ands.w	r2, r3, #1
1000a826:	d00a      	beq.n	1000a83e <__swsetup_r+0x9a>
1000a828:	2200      	movs	r2, #0
1000a82a:	60a2      	str	r2, [r4, #8]
1000a82c:	6962      	ldr	r2, [r4, #20]
1000a82e:	4252      	negs	r2, r2
1000a830:	61a2      	str	r2, [r4, #24]
1000a832:	6922      	ldr	r2, [r4, #16]
1000a834:	b942      	cbnz	r2, 1000a848 <__swsetup_r+0xa4>
1000a836:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
1000a83a:	d1c5      	bne.n	1000a7c8 <__swsetup_r+0x24>
1000a83c:	bd38      	pop	{r3, r4, r5, pc}
1000a83e:	0799      	lsls	r1, r3, #30
1000a840:	bf58      	it	pl
1000a842:	6962      	ldrpl	r2, [r4, #20]
1000a844:	60a2      	str	r2, [r4, #8]
1000a846:	e7f4      	b.n	1000a832 <__swsetup_r+0x8e>
1000a848:	2000      	movs	r0, #0
1000a84a:	e7f7      	b.n	1000a83c <__swsetup_r+0x98>
1000a84c:	100200f0 	.word	0x100200f0

1000a850 <memmove>:
1000a850:	4288      	cmp	r0, r1
1000a852:	b510      	push	{r4, lr}
1000a854:	eb01 0402 	add.w	r4, r1, r2
1000a858:	d902      	bls.n	1000a860 <memmove+0x10>
1000a85a:	4284      	cmp	r4, r0
1000a85c:	4623      	mov	r3, r4
1000a85e:	d807      	bhi.n	1000a870 <memmove+0x20>
1000a860:	1e43      	subs	r3, r0, #1
1000a862:	42a1      	cmp	r1, r4
1000a864:	d008      	beq.n	1000a878 <memmove+0x28>
1000a866:	f811 2b01 	ldrb.w	r2, [r1], #1
1000a86a:	f803 2f01 	strb.w	r2, [r3, #1]!
1000a86e:	e7f8      	b.n	1000a862 <memmove+0x12>
1000a870:	4402      	add	r2, r0
1000a872:	4601      	mov	r1, r0
1000a874:	428a      	cmp	r2, r1
1000a876:	d100      	bne.n	1000a87a <memmove+0x2a>
1000a878:	bd10      	pop	{r4, pc}
1000a87a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1000a87e:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000a882:	e7f7      	b.n	1000a874 <memmove+0x24>

1000a884 <_raise_r>:
1000a884:	291f      	cmp	r1, #31
1000a886:	b538      	push	{r3, r4, r5, lr}
1000a888:	4605      	mov	r5, r0
1000a88a:	460c      	mov	r4, r1
1000a88c:	d904      	bls.n	1000a898 <_raise_r+0x14>
1000a88e:	2316      	movs	r3, #22
1000a890:	6003      	str	r3, [r0, #0]
1000a892:	f04f 30ff 	mov.w	r0, #4294967295
1000a896:	bd38      	pop	{r3, r4, r5, pc}
1000a898:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1000a89a:	b112      	cbz	r2, 1000a8a2 <_raise_r+0x1e>
1000a89c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000a8a0:	b94b      	cbnz	r3, 1000a8b6 <_raise_r+0x32>
1000a8a2:	4628      	mov	r0, r5
1000a8a4:	f000 f830 	bl	1000a908 <_getpid_r>
1000a8a8:	4622      	mov	r2, r4
1000a8aa:	4601      	mov	r1, r0
1000a8ac:	4628      	mov	r0, r5
1000a8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000a8b2:	f000 b817 	b.w	1000a8e4 <_kill_r>
1000a8b6:	2b01      	cmp	r3, #1
1000a8b8:	d00a      	beq.n	1000a8d0 <_raise_r+0x4c>
1000a8ba:	1c59      	adds	r1, r3, #1
1000a8bc:	d103      	bne.n	1000a8c6 <_raise_r+0x42>
1000a8be:	2316      	movs	r3, #22
1000a8c0:	6003      	str	r3, [r0, #0]
1000a8c2:	2001      	movs	r0, #1
1000a8c4:	e7e7      	b.n	1000a896 <_raise_r+0x12>
1000a8c6:	2100      	movs	r1, #0
1000a8c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
1000a8cc:	4620      	mov	r0, r4
1000a8ce:	4798      	blx	r3
1000a8d0:	2000      	movs	r0, #0
1000a8d2:	e7e0      	b.n	1000a896 <_raise_r+0x12>

1000a8d4 <raise>:
1000a8d4:	4b02      	ldr	r3, [pc, #8]	@ (1000a8e0 <raise+0xc>)
1000a8d6:	4601      	mov	r1, r0
1000a8d8:	6818      	ldr	r0, [r3, #0]
1000a8da:	f7ff bfd3 	b.w	1000a884 <_raise_r>
1000a8de:	bf00      	nop
1000a8e0:	100200f0 	.word	0x100200f0

1000a8e4 <_kill_r>:
1000a8e4:	b538      	push	{r3, r4, r5, lr}
1000a8e6:	4d07      	ldr	r5, [pc, #28]	@ (1000a904 <_kill_r+0x20>)
1000a8e8:	2300      	movs	r3, #0
1000a8ea:	4604      	mov	r4, r0
1000a8ec:	4608      	mov	r0, r1
1000a8ee:	4611      	mov	r1, r2
1000a8f0:	602b      	str	r3, [r5, #0]
1000a8f2:	f7f6 f99d 	bl	10000c30 <_kill>
1000a8f6:	1c43      	adds	r3, r0, #1
1000a8f8:	d102      	bne.n	1000a900 <_kill_r+0x1c>
1000a8fa:	682b      	ldr	r3, [r5, #0]
1000a8fc:	b103      	cbz	r3, 1000a900 <_kill_r+0x1c>
1000a8fe:	6023      	str	r3, [r4, #0]
1000a900:	bd38      	pop	{r3, r4, r5, pc}
1000a902:	bf00      	nop
1000a904:	10020690 	.word	0x10020690

1000a908 <_getpid_r>:
1000a908:	f7f6 b98a 	b.w	10000c20 <_getpid>

1000a90c <_realloc_r>:
1000a90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a910:	4680      	mov	r8, r0
1000a912:	4615      	mov	r5, r2
1000a914:	460c      	mov	r4, r1
1000a916:	b921      	cbnz	r1, 1000a922 <_realloc_r+0x16>
1000a918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000a91c:	4611      	mov	r1, r2
1000a91e:	f7fe bed9 	b.w	100096d4 <_malloc_r>
1000a922:	b92a      	cbnz	r2, 1000a930 <_realloc_r+0x24>
1000a924:	f7ff f9e2 	bl	10009cec <_free_r>
1000a928:	2400      	movs	r4, #0
1000a92a:	4620      	mov	r0, r4
1000a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000a930:	f000 f89e 	bl	1000aa70 <_malloc_usable_size_r>
1000a934:	4285      	cmp	r5, r0
1000a936:	4606      	mov	r6, r0
1000a938:	d802      	bhi.n	1000a940 <_realloc_r+0x34>
1000a93a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
1000a93e:	d8f4      	bhi.n	1000a92a <_realloc_r+0x1e>
1000a940:	4629      	mov	r1, r5
1000a942:	4640      	mov	r0, r8
1000a944:	f7fe fec6 	bl	100096d4 <_malloc_r>
1000a948:	4607      	mov	r7, r0
1000a94a:	2800      	cmp	r0, #0
1000a94c:	d0ec      	beq.n	1000a928 <_realloc_r+0x1c>
1000a94e:	42b5      	cmp	r5, r6
1000a950:	462a      	mov	r2, r5
1000a952:	4621      	mov	r1, r4
1000a954:	bf28      	it	cs
1000a956:	4632      	movcs	r2, r6
1000a958:	f7ff f9b3 	bl	10009cc2 <memcpy>
1000a95c:	4621      	mov	r1, r4
1000a95e:	4640      	mov	r0, r8
1000a960:	f7ff f9c4 	bl	10009cec <_free_r>
1000a964:	463c      	mov	r4, r7
1000a966:	e7e0      	b.n	1000a92a <_realloc_r+0x1e>

1000a968 <__swhatbuf_r>:
1000a968:	b570      	push	{r4, r5, r6, lr}
1000a96a:	460c      	mov	r4, r1
1000a96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000a970:	2900      	cmp	r1, #0
1000a972:	b096      	sub	sp, #88	@ 0x58
1000a974:	4615      	mov	r5, r2
1000a976:	461e      	mov	r6, r3
1000a978:	da0d      	bge.n	1000a996 <__swhatbuf_r+0x2e>
1000a97a:	89a3      	ldrh	r3, [r4, #12]
1000a97c:	f013 0f80 	tst.w	r3, #128	@ 0x80
1000a980:	f04f 0100 	mov.w	r1, #0
1000a984:	bf14      	ite	ne
1000a986:	2340      	movne	r3, #64	@ 0x40
1000a988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
1000a98c:	2000      	movs	r0, #0
1000a98e:	6031      	str	r1, [r6, #0]
1000a990:	602b      	str	r3, [r5, #0]
1000a992:	b016      	add	sp, #88	@ 0x58
1000a994:	bd70      	pop	{r4, r5, r6, pc}
1000a996:	466a      	mov	r2, sp
1000a998:	f000 f848 	bl	1000aa2c <_fstat_r>
1000a99c:	2800      	cmp	r0, #0
1000a99e:	dbec      	blt.n	1000a97a <__swhatbuf_r+0x12>
1000a9a0:	9901      	ldr	r1, [sp, #4]
1000a9a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
1000a9a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
1000a9aa:	4259      	negs	r1, r3
1000a9ac:	4159      	adcs	r1, r3
1000a9ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1000a9b2:	e7eb      	b.n	1000a98c <__swhatbuf_r+0x24>

1000a9b4 <__smakebuf_r>:
1000a9b4:	898b      	ldrh	r3, [r1, #12]
1000a9b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a9b8:	079d      	lsls	r5, r3, #30
1000a9ba:	4606      	mov	r6, r0
1000a9bc:	460c      	mov	r4, r1
1000a9be:	d507      	bpl.n	1000a9d0 <__smakebuf_r+0x1c>
1000a9c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
1000a9c4:	6023      	str	r3, [r4, #0]
1000a9c6:	6123      	str	r3, [r4, #16]
1000a9c8:	2301      	movs	r3, #1
1000a9ca:	6163      	str	r3, [r4, #20]
1000a9cc:	b003      	add	sp, #12
1000a9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a9d0:	ab01      	add	r3, sp, #4
1000a9d2:	466a      	mov	r2, sp
1000a9d4:	f7ff ffc8 	bl	1000a968 <__swhatbuf_r>
1000a9d8:	9f00      	ldr	r7, [sp, #0]
1000a9da:	4605      	mov	r5, r0
1000a9dc:	4639      	mov	r1, r7
1000a9de:	4630      	mov	r0, r6
1000a9e0:	f7fe fe78 	bl	100096d4 <_malloc_r>
1000a9e4:	b948      	cbnz	r0, 1000a9fa <__smakebuf_r+0x46>
1000a9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a9ea:	059a      	lsls	r2, r3, #22
1000a9ec:	d4ee      	bmi.n	1000a9cc <__smakebuf_r+0x18>
1000a9ee:	f023 0303 	bic.w	r3, r3, #3
1000a9f2:	f043 0302 	orr.w	r3, r3, #2
1000a9f6:	81a3      	strh	r3, [r4, #12]
1000a9f8:	e7e2      	b.n	1000a9c0 <__smakebuf_r+0xc>
1000a9fa:	89a3      	ldrh	r3, [r4, #12]
1000a9fc:	6020      	str	r0, [r4, #0]
1000a9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000aa02:	81a3      	strh	r3, [r4, #12]
1000aa04:	9b01      	ldr	r3, [sp, #4]
1000aa06:	e9c4 0704 	strd	r0, r7, [r4, #16]
1000aa0a:	b15b      	cbz	r3, 1000aa24 <__smakebuf_r+0x70>
1000aa0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000aa10:	4630      	mov	r0, r6
1000aa12:	f000 f81d 	bl	1000aa50 <_isatty_r>
1000aa16:	b128      	cbz	r0, 1000aa24 <__smakebuf_r+0x70>
1000aa18:	89a3      	ldrh	r3, [r4, #12]
1000aa1a:	f023 0303 	bic.w	r3, r3, #3
1000aa1e:	f043 0301 	orr.w	r3, r3, #1
1000aa22:	81a3      	strh	r3, [r4, #12]
1000aa24:	89a3      	ldrh	r3, [r4, #12]
1000aa26:	431d      	orrs	r5, r3
1000aa28:	81a5      	strh	r5, [r4, #12]
1000aa2a:	e7cf      	b.n	1000a9cc <__smakebuf_r+0x18>

1000aa2c <_fstat_r>:
1000aa2c:	b538      	push	{r3, r4, r5, lr}
1000aa2e:	4d07      	ldr	r5, [pc, #28]	@ (1000aa4c <_fstat_r+0x20>)
1000aa30:	2300      	movs	r3, #0
1000aa32:	4604      	mov	r4, r0
1000aa34:	4608      	mov	r0, r1
1000aa36:	4611      	mov	r1, r2
1000aa38:	602b      	str	r3, [r5, #0]
1000aa3a:	f7f6 f959 	bl	10000cf0 <_fstat>
1000aa3e:	1c43      	adds	r3, r0, #1
1000aa40:	d102      	bne.n	1000aa48 <_fstat_r+0x1c>
1000aa42:	682b      	ldr	r3, [r5, #0]
1000aa44:	b103      	cbz	r3, 1000aa48 <_fstat_r+0x1c>
1000aa46:	6023      	str	r3, [r4, #0]
1000aa48:	bd38      	pop	{r3, r4, r5, pc}
1000aa4a:	bf00      	nop
1000aa4c:	10020690 	.word	0x10020690

1000aa50 <_isatty_r>:
1000aa50:	b538      	push	{r3, r4, r5, lr}
1000aa52:	4d06      	ldr	r5, [pc, #24]	@ (1000aa6c <_isatty_r+0x1c>)
1000aa54:	2300      	movs	r3, #0
1000aa56:	4604      	mov	r4, r0
1000aa58:	4608      	mov	r0, r1
1000aa5a:	602b      	str	r3, [r5, #0]
1000aa5c:	f7f6 f958 	bl	10000d10 <_isatty>
1000aa60:	1c43      	adds	r3, r0, #1
1000aa62:	d102      	bne.n	1000aa6a <_isatty_r+0x1a>
1000aa64:	682b      	ldr	r3, [r5, #0]
1000aa66:	b103      	cbz	r3, 1000aa6a <_isatty_r+0x1a>
1000aa68:	6023      	str	r3, [r4, #0]
1000aa6a:	bd38      	pop	{r3, r4, r5, pc}
1000aa6c:	10020690 	.word	0x10020690

1000aa70 <_malloc_usable_size_r>:
1000aa70:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000aa74:	1f18      	subs	r0, r3, #4
1000aa76:	2b00      	cmp	r3, #0
1000aa78:	bfbc      	itt	lt
1000aa7a:	580b      	ldrlt	r3, [r1, r0]
1000aa7c:	18c0      	addlt	r0, r0, r3
1000aa7e:	4770      	bx	lr

1000aa80 <_init>:
1000aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aa82:	bf00      	nop
1000aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000aa86:	bc08      	pop	{r3}
1000aa88:	469e      	mov	lr, r3
1000aa8a:	4770      	bx	lr

1000aa8c <_fini>:
1000aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aa8e:	bf00      	nop
1000aa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000aa92:	bc08      	pop	{r3}
1000aa94:	469e      	mov	lr, r3
1000aa96:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000aa98 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000aa98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 1000aad0 <LoopForever+0x2>
  movs  r1, #0
1000aa9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000aa9e:	e003      	b.n	1000aaa8 <LoopCopyDataInit>

1000aaa0 <CopyDataInit>:
  ldr  r3, =_sidata
1000aaa0:	4b0c      	ldr	r3, [pc, #48]	@ (1000aad4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000aaa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000aaa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000aaa6:	3104      	adds	r1, #4

1000aaa8 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000aaa8:	480b      	ldr	r0, [pc, #44]	@ (1000aad8 <LoopForever+0xa>)
  ldr  r3, =_edata
1000aaaa:	4b0c      	ldr	r3, [pc, #48]	@ (1000aadc <LoopForever+0xe>)
  adds  r2, r0, r1
1000aaac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000aaae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000aab0:	d3f6      	bcc.n	1000aaa0 <CopyDataInit>
  ldr  r2, =_sbss
1000aab2:	4a0b      	ldr	r2, [pc, #44]	@ (1000aae0 <LoopForever+0x12>)
  b  LoopFillZerobss
1000aab4:	e002      	b.n	1000aabc <LoopFillZerobss>

1000aab6 <FillZerobss>:
  movs  r3, #0
1000aab6:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000aab8:	f842 3b04 	str.w	r3, [r2], #4

1000aabc <LoopFillZerobss>:
  ldr  r3, = _ebss
1000aabc:	4b09      	ldr	r3, [pc, #36]	@ (1000aae4 <LoopForever+0x16>)
  cmp  r2, r3
1000aabe:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000aac0:	d3f9      	bcc.n	1000aab6 <FillZerobss>
  bl  SystemInit
1000aac2:	f7f5 fb25 	bl	10000110 <SystemInit>
 bl __libc_init_array
1000aac6:	f7ff f8d5 	bl	10009c74 <__libc_init_array>
  bl main
1000aaca:	f7f5 fb97 	bl	100001fc <main>

1000aace <LoopForever>:
    b LoopForever
1000aace:	e7fe      	b.n	1000aace <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000aad0:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000aad4:	1000b048 	.word	0x1000b048
  ldr  r0, =_sdata
1000aad8:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000aadc:	10020140 	.word	0x10020140
  ldr  r2, =_sbss
1000aae0:	100201cc 	.word	0x100201cc
  ldr  r3, = _ebss
1000aae4:	10020698 	.word	0x10020698
